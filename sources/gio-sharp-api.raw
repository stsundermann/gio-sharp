<?xml version="1.0" encoding="UTF-8"?>
<api parser_version="3">
  <namespace name="Gio" library="gio-2.0">
    <enum name="BusType" cname="GBusType" type="enum" gtype="g_bus_type_get_type">
      <member cname="G_BUS_TYPE_STARTER" name="Starter" value="-1"/>
      <member cname="G_BUS_TYPE_NONE" name="None" value="0"/>
      <member cname="G_BUS_TYPE_SYSTEM" name="System" value="1"/>
      <member cname="G_BUS_TYPE_SESSION" name="Session" value="2"/>
    </enum>
    <enum name="ConverterResult" cname="GConverterResult" type="enum" gtype="g_converter_result_get_type">
      <member cname="G_CONVERTER_ERROR" name="Error" value="0"/>
      <member cname="G_CONVERTER_CONVERTED" name="Converted" value="1"/>
      <member cname="G_CONVERTER_FINISHED" name="Finished" value="2"/>
      <member cname="G_CONVERTER_FLUSHED" name="Flushed" value="3"/>
    </enum>
    <enum name="CredentialsType" cname="GCredentialsType" type="enum" gtype="g_credentials_type_get_type">
      <member cname="G_CREDENTIALS_TYPE_INVALID" name="Invalid" value="0"/>
      <member cname="G_CREDENTIALS_TYPE_LINUX_UCRED" name="LinuxUcred" value="1"/>
      <member cname="G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED" name="FreebsdCmsgcred" value="2"/>
      <member cname="G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED" name="OpenbsdSockpeercred" value="3"/>
    </enum>
    <enum name="DBusError" cname="GDBusError" type="enum" gtype="g_dbus_error_get_type">
      <member cname="G_DBUS_ERROR_FAILED" name="Failed" value="0"/>
      <member cname="G_DBUS_ERROR_NO_MEMORY" name="NoMemory" value="1"/>
      <member cname="G_DBUS_ERROR_SERVICE_UNKNOWN" name="ServiceUnknown" value="2"/>
      <member cname="G_DBUS_ERROR_NAME_HAS_NO_OWNER" name="NameHasNoOwner" value="3"/>
      <member cname="G_DBUS_ERROR_NO_REPLY" name="NoReply" value="4"/>
      <member cname="G_DBUS_ERROR_IO_ERROR" name="IoError" value="5"/>
      <member cname="G_DBUS_ERROR_BAD_ADDRESS" name="BadAddress" value="6"/>
      <member cname="G_DBUS_ERROR_NOT_SUPPORTED" name="NotSupported" value="7"/>
      <member cname="G_DBUS_ERROR_LIMITS_EXCEEDED" name="LimitsExceeded" value="8"/>
      <member cname="G_DBUS_ERROR_ACCESS_DENIED" name="AccessDenied" value="9"/>
      <member cname="G_DBUS_ERROR_AUTH_FAILED" name="AuthFailed" value="10"/>
      <member cname="G_DBUS_ERROR_NO_SERVER" name="NoServer" value="11"/>
      <member cname="G_DBUS_ERROR_TIMEOUT" name="Timeout" value="12"/>
      <member cname="G_DBUS_ERROR_NO_NETWORK" name="NoNetwork" value="13"/>
      <member cname="G_DBUS_ERROR_ADDRESS_IN_USE" name="AddressInUse" value="14"/>
      <member cname="G_DBUS_ERROR_DISCONNECTED" name="Disconnected" value="15"/>
      <member cname="G_DBUS_ERROR_INVALID_ARGS" name="InvalidArgs" value="16"/>
      <member cname="G_DBUS_ERROR_FILE_NOT_FOUND" name="FileNotFound" value="17"/>
      <member cname="G_DBUS_ERROR_FILE_EXISTS" name="FileExists" value="18"/>
      <member cname="G_DBUS_ERROR_UNKNOWN_METHOD" name="UnknownMethod" value="19"/>
      <member cname="G_DBUS_ERROR_TIMED_OUT" name="TimedOut" value="20"/>
      <member cname="G_DBUS_ERROR_MATCH_RULE_NOT_FOUND" name="MatchRuleNotFound" value="21"/>
      <member cname="G_DBUS_ERROR_MATCH_RULE_INVALID" name="MatchRuleInvalid" value="22"/>
      <member cname="G_DBUS_ERROR_SPAWN_EXEC_FAILED" name="SpawnExecFailed" value="23"/>
      <member cname="G_DBUS_ERROR_SPAWN_FORK_FAILED" name="SpawnForkFailed" value="24"/>
      <member cname="G_DBUS_ERROR_SPAWN_CHILD_EXITED" name="SpawnChildExited" value="25"/>
      <member cname="G_DBUS_ERROR_SPAWN_CHILD_SIGNALED" name="SpawnChildSignaled" value="26"/>
      <member cname="G_DBUS_ERROR_SPAWN_FAILED" name="SpawnFailed" value="27"/>
      <member cname="G_DBUS_ERROR_SPAWN_SETUP_FAILED" name="SpawnSetupFailed" value="28"/>
      <member cname="G_DBUS_ERROR_SPAWN_CONFIG_INVALID" name="SpawnConfigInvalid" value="29"/>
      <member cname="G_DBUS_ERROR_SPAWN_SERVICE_INVALID" name="SpawnServiceInvalid" value="30"/>
      <member cname="G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND" name="SpawnServiceNotFound" value="31"/>
      <member cname="G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID" name="SpawnPermissionsInvalid" value="32"/>
      <member cname="G_DBUS_ERROR_SPAWN_FILE_INVALID" name="SpawnFileInvalid" value="33"/>
      <member cname="G_DBUS_ERROR_SPAWN_NO_MEMORY" name="SpawnNoMemory" value="34"/>
      <member cname="G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN" name="UnixProcessIdUnknown" value="35"/>
      <member cname="G_DBUS_ERROR_INVALID_SIGNATURE" name="InvalidSignature" value="36"/>
      <member cname="G_DBUS_ERROR_INVALID_FILE_CONTENT" name="InvalidFileContent" value="37"/>
      <member cname="G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN" name="SelinuxSecurityContextUnknown" value="38"/>
      <member cname="G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN" name="AdtAuditDataUnknown" value="39"/>
      <member cname="G_DBUS_ERROR_OBJECT_PATH_IN_USE" name="ObjectPathInUse" value="40"/>
    </enum>
    <enum name="DBusMessageByteOrder" cname="GDBusMessageByteOrder" type="enum" gtype="g_dbus_message_byte_order_get_type">
      <member cname="G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN" name="BigEndian" value="66"/>
      <member cname="G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN" name="LittleEndian" value="108"/>
    </enum>
    <enum name="DBusMessageHeaderField" cname="GDBusMessageHeaderField" type="enum" gtype="g_dbus_message_header_field_get_type">
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_INVALID" name="Invalid" value="0"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_PATH" name="Path" value="1"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE" name="Interface" value="2"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_MEMBER" name="Member" value="3"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME" name="ErrorName" value="4"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL" name="ReplySerial" value="5"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION" name="Destination" value="6"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_SENDER" name="Sender" value="7"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE" name="Signature" value="8"/>
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS" name="NumUnixFds" value="9"/>
    </enum>
    <enum name="DBusMessageType" cname="GDBusMessageType" type="enum" gtype="g_dbus_message_type_get_type">
      <member cname="G_DBUS_MESSAGE_TYPE_INVALID" name="Invalid" value="0"/>
      <member cname="G_DBUS_MESSAGE_TYPE_METHOD_CALL" name="MethodCall" value="1"/>
      <member cname="G_DBUS_MESSAGE_TYPE_METHOD_RETURN" name="MethodReturn" value="2"/>
      <member cname="G_DBUS_MESSAGE_TYPE_ERROR" name="Error" value="3"/>
      <member cname="G_DBUS_MESSAGE_TYPE_SIGNAL" name="Signal" value="4"/>
    </enum>
    <enum name="DataStreamByteOrder" cname="GDataStreamByteOrder" type="enum" gtype="g_data_stream_byte_order_get_type">
      <member cname="G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN" name="BigEndian" value="0"/>
      <member cname="G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN" name="LittleEndian" value="1"/>
      <member cname="G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN" name="HostEndian" value="2"/>
    </enum>
    <enum name="DataStreamNewlineType" cname="GDataStreamNewlineType" type="enum" gtype="g_data_stream_newline_type_get_type">
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_LF" name="Lf" value="0"/>
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_CR" name="Cr" value="1"/>
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_CR_LF" name="CrLf" value="2"/>
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_ANY" name="Any" value="3"/>
    </enum>
    <enum name="DriveStartStopType" cname="GDriveStartStopType" type="enum" gtype="g_drive_start_stop_type_get_type">
      <member cname="G_DRIVE_START_STOP_TYPE_UNKNOWN" name="Unknown" value="0"/>
      <member cname="G_DRIVE_START_STOP_TYPE_SHUTDOWN" name="Shutdown" value="1"/>
      <member cname="G_DRIVE_START_STOP_TYPE_NETWORK" name="Network" value="2"/>
      <member cname="G_DRIVE_START_STOP_TYPE_MULTIDISK" name="Multidisk" value="3"/>
      <member cname="G_DRIVE_START_STOP_TYPE_PASSWORD" name="Password" value="4"/>
    </enum>
    <enum name="EmblemOrigin" cname="GEmblemOrigin" type="enum" gtype="g_emblem_origin_get_type">
      <member cname="G_EMBLEM_ORIGIN_UNKNOWN" name="Unknown" value="0"/>
      <member cname="G_EMBLEM_ORIGIN_DEVICE" name="Device" value="1"/>
      <member cname="G_EMBLEM_ORIGIN_LIVEMETADATA" name="Livemetadata" value="2"/>
      <member cname="G_EMBLEM_ORIGIN_TAG" name="Tag" value="3"/>
    </enum>
    <enum name="FileAttributeStatus" cname="GFileAttributeStatus" type="enum" gtype="g_file_attribute_status_get_type">
      <member cname="G_FILE_ATTRIBUTE_STATUS_UNSET" name="Unset" value="0"/>
      <member cname="G_FILE_ATTRIBUTE_STATUS_SET" name="Set" value="1"/>
      <member cname="G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING" name="ErrorSetting" value="2"/>
    </enum>
    <enum name="FileAttributeType" cname="GFileAttributeType" type="enum" gtype="g_file_attribute_type_get_type">
      <member cname="G_FILE_ATTRIBUTE_TYPE_INVALID" name="Invalid" value="0"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_STRING" name="String" value="1"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_BYTE_STRING" name="ByteString" value="2"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_BOOLEAN" name="Boolean" value="3"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_UINT32" name="Uint32" value="4"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_INT32" name="Int32" value="5"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_UINT64" name="Uint64" value="6"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_INT64" name="Int64" value="7"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_OBJECT" name="Object" value="8"/>
      <member cname="G_FILE_ATTRIBUTE_TYPE_STRINGV" name="Stringv" value="9"/>
    </enum>
    <enum name="FileMonitorEvent" cname="GFileMonitorEvent" type="enum" gtype="g_file_monitor_event_get_type">
      <member cname="G_FILE_MONITOR_EVENT_CHANGED" name="Changed" value="0"/>
      <member cname="G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT" name="ChangesDoneHint" value="1"/>
      <member cname="G_FILE_MONITOR_EVENT_DELETED" name="Deleted" value="2"/>
      <member cname="G_FILE_MONITOR_EVENT_CREATED" name="Created" value="3"/>
      <member cname="G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED" name="AttributeChanged" value="4"/>
      <member cname="G_FILE_MONITOR_EVENT_PRE_UNMOUNT" name="PreUnmount" value="5"/>
      <member cname="G_FILE_MONITOR_EVENT_UNMOUNTED" name="Unmounted" value="6"/>
      <member cname="G_FILE_MONITOR_EVENT_MOVED" name="Moved" value="7"/>
    </enum>
    <enum name="FileType" cname="GFileType" type="enum" gtype="g_file_type_get_type">
      <member cname="G_FILE_TYPE_UNKNOWN" name="Unknown" value="0"/>
      <member cname="G_FILE_TYPE_REGULAR" name="Regular" value="1"/>
      <member cname="G_FILE_TYPE_DIRECTORY" name="Directory" value="2"/>
      <member cname="G_FILE_TYPE_SYMBOLIC_LINK" name="SymbolicLink" value="3"/>
      <member cname="G_FILE_TYPE_SPECIAL" name="Special" value="4"/>
      <member cname="G_FILE_TYPE_SHORTCUT" name="Shortcut" value="5"/>
      <member cname="G_FILE_TYPE_MOUNTABLE" name="Mountable" value="6"/>
    </enum>
    <enum name="FilesystemPreviewType" cname="GFilesystemPreviewType" type="enum" gtype="g_filesystem_preview_type_get_type">
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS" name="IfAlways" value="0"/>
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL" name="IfLocal" value="1"/>
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_NEVER" name="Never" value="2"/>
    </enum>
    <enum name="IOErrorEnum" cname="GIOErrorEnum" type="enum" gtype="g_io_error_enum_get_type">
      <member cname="G_IO_ERROR_FAILED" name="Failed" value="0"/>
      <member cname="G_IO_ERROR_NOT_FOUND" name="NotFound" value="1"/>
      <member cname="G_IO_ERROR_EXISTS" name="Exists" value="2"/>
      <member cname="G_IO_ERROR_IS_DIRECTORY" name="IsDirectory" value="3"/>
      <member cname="G_IO_ERROR_NOT_DIRECTORY" name="NotDirectory" value="4"/>
      <member cname="G_IO_ERROR_NOT_EMPTY" name="NotEmpty" value="5"/>
      <member cname="G_IO_ERROR_NOT_REGULAR_FILE" name="NotRegularFile" value="6"/>
      <member cname="G_IO_ERROR_NOT_SYMBOLIC_LINK" name="NotSymbolicLink" value="7"/>
      <member cname="G_IO_ERROR_NOT_MOUNTABLE_FILE" name="NotMountableFile" value="8"/>
      <member cname="G_IO_ERROR_FILENAME_TOO_LONG" name="FilenameTooLong" value="9"/>
      <member cname="G_IO_ERROR_INVALID_FILENAME" name="InvalidFilename" value="10"/>
      <member cname="G_IO_ERROR_TOO_MANY_LINKS" name="TooManyLinks" value="11"/>
      <member cname="G_IO_ERROR_NO_SPACE" name="NoSpace" value="12"/>
      <member cname="G_IO_ERROR_INVALID_ARGUMENT" name="InvalidArgument" value="13"/>
      <member cname="G_IO_ERROR_PERMISSION_DENIED" name="PermissionDenied" value="14"/>
      <member cname="G_IO_ERROR_NOT_SUPPORTED" name="NotSupported" value="15"/>
      <member cname="G_IO_ERROR_NOT_MOUNTED" name="NotMounted" value="16"/>
      <member cname="G_IO_ERROR_ALREADY_MOUNTED" name="AlreadyMounted" value="17"/>
      <member cname="G_IO_ERROR_CLOSED" name="Closed" value="18"/>
      <member cname="G_IO_ERROR_CANCELLED" name="Cancelled" value="19"/>
      <member cname="G_IO_ERROR_PENDING" name="Pending" value="20"/>
      <member cname="G_IO_ERROR_READ_ONLY" name="ReadOnly" value="21"/>
      <member cname="G_IO_ERROR_CANT_CREATE_BACKUP" name="CantCreateBackup" value="22"/>
      <member cname="G_IO_ERROR_WRONG_ETAG" name="WrongEtag" value="23"/>
      <member cname="G_IO_ERROR_TIMED_OUT" name="TimedOut" value="24"/>
      <member cname="G_IO_ERROR_WOULD_RECURSE" name="WouldRecurse" value="25"/>
      <member cname="G_IO_ERROR_BUSY" name="Busy" value="26"/>
      <member cname="G_IO_ERROR_WOULD_BLOCK" name="WouldBlock" value="27"/>
      <member cname="G_IO_ERROR_HOST_NOT_FOUND" name="HostNotFound" value="28"/>
      <member cname="G_IO_ERROR_WOULD_MERGE" name="WouldMerge" value="29"/>
      <member cname="G_IO_ERROR_FAILED_HANDLED" name="FailedHandled" value="30"/>
      <member cname="G_IO_ERROR_TOO_MANY_OPEN_FILES" name="TooManyOpenFiles" value="31"/>
      <member cname="G_IO_ERROR_NOT_INITIALIZED" name="NotInitialized" value="32"/>
      <member cname="G_IO_ERROR_ADDRESS_IN_USE" name="AddressInUse" value="33"/>
      <member cname="G_IO_ERROR_PARTIAL_INPUT" name="PartialInput" value="34"/>
      <member cname="G_IO_ERROR_INVALID_DATA" name="InvalidData" value="35"/>
      <member cname="G_IO_ERROR_DBUS_ERROR" name="DbusError" value="36"/>
      <member cname="G_IO_ERROR_HOST_UNREACHABLE" name="HostUnreachable" value="37"/>
      <member cname="G_IO_ERROR_NETWORK_UNREACHABLE" name="NetworkUnreachable" value="38"/>
      <member cname="G_IO_ERROR_CONNECTION_REFUSED" name="ConnectionRefused" value="39"/>
      <member cname="G_IO_ERROR_PROXY_FAILED" name="ProxyFailed" value="40"/>
      <member cname="G_IO_ERROR_PROXY_AUTH_FAILED" name="ProxyAuthFailed" value="41"/>
      <member cname="G_IO_ERROR_PROXY_NEED_AUTH" name="ProxyNeedAuth" value="42"/>
      <member cname="G_IO_ERROR_PROXY_NOT_ALLOWED" name="ProxyNotAllowed" value="43"/>
    </enum>
    <enum name="IOModuleScopeFlags" cname="GIOModuleScopeFlags" type="enum" gtype="g_io_module_scope_flags_get_type">
      <member cname="G_IO_MODULE_SCOPE_NONE" name="None" value="0"/>
      <member cname="G_IO_MODULE_SCOPE_BLOCK_DUPLICATES" name="BlockDuplicates" value="1"/>
    </enum>
    <enum name="MountOperationResult" cname="GMountOperationResult" type="enum" gtype="g_mount_operation_result_get_type">
      <member cname="G_MOUNT_OPERATION_HANDLED" name="Handled" value="0"/>
      <member cname="G_MOUNT_OPERATION_ABORTED" name="Aborted" value="1"/>
      <member cname="G_MOUNT_OPERATION_UNHANDLED" name="Unhandled" value="2"/>
    </enum>
    <enum name="PasswordSave" cname="GPasswordSave" type="enum" gtype="g_password_save_get_type">
      <member cname="G_PASSWORD_SAVE_NEVER" name="Never" value="0"/>
      <member cname="G_PASSWORD_SAVE_FOR_SESSION" name="ForSession" value="1"/>
      <member cname="G_PASSWORD_SAVE_PERMANENTLY" name="Permanently" value="2"/>
    </enum>
    <enum name="ResolverError" cname="GResolverError" type="enum" gtype="g_resolver_error_get_type">
      <member cname="G_RESOLVER_ERROR_NOT_FOUND" name="NotFound" value="0"/>
      <member cname="G_RESOLVER_ERROR_TEMPORARY_FAILURE" name="TemporaryFailure" value="1"/>
      <member cname="G_RESOLVER_ERROR_INTERNAL" name="Internal" value="2"/>
    </enum>
    <enum name="ResolverRecordType" cname="GResolverRecordType" type="enum" gtype="g_resolver_record_type_get_type">
      <member cname="G_RESOLVER_RECORD_SRV" name="Srv" value="1"/>
      <member cname="G_RESOLVER_RECORD_MX" name="Mx" value="2"/>
      <member cname="G_RESOLVER_RECORD_TXT" name="Txt" value="3"/>
      <member cname="G_RESOLVER_RECORD_SOA" name="Soa" value="4"/>
      <member cname="G_RESOLVER_RECORD_NS" name="Ns" value="5"/>
    </enum>
    <enum name="ResourceError" cname="GResourceError" type="enum" gtype="g_resource_error_get_type">
      <member cname="G_RESOURCE_ERROR_NOT_FOUND" name="NotFound" value="0"/>
      <member cname="G_RESOURCE_ERROR_INTERNAL" name="Internal" value="1"/>
    </enum>
    <enum name="SocketClientEvent" cname="GSocketClientEvent" type="enum" gtype="g_socket_client_event_get_type">
      <member cname="G_SOCKET_CLIENT_RESOLVING" name="Resolving" value="0"/>
      <member cname="G_SOCKET_CLIENT_RESOLVED" name="Resolved" value="1"/>
      <member cname="G_SOCKET_CLIENT_CONNECTING" name="Connecting" value="2"/>
      <member cname="G_SOCKET_CLIENT_CONNECTED" name="Connected" value="3"/>
      <member cname="G_SOCKET_CLIENT_PROXY_NEGOTIATING" name="ProxyNegotiating" value="4"/>
      <member cname="G_SOCKET_CLIENT_PROXY_NEGOTIATED" name="ProxyNegotiated" value="5"/>
      <member cname="G_SOCKET_CLIENT_TLS_HANDSHAKING" name="TlsHandshaking" value="6"/>
      <member cname="G_SOCKET_CLIENT_TLS_HANDSHAKED" name="TlsHandshaked" value="7"/>
      <member cname="G_SOCKET_CLIENT_COMPLETE" name="Complete" value="8"/>
    </enum>
    <enum name="SocketFamily" cname="GSocketFamily" type="enum" gtype="g_socket_family_get_type">
      <member cname="G_SOCKET_FAMILY_INVALID" name="Invalid" value="0"/>
      <member cname="G_SOCKET_FAMILY_UNIX" name="Unix" value="1"/>
      <member cname="G_SOCKET_FAMILY_IPV4" name="Ipv4" value="2"/>
      <member cname="G_SOCKET_FAMILY_IPV6" name="Ipv6" value="10"/>
    </enum>
    <enum name="SocketProtocol" cname="GSocketProtocol" type="enum" gtype="g_socket_protocol_get_type">
      <member cname="G_SOCKET_PROTOCOL_UNKNOWN" name="Unknown" value="-1"/>
      <member cname="G_SOCKET_PROTOCOL_DEFAULT" name="Default" value="0"/>
      <member cname="G_SOCKET_PROTOCOL_TCP" name="Tcp" value="6"/>
      <member cname="G_SOCKET_PROTOCOL_UDP" name="Udp" value="17"/>
      <member cname="G_SOCKET_PROTOCOL_SCTP" name="Sctp" value="132"/>
    </enum>
    <enum name="SocketType" cname="GSocketType" type="enum" gtype="g_socket_type_get_type">
      <member cname="G_SOCKET_TYPE_INVALID" name="Invalid" value="0"/>
      <member cname="G_SOCKET_TYPE_STREAM" name="Stream" value="1"/>
      <member cname="G_SOCKET_TYPE_DATAGRAM" name="Datagram" value="2"/>
      <member cname="G_SOCKET_TYPE_SEQPACKET" name="Seqpacket" value="3"/>
    </enum>
    <enum name="TlsAuthenticationMode" cname="GTlsAuthenticationMode" type="enum" gtype="g_tls_authentication_mode_get_type">
      <member cname="G_TLS_AUTHENTICATION_NONE" name="None" value="0"/>
      <member cname="G_TLS_AUTHENTICATION_REQUESTED" name="Requested" value="1"/>
      <member cname="G_TLS_AUTHENTICATION_REQUIRED" name="Required" value="2"/>
    </enum>
    <enum name="TlsDatabaseLookupFlags" cname="GTlsDatabaseLookupFlags" type="enum" gtype="g_tls_database_lookup_flags_get_type">
      <member cname="G_TLS_DATABASE_LOOKUP_NONE" name="None" value="0"/>
      <member cname="G_TLS_DATABASE_LOOKUP_KEYPAIR" name="Keypair" value="1"/>
    </enum>
    <enum name="TlsError" cname="GTlsError" type="enum" gtype="g_tls_error_get_type">
      <member cname="G_TLS_ERROR_UNAVAILABLE" name="Unavailable" value="0"/>
      <member cname="G_TLS_ERROR_MISC" name="Misc" value="1"/>
      <member cname="G_TLS_ERROR_BAD_CERTIFICATE" name="BadCertificate" value="2"/>
      <member cname="G_TLS_ERROR_NOT_TLS" name="NotTls" value="3"/>
      <member cname="G_TLS_ERROR_HANDSHAKE" name="Handshake" value="4"/>
      <member cname="G_TLS_ERROR_CERTIFICATE_REQUIRED" name="CertificateRequired" value="5"/>
      <member cname="G_TLS_ERROR_EOF" name="Eof" value="6"/>
    </enum>
    <enum name="TlsInteractionResult" cname="GTlsInteractionResult" type="enum" gtype="g_tls_interaction_result_get_type">
      <member cname="G_TLS_INTERACTION_UNHANDLED" name="Unhandled" value="0"/>
      <member cname="G_TLS_INTERACTION_HANDLED" name="Handled" value="1"/>
      <member cname="G_TLS_INTERACTION_FAILED" name="Failed" value="2"/>
    </enum>
    <enum name="TlsRehandshakeMode" cname="GTlsRehandshakeMode" type="enum" gtype="g_tls_rehandshake_mode_get_type">
      <member cname="G_TLS_REHANDSHAKE_NEVER" name="Never" value="0"/>
      <member cname="G_TLS_REHANDSHAKE_SAFELY" name="Safely" value="1"/>
      <member cname="G_TLS_REHANDSHAKE_UNSAFELY" name="Unsafely" value="2"/>
    </enum>
    <enum name="UnixSocketAddressType" cname="GUnixSocketAddressType" type="enum" gtype="g_unix_socket_address_type_get_type">
      <member cname="G_UNIX_SOCKET_ADDRESS_INVALID" name="Invalid" value="0"/>
      <member cname="G_UNIX_SOCKET_ADDRESS_ANONYMOUS" name="Anonymous" value="1"/>
      <member cname="G_UNIX_SOCKET_ADDRESS_PATH" name="Path" value="2"/>
      <member cname="G_UNIX_SOCKET_ADDRESS_ABSTRACT" name="Abstract" value="3"/>
      <member cname="G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED" name="AbstractPadded" value="4"/>
    </enum>
    <enum name="ZlibCompressorFormat" cname="GZlibCompressorFormat" type="enum" gtype="g_zlib_compressor_format_get_type">
      <member cname="G_ZLIB_COMPRESSOR_FORMAT_ZLIB" name="Zlib" value="0"/>
      <member cname="G_ZLIB_COMPRESSOR_FORMAT_GZIP" name="Gzip" value="1"/>
      <member cname="G_ZLIB_COMPRESSOR_FORMAT_RAW" name="Raw" value="2"/>
    </enum>
    <enum name="AppInfoCreateFlags" cname="GAppInfoCreateFlags" type="flags" gtype="g_app_info_create_flags_get_type">
      <member cname="G_APP_INFO_CREATE_NONE" name="None" value="0"/>
      <member cname="G_APP_INFO_CREATE_NEEDS_TERMINAL" name="NeedsTerminal" value="1"/>
      <member cname="G_APP_INFO_CREATE_SUPPORTS_URIS" name="SupportsUris" value="2"/>
      <member cname="G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION" name="SupportsStartupNotification" value="4"/>
    </enum>
    <enum name="ApplicationFlags" cname="GApplicationFlags" type="flags" gtype="g_application_flags_get_type">
      <member cname="G_APPLICATION_FLAGS_NONE" name="FlagsNone" value="0"/>
      <member cname="G_APPLICATION_IS_SERVICE" name="IsService" value="1"/>
      <member cname="G_APPLICATION_IS_LAUNCHER" name="IsLauncher" value="2"/>
      <member cname="G_APPLICATION_HANDLES_OPEN" name="HandlesOpen" value="4"/>
      <member cname="G_APPLICATION_HANDLES_COMMAND_LINE" name="HandlesCommandLine" value="8"/>
      <member cname="G_APPLICATION_SEND_ENVIRONMENT" name="SendEnvironment" value="16"/>
      <member cname="G_APPLICATION_NON_UNIQUE" name="NonUnique" value="32"/>
    </enum>
    <enum name="AskPasswordFlags" cname="GAskPasswordFlags" type="flags" gtype="g_ask_password_flags_get_type">
      <member cname="G_ASK_PASSWORD_NEED_PASSWORD" name="NeedPassword" value="1"/>
      <member cname="G_ASK_PASSWORD_NEED_USERNAME" name="NeedUsername" value="2"/>
      <member cname="G_ASK_PASSWORD_NEED_DOMAIN" name="NeedDomain" value="4"/>
      <member cname="G_ASK_PASSWORD_SAVING_SUPPORTED" name="SavingSupported" value="8"/>
      <member cname="G_ASK_PASSWORD_ANONYMOUS_SUPPORTED" name="AnonymousSupported" value="16"/>
    </enum>
    <enum name="BusNameOwnerFlags" cname="GBusNameOwnerFlags" type="flags" gtype="g_bus_name_owner_flags_get_type">
      <member cname="G_BUS_NAME_OWNER_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT" name="AllowReplacement" value="1"/>
      <member cname="G_BUS_NAME_OWNER_FLAGS_REPLACE" name="Replace" value="2"/>
    </enum>
    <enum name="BusNameWatcherFlags" cname="GBusNameWatcherFlags" type="flags" gtype="g_bus_name_watcher_flags_get_type">
      <member cname="G_BUS_NAME_WATCHER_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_BUS_NAME_WATCHER_FLAGS_AUTO_START" name="AutoStart" value="1"/>
    </enum>
    <enum name="ConverterFlags" cname="GConverterFlags" type="flags" gtype="g_converter_flags_get_type">
      <member cname="G_CONVERTER_NO_FLAGS" name="None" value="0"/>
      <member cname="G_CONVERTER_INPUT_AT_END" name="InputAtEnd" value="1"/>
      <member cname="G_CONVERTER_FLUSH" name="Flush" value="2"/>
    </enum>
    <enum name="DBusCallFlags" cname="GDBusCallFlags" type="flags" gtype="g_dbus_call_flags_get_type">
      <member cname="G_DBUS_CALL_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_CALL_FLAGS_NO_AUTO_START" name="NoAutoStart" value="1"/>
    </enum>
    <enum name="DBusCapabilityFlags" cname="GDBusCapabilityFlags" type="flags" gtype="g_dbus_capability_flags_get_type">
      <member cname="G_DBUS_CAPABILITY_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING" name="UnixFdPassing" value="1"/>
    </enum>
    <enum name="DBusConnectionFlags" cname="GDBusConnectionFlags" type="flags" gtype="g_dbus_connection_flags_get_type">
      <member cname="G_DBUS_CONNECTION_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT" name="AuthenticationClient" value="1"/>
      <member cname="G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER" name="AuthenticationServer" value="2"/>
      <member cname="G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" name="AuthenticationAllowAnonymous" value="4"/>
      <member cname="G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION" name="MessageBusConnection" value="8"/>
      <member cname="G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING" name="DelayMessageProcessing" value="16"/>
    </enum>
    <enum name="DBusInterfaceSkeletonFlags" cname="GDBusInterfaceSkeletonFlags" type="flags" gtype="g_dbus_interface_skeleton_flags_get_type">
      <member cname="G_DBUS_INTERFACE_SKELETON_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD" name="HandleMethodInvocationsInThread" value="1"/>
    </enum>
    <enum name="DBusMessageFlags" cname="GDBusMessageFlags" type="flags" gtype="g_dbus_message_flags_get_type">
      <member cname="G_DBUS_MESSAGE_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED" name="NoReplyExpected" value="1"/>
      <member cname="G_DBUS_MESSAGE_FLAGS_NO_AUTO_START" name="NoAutoStart" value="2"/>
    </enum>
    <enum name="DBusObjectManagerClientFlags" cname="GDBusObjectManagerClientFlags" type="flags" gtype="g_dbus_object_manager_client_flags_get_type">
      <member cname="G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START" name="DoNotAutoStart" value="1"/>
    </enum>
    <enum name="DBusPropertyInfoFlags" cname="GDBusPropertyInfoFlags" type="flags" gtype="g_dbus_property_info_flags_get_type">
      <member cname="G_DBUS_PROPERTY_INFO_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_PROPERTY_INFO_FLAGS_READABLE" name="Readable" value="1"/>
      <member cname="G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE" name="Writable" value="2"/>
    </enum>
    <enum name="DBusProxyFlags" cname="GDBusProxyFlags" type="flags" gtype="g_dbus_proxy_flags_get_type">
      <member cname="G_DBUS_PROXY_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES" name="DoNotLoadProperties" value="1"/>
      <member cname="G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS" name="DoNotConnectSignals" value="2"/>
      <member cname="G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START" name="DoNotAutoStart" value="4"/>
      <member cname="G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES" name="GetInvalidatedProperties" value="8"/>
    </enum>
    <enum name="DBusSendMessageFlags" cname="GDBusSendMessageFlags" type="flags" gtype="g_dbus_send_message_flags_get_type">
      <member cname="G_DBUS_SEND_MESSAGE_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL" name="PreserveSerial" value="1"/>
    </enum>
    <enum name="DBusServerFlags" cname="GDBusServerFlags" type="flags" gtype="g_dbus_server_flags_get_type">
      <member cname="G_DBUS_SERVER_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_SERVER_FLAGS_RUN_IN_THREAD" name="RunInThread" value="1"/>
      <member cname="G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" name="AuthenticationAllowAnonymous" value="2"/>
    </enum>
    <enum name="DBusSignalFlags" cname="GDBusSignalFlags" type="flags" gtype="g_dbus_signal_flags_get_type">
      <member cname="G_DBUS_SIGNAL_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE" name="NoMatchRule" value="1"/>
    </enum>
    <enum name="DBusSubtreeFlags" cname="GDBusSubtreeFlags" type="flags" gtype="g_dbus_subtree_flags_get_type">
      <member cname="G_DBUS_SUBTREE_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES" name="DispatchToUnenumeratedNodes" value="1"/>
    </enum>
    <enum name="DriveStartFlags" cname="GDriveStartFlags" type="flags" gtype="g_drive_start_flags_get_type">
      <member cname="G_DRIVE_START_NONE" name="None" value="0"/>
    </enum>
    <enum name="FileAttributeInfoFlags" cname="GFileAttributeInfoFlags" type="flags" gtype="g_file_attribute_info_flags_get_type">
      <member cname="G_FILE_ATTRIBUTE_INFO_NONE" name="None" value="0"/>
      <member cname="G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE" name="CopyWithFile" value="1"/>
      <member cname="G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED" name="CopyWhenMoved" value="2"/>
    </enum>
    <enum name="FileCopyFlags" cname="GFileCopyFlags" type="flags" gtype="g_file_copy_flags_get_type">
      <member cname="G_FILE_COPY_NONE" name="None" value="0"/>
      <member cname="G_FILE_COPY_OVERWRITE" name="Overwrite" value="1"/>
      <member cname="G_FILE_COPY_BACKUP" name="Backup" value="2"/>
      <member cname="G_FILE_COPY_NOFOLLOW_SYMLINKS" name="NofollowSymlinks" value="4"/>
      <member cname="G_FILE_COPY_ALL_METADATA" name="AllMetadata" value="8"/>
      <member cname="G_FILE_COPY_NO_FALLBACK_FOR_MOVE" name="NoFallbackForMove" value="16"/>
      <member cname="G_FILE_COPY_TARGET_DEFAULT_PERMS" name="TargetDefaultPerms" value="32"/>
    </enum>
    <enum name="FileCreateFlags" cname="GFileCreateFlags" type="flags" gtype="g_file_create_flags_get_type">
      <member cname="G_FILE_CREATE_NONE" name="None" value="0"/>
      <member cname="G_FILE_CREATE_PRIVATE" name="Private" value="1"/>
      <member cname="G_FILE_CREATE_REPLACE_DESTINATION" name="ReplaceDestination" value="2"/>
    </enum>
    <enum name="FileMonitorFlags" cname="GFileMonitorFlags" type="flags" gtype="g_file_monitor_flags_get_type">
      <member cname="G_FILE_MONITOR_NONE" name="None" value="0"/>
      <member cname="G_FILE_MONITOR_WATCH_MOUNTS" name="WatchMounts" value="1"/>
      <member cname="G_FILE_MONITOR_SEND_MOVED" name="SendMoved" value="2"/>
    </enum>
    <enum name="FileQueryInfoFlags" cname="GFileQueryInfoFlags" type="flags" gtype="g_file_query_info_flags_get_type">
      <member cname="G_FILE_QUERY_INFO_NONE" name="None" value="0"/>
      <member cname="G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS" name="NofollowSymlinks" value="1"/>
    </enum>
    <enum name="IOStreamSpliceFlags" cname="GIOStreamSpliceFlags" type="flags" gtype="g_io_stream_splice_flags_get_type">
      <member cname="G_IO_STREAM_SPLICE_NONE" name="None" value="0"/>
      <member cname="G_IO_STREAM_SPLICE_CLOSE_STREAM1" name="CloseStream1" value="1"/>
      <member cname="G_IO_STREAM_SPLICE_CLOSE_STREAM2" name="CloseStream2" value="2"/>
      <member cname="G_IO_STREAM_SPLICE_WAIT_FOR_BOTH" name="WaitForBoth" value="4"/>
    </enum>
    <enum name="MountMountFlags" cname="GMountMountFlags" type="flags" gtype="g_mount_mount_flags_get_type">
      <member cname="G_MOUNT_MOUNT_NONE" name="None" value="0"/>
    </enum>
    <enum name="MountUnmountFlags" cname="GMountUnmountFlags" type="flags" gtype="g_mount_unmount_flags_get_type">
      <member cname="G_MOUNT_UNMOUNT_NONE" name="None" value="0"/>
      <member cname="G_MOUNT_UNMOUNT_FORCE" name="Force" value="1"/>
    </enum>
    <enum name="OutputStreamSpliceFlags" cname="GOutputStreamSpliceFlags" type="flags" gtype="g_output_stream_splice_flags_get_type">
      <member cname="G_OUTPUT_STREAM_SPLICE_NONE" name="None" value="0"/>
      <member cname="G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE" name="CloseSource" value="1"/>
      <member cname="G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET" name="CloseTarget" value="2"/>
    </enum>
    <enum name="ResourceFlags" cname="GResourceFlags" type="flags" gtype="g_resource_flags_get_type">
      <member cname="G_RESOURCE_FLAGS_NONE" name="None" value="0"/>
      <member cname="G_RESOURCE_FLAGS_COMPRESSED" name="Compressed" value="1"/>
    </enum>
    <enum name="ResourceLookupFlags" cname="GResourceLookupFlags" type="flags" gtype="g_resource_lookup_flags_get_type">
      <member cname="G_RESOURCE_LOOKUP_FLAGS_NONE" name="None" value="0"/>
    </enum>
    <enum name="SettingsBindFlags" cname="GSettingsBindFlags" type="flags" gtype="g_settings_bind_flags_get_type">
      <member cname="G_SETTINGS_BIND_DEFAULT" name="Default" value="0"/>
      <member cname="G_SETTINGS_BIND_GET" name="Get" value="1"/>
      <member cname="G_SETTINGS_BIND_SET" name="Set" value="2"/>
      <member cname="G_SETTINGS_BIND_NO_SENSITIVITY" name="NoSensitivity" value="4"/>
      <member cname="G_SETTINGS_BIND_GET_NO_CHANGES" name="GetNoChanges" value="8"/>
      <member cname="G_SETTINGS_BIND_INVERT_BOOLEAN" name="InvertBoolean" value="16"/>
    </enum>
    <enum name="SocketMsgFlags" cname="GSocketMsgFlags" type="flags" gtype="g_socket_msg_flags_get_type">
      <member cname="G_SOCKET_MSG_NONE" name="None" value="0"/>
      <member cname="G_SOCKET_MSG_OOB" name="Oob" value="1"/>
      <member cname="G_SOCKET_MSG_PEEK" name="Peek" value="2"/>
      <member cname="G_SOCKET_MSG_DONTROUTE" name="Dontroute" value="4"/>
    </enum>
    <enum name="TestDBusFlags" cname="GTestDBusFlags" type="flags" gtype="g_test_dbus_flags_get_type">
      <member cname="G_TEST_DBUS_NONE" name="None" value="0"/>
    </enum>
    <enum name="TlsCertificateFlags" cname="GTlsCertificateFlags" type="flags" gtype="g_tls_certificate_flags_get_type">
      <member cname="G_TLS_CERTIFICATE_UNKNOWN_CA" name="UnknownCa" value="1"/>
      <member cname="G_TLS_CERTIFICATE_BAD_IDENTITY" name="BadIdentity" value="2"/>
      <member cname="G_TLS_CERTIFICATE_NOT_ACTIVATED" name="NotActivated" value="4"/>
      <member cname="G_TLS_CERTIFICATE_EXPIRED" name="Expired" value="8"/>
      <member cname="G_TLS_CERTIFICATE_REVOKED" name="Revoked" value="16"/>
      <member cname="G_TLS_CERTIFICATE_INSECURE" name="Insecure" value="32"/>
      <member cname="G_TLS_CERTIFICATE_GENERIC_ERROR" name="GenericError" value="64"/>
      <member cname="G_TLS_CERTIFICATE_VALIDATE_ALL" name="ValidateAll" value="127"/>
    </enum>
    <enum name="TlsDatabaseVerifyFlags" cname="GTlsDatabaseVerifyFlags" type="flags" gtype="g_tls_database_verify_flags_get_type">
      <member cname="G_TLS_DATABASE_VERIFY_NONE" name="None" value="0"/>
    </enum>
    <enum name="TlsPasswordFlags" cname="GTlsPasswordFlags" type="flags" gtype="g_tls_password_flags_get_type">
      <member cname="G_TLS_PASSWORD_NONE" name="None" value="0"/>
      <member cname="G_TLS_PASSWORD_RETRY" name="Retry" value="2"/>
      <member cname="G_TLS_PASSWORD_MANY_TRIES" name="ManyTries" value="4"/>
      <member cname="G_TLS_PASSWORD_FINAL_TRY" name="FinalTry" value="8"/>
    </enum>
    <callback name="AsyncReadyCallback" cname="GAsyncReadyCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="source_object" type="GObject*"/>
        <parameter name="res" type="GAsyncResult*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="BusAcquiredCallback" cname="GBusAcquiredCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="name" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="BusNameAcquiredCallback" cname="GBusNameAcquiredCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="name" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="BusNameAppearedCallback" cname="GBusNameAppearedCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="name" type="const-gchar*"/>
        <parameter name="name_owner" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="BusNameLostCallback" cname="GBusNameLostCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="name" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="BusNameVanishedCallback" cname="GBusNameVanishedCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="name" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="CancellableSourceFunc" cname="GCancellableSourceFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusInterfaceGetPropertyFunc" cname="GDBusInterfaceGetPropertyFunc">
      <return-type type="GVariant*" owned="true">
        <warning>missing glib:type-name</warning>
      </return-type>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="interface_name" type="const-gchar*"/>
        <parameter name="property_name" type="const-gchar*"/>
        <parameter name="error" type="GError**">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusInterfaceMethodCallFunc" cname="GDBusInterfaceMethodCallFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="interface_name" type="const-gchar*"/>
        <parameter name="method_name" type="const-gchar*"/>
        <parameter name="parameters" type="GVariant*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="invocation" type="GDBusMethodInvocation*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusInterfaceSetPropertyFunc" cname="GDBusInterfaceSetPropertyFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="interface_name" type="const-gchar*"/>
        <parameter name="property_name" type="const-gchar*"/>
        <parameter name="value" type="GVariant*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="error" type="GError**">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusMessageFilterFunction" cname="GDBusMessageFilterFunction">
      <return-type type="GDBusMessage*" owned="true"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="message" type="GDBusMessage*" owned="true"/>
        <parameter name="incoming" type="gboolean"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusProxyTypeFunc" cname="GDBusProxyTypeFunc">
      <return-type type="GType"/>
      <parameters>
        <parameter name="manager" type="GDBusObjectManagerClient*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter allow-none="1" name="interface_name" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusSignalCallback" cname="GDBusSignalCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender_name" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="interface_name" type="const-gchar*"/>
        <parameter name="signal_name" type="const-gchar*"/>
        <parameter name="parameters" type="GVariant*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusSubtreeDispatchFunc" cname="GDBusSubtreeDispatchFunc">
      <return-type type="GDBusInterfaceVTable*">
        <warning>missing glib:type-name</warning>
      </return-type>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="interface_name" type="const-gchar*"/>
        <parameter name="node" type="const-gchar*"/>
        <parameter name="out_user_data" type="gpointer"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback hidden="0" name="DBusSubtreeEnumerateFunc" cname="GDBusSubtreeEnumerateFunc">
      <return-type type="gchar**" array="true" null_term_array="true"/>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DBusSubtreeIntrospectFunc" cname="GDBusSubtreeIntrospectFunc">
      <return-type type="GDBusInterfaceInfo**" owned="true">
        <warning>missing glib:type-name</warning>
      </return-type>
      <parameters>
        <parameter name="connection" type="GDBusConnection*"/>
        <parameter name="sender" type="const-gchar*"/>
        <parameter name="object_path" type="const-gchar*"/>
        <parameter name="node" type="const-gchar*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="DesktopAppLaunchCallback" cname="GDesktopAppLaunchCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="appinfo" type="GDesktopAppInfo*"/>
        <parameter name="pid" type="int"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="FileProgressCallback" cname="GFileProgressCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="current_num_bytes" type="gint64"/>
        <parameter name="total_num_bytes" type="gint64"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="FileReadMoreCallback" cname="GFileReadMoreCallback">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="file_contents" type="const-gchar*"/>
        <parameter name="file_size" type="gint64"/>
        <parameter name="callback_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="IOSchedulerJobFunc" cname="GIOSchedulerJobFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="job" type="GIOSchedulerJob*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="PollableSourceFunc" cname="GPollableSourceFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="pollable_stream" type="GObject*"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback hidden="0" name="ReallocFunc" cname="GReallocFunc">
      <return-type type="gpointer"/>
      <parameters>
        <parameter name="data" type="gpointer"/>
        <parameter name="size" type="gsize"/>
      </parameters>
    </callback>
    <callback name="SettingsBindGetMapping" cname="GSettingsBindGetMapping">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="value" type="GValue*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="variant" type="GVariant*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="SettingsBindSetMapping" cname="GSettingsBindSetMapping">
      <return-type type="GVariant*" owned="true">
        <warning>missing glib:type-name</warning>
      </return-type>
      <parameters>
        <parameter name="value" type="GValue*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="expected_type" type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="SettingsGetMapping" cname="GSettingsGetMapping">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="value" type="GVariant*">
          <warning>missing glib:type-name</warning>
        </parameter>
        <parameter name="_result" type="gpointer*" owned="true" pass_as="out"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="SimpleAsyncThreadFunc" cname="GSimpleAsyncThreadFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="res" type="GSimpleAsyncResult*"/>
        <parameter name="_object" type="GObject*"/>
        <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
      </parameters>
    </callback>
    <callback name="SocketSourceFunc" cname="GSocketSourceFunc">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="socket" type="GSocket*"/>
        <parameter name="condition" type="GIOCondition"/>
        <parameter name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <interface name="Action" cname="GAction" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GActionInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_name"/>
        <method vm="get_parameter_type"/>
        <method vm="get_state_type"/>
        <method vm="get_state_hint"/>
        <method vm="get_enabled"/>
        <method vm="get_state"/>
        <method vm="change_state"/>
        <method vm="activate"/>
      </class_struct>
      <method name="GetType" cname="g_action_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Activate" cname="activate">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="ChangeState" cname="change_state">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="GetEnabled" cname="get_enabled">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetParameterType" cname="get_parameter_type">
        <return-type type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <virtual_method name="GetState" cname="get_state">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <virtual_method name="GetStateHint" cname="get_state_hint">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <virtual_method name="GetStateType" cname="get_state_type">
        <return-type type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <method name="Activate" cname="g_action_activate">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ChangeState" cname="g_action_change_state">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="GetEnabled" cname="g_action_get_enabled">
        <return-type type="gboolean"/>
      </method>
      <method name="GetName" cname="g_action_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetParameterType" cname="g_action_get_parameter_type">
        <return-type type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetState" cname="g_action_get_state">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetStateHint" cname="g_action_get_state_hint">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetStateType" cname="g_action_get_state_type">
        <return-type type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <property name="Enabled" cname="enabled" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="ParameterType" cname="parameter-type" type="GVariantType*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="State" cname="state" type="GVariant*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="StateType" cname="state-type" type="GVariantType*" readable="true" writeable="false" construct="false" construct-only="false"/>
    </interface>
    <interface name="ActionGroup" cname="GActionGroup" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GActionGroupInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="has_action"/>
        <method vm="list_actions"/>
        <method vm="get_action_enabled"/>
        <method vm="get_action_parameter_type"/>
        <method vm="get_action_state_type"/>
        <method vm="get_action_state_hint"/>
        <method vm="get_action_state"/>
        <method vm="change_action_state"/>
        <method vm="activate_action"/>
        <method signal_vm="action_added"/>
        <method signal_vm="action_removed"/>
        <method signal_vm="action_enabled_changed"/>
        <method signal_vm="action_state_changed"/>
        <method vm="query_action"/>
      </class_struct>
      <method name="GetType" cname="g_action_group_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="ActivateAction" cname="activate_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="ChangeActionState" cname="change_action_state">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionEnabled" cname="get_action_enabled">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionParameterType" cname="get_action_parameter_type">
        <return-type type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionState" cname="get_action_state">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionStateHint" cname="get_action_state_hint">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionStateType" cname="get_action_state_type">
        <return-type type="GVariantType*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="HasAction" cname="has_action">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ListActions" cname="list_actions">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
      </virtual_method>
      <virtual_method name="QueryAction" cname="query_action">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="enabled" type="gboolean*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="parameter_type" type="GVariantType**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="state_type" type="GVariantType**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="state_hint" type="GVariant**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="state" type="GVariant**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <method name="ActivateAction" cname="g_action_group_activate_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ChangeActionState" cname="g_action_group_change_action_state">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="GetActionEnabled" cname="g_action_group_get_action_enabled">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetActionParameterType" cname="g_action_group_get_action_parameter_type">
        <return-type type="GVariantType*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetActionState" cname="g_action_group_get_action_state">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetActionStateHint" cname="g_action_group_get_action_state_hint">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetActionStateType" cname="g_action_group_get_action_state_type">
        <return-type type="GVariantType*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="HasAction" cname="g_action_group_has_action">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ListActions" cname="g_action_group_list_actions">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="QueryAction" cname="g_action_group_query_action">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="enabled" type="gboolean*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="parameter_type" type="GVariantType**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="state_type" type="GVariantType**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="state_hint" type="GVariant**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="state" type="GVariant**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <signal name="ActionAdded" cname="action-added" when="last" field_name="action_added">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="ActionEnabledChanged" cname="action-enabled-changed" when="last" field_name="action_enabled_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="enabled" type="gboolean"/>
        </parameters>
      </signal>
      <signal name="ActionRemoved" cname="action-removed" when="last" field_name="action_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="ActionStateChanged" cname="action-state-changed" when="last" field_name="action_state_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
    </interface>
    <interface name="ActionMap" cname="GActionMap" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GActionMapInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="lookup_action"/>
        <method vm="add_action"/>
        <method vm="remove_action"/>
      </class_struct>
      <method name="GetType" cname="g_action_map_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="AddAction" cname="add_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="action" type="GAction*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupAction" cname="lookup_action">
        <return-type type="GAction*"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="RemoveAction" cname="remove_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <method name="AddAction" cname="g_action_map_add_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="action" type="GAction*"/>
        </parameters>
      </method>
      <method name="AddActionEntries" cname="g_action_map_add_action_entries">
        <return-type type="void"/>
        <parameters>
          <parameter name="entries" type="GActionEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="n_entries" type="gint"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupAction" cname="g_action_map_lookup_action">
        <return-type type="GAction*"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="RemoveAction" cname="g_action_map_remove_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
    </interface>
    <interface name="AppInfo" cname="GAppInfo" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GAppInfoIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="dup"/>
        <method vm="equal"/>
        <method vm="get_id"/>
        <method vm="get_name"/>
        <method vm="get_description"/>
        <method vm="get_executable"/>
        <method vm="get_icon"/>
        <method vm="launch"/>
        <method vm="supports_uris"/>
        <method vm="supports_files"/>
        <method vm="launch_uris"/>
        <method vm="should_show"/>
        <method vm="set_as_default_for_type"/>
        <method vm="set_as_default_for_extension"/>
        <method vm="add_supports_type"/>
        <method vm="can_remove_supports_type"/>
        <method vm="remove_supports_type"/>
        <method vm="can_delete"/>
        <method vm="do_delete"/>
        <method vm="get_commandline"/>
        <method vm="get_display_name"/>
        <method vm="set_as_last_used_for_type"/>
        <method vm="get_supported_types"/>
      </class_struct>
      <method name="GetType" cname="g_app_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="CreateFromCommandline" cname="g_app_info_create_from_commandline" shared="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="commandline" type="const-gchar*"/>
          <parameter allow-none="1" name="application_name" type="const-gchar*"/>
          <parameter name="flags" type="GAppInfoCreateFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetAll" cname="g_app_info_get_all" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
      </method>
      <method name="GetAllForType" cname="g_app_info_get_all_for_type" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetDefaultForType" cname="g_app_info_get_default_for_type" shared="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="must_support_uris" type="gboolean"/>
        </parameters>
      </method>
      <method name="GetDefaultForUriScheme" cname="g_app_info_get_default_for_uri_scheme" shared="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters>
          <parameter name="uri_scheme" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetFallbackForType" cname="g_app_info_get_fallback_for_type" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetRecommendedForType" cname="g_app_info_get_recommended_for_type" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="LaunchDefaultForUri" cname="g_app_info_launch_default_for_uri" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="uri" type="const-gchar*"/>
          <parameter allow-none="1" name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ResetTypeAssociations" cname="g_app_info_reset_type_associations" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <virtual_method name="AddSupportsType" cname="add_supports_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CanDelete" cname="can_delete">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanRemoveSupportsType" cname="can_remove_supports_type">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="DoDelete" cname="do_delete">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="Dup" cname="dup">
        <return-type type="GAppInfo*" owned="true"/>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo2" type="GAppInfo*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetCommandline" cname="get_commandline">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetDescription" cname="get_description">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetDisplayName" cname="get_display_name">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetExecutable" cname="get_executable">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*"/>
      </virtual_method>
      <virtual_method name="GetId" cname="get_id">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetSupportedTypes" cname="get_supported_types">
        <return-type type="char**" array="true" null_term_array="true"/>
      </virtual_method>
      <virtual_method name="Launch" cname="launch">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="files" type="GList*" element_type="GFile*"/>
          <parameter allow-none="1" name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LaunchUris" cname="launch_uris">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="uris" type="GList*" element_type="const-gchar*"/>
          <parameter allow-none="1" name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="RemoveSupportsType" cname="remove_supports_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAsDefaultForExtension" cname="set_as_default_for_extension">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="extension" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAsDefaultForType" cname="set_as_default_for_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAsLastUsedForType" cname="set_as_last_used_for_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ShouldShow" cname="should_show">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="SupportsFiles" cname="supports_files">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="SupportsUris" cname="supports_uris">
        <return-type type="gboolean"/>
      </virtual_method>
      <method name="AddSupportsType" cname="g_app_info_add_supports_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CanDelete" cname="g_app_info_can_delete">
        <return-type type="gboolean"/>
      </method>
      <method name="CanRemoveSupportsType" cname="g_app_info_can_remove_supports_type">
        <return-type type="gboolean"/>
      </method>
      <method name="Delete" cname="g_app_info_delete">
        <return-type type="gboolean"/>
      </method>
      <method name="Dup" cname="g_app_info_dup">
        <return-type type="GAppInfo*" owned="true"/>
      </method>
      <method name="Equal" cname="g_app_info_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="appinfo2" type="GAppInfo*"/>
        </parameters>
      </method>
      <method name="GetCommandline" cname="g_app_info_get_commandline">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetDescription" cname="g_app_info_get_description">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetDisplayName" cname="g_app_info_get_display_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetExecutable" cname="g_app_info_get_executable">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetIcon" cname="g_app_info_get_icon">
        <return-type type="GIcon*"/>
      </method>
      <method name="GetId" cname="g_app_info_get_id">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetName" cname="g_app_info_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetSupportedTypes" cname="g_app_info_get_supported_types">
        <return-type type="char**" array="true" null_term_array="true"/>
      </method>
      <method name="Launch" cname="g_app_info_launch">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="files" type="GList*" element_type="GFile*"/>
          <parameter allow-none="1" name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LaunchUris" cname="g_app_info_launch_uris">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="uris" type="GList*" element_type="const-gchar*"/>
          <parameter allow-none="1" name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="RemoveSupportsType" cname="g_app_info_remove_supports_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAsDefaultForExtension" cname="g_app_info_set_as_default_for_extension">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="extension" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAsDefaultForType" cname="g_app_info_set_as_default_for_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAsLastUsedForType" cname="g_app_info_set_as_last_used_for_type">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ShouldShow" cname="g_app_info_should_show">
        <return-type type="gboolean"/>
      </method>
      <method name="SupportsFiles" cname="g_app_info_supports_files">
        <return-type type="gboolean"/>
      </method>
      <method name="SupportsUris" cname="g_app_info_supports_uris">
        <return-type type="gboolean"/>
      </method>
    </interface>
    <interface name="AsyncInitable" cname="GAsyncInitable" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GAsyncInitableIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="init_async"/>
        <method vm="init_finish"/>
      </class_struct>
      <method name="GetType" cname="g_async_initable_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="NewvAsync" cname="g_async_initable_newv_async" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="object_type" type="GType"/>
          <parameter name="n_parameters" type="guint"/>
          <parameter name="parameters" type="GParameter*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <virtual_method name="InitAsync" cname="init_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="InitFinish" cname="init_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="InitAsync" cname="g_async_initable_init_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="InitFinish" cname="g_async_initable_init_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="NewFinish" cname="g_async_initable_new_finish">
        <return-type type="GObject*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="AsyncResult" cname="GAsyncResult" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GAsyncResultIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_user_data"/>
        <method vm="get_source_object"/>
        <method vm="is_tagged"/>
      </class_struct>
      <method name="GetType" cname="g_async_result_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetSourceObject" cname="get_source_object">
        <return-type type="GObject*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetUserData" cname="get_user_data">
        <return-type type="gpointer*" owned="true"/>
      </virtual_method>
      <virtual_method name="IsTagged" cname="is_tagged">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="tag" type="gpointer"/>
        </parameters>
      </virtual_method>
      <method name="GetSourceObject" cname="g_async_result_get_source_object">
        <return-type type="GObject*" owned="true"/>
      </method>
      <method name="GetUserData" cname="g_async_result_get_user_data">
        <return-type type="gpointer*" owned="true"/>
      </method>
      <method name="IsTagged" cname="g_async_result_is_tagged">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="source_tag" type="gpointer"/>
        </parameters>
      </method>
      <method name="LegacyPropagateError" cname="g_async_result_legacy_propagate_error">
        <return-type type="gboolean"/>
      </method>
    </interface>
    <interface name="Converter" cname="GConverter" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GConverterIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="convert"/>
        <method vm="reset"/>
      </class_struct>
      <method name="GetType" cname="g_converter_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Convert" cname="convert">
        <return-type type="GConverterResult"/>
        <parameters throws="1">
          <parameter name="inbuf" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="inbuf_size" type="gsize"/>
          <parameter name="outbuf" type="gpointer"/>
          <parameter name="outbuf_size" type="gsize"/>
          <parameter name="flags" type="GConverterFlags"/>
          <parameter name="bytes_read" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="bytes_written" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void"/>
      </virtual_method>
      <method name="Convert" cname="g_converter_convert">
        <return-type type="GConverterResult"/>
        <parameters throws="1">
          <parameter name="inbuf" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="inbuf_size" type="gsize"/>
          <parameter name="outbuf" type="gpointer"/>
          <parameter name="outbuf_size" type="gsize"/>
          <parameter name="flags" type="GConverterFlags"/>
          <parameter name="bytes_read" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="bytes_written" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Reset" cname="g_converter_reset">
        <return-type type="void"/>
      </method>
    </interface>
    <interface name="DBusInterface" cname="GDBusInterface" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GDBusInterfaceIface">
        <field cname="parent_iface" access="public" writeable="false" readable="true" name="ParentIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_info"/>
        <method vm="get_object"/>
        <method vm="set_object"/>
        <method vm="dup_object"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_interface_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="DupObject" cname="dup_object">
        <return-type type="GDBusObject*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetInfo" cname="get_info">
        <return-type type="GDBusInterfaceInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <virtual_method name="GetObject" cname="get_object" hidden="true">
        <return-type type="GDBusObject*"/>
      </virtual_method>
      <virtual_method name="SetObject" cname="set_object">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="_object" type="GDBusObject*"/>
        </parameters>
      </virtual_method>
      <method name="DupObject" cname="g_dbus_interface_dup_object">
        <return-type type="GDBusObject*" owned="true"/>
      </method>
      <method name="GetInfo" cname="g_dbus_interface_get_info">
        <return-type type="GDBusInterfaceInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="SetObject" cname="g_dbus_interface_set_object">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="_object" type="GDBusObject*"/>
        </parameters>
      </method>
    </interface>
    <interface name="DBusObject" cname="GDBusObject" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GDBusObjectIface">
        <field cname="parent_iface" access="public" writeable="false" readable="true" name="ParentIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_object_path"/>
        <method vm="get_interfaces"/>
        <method vm="get_interface"/>
        <method signal_vm="interface_added"/>
        <method signal_vm="interface_removed"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_object_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetInterface" cname="get_interface">
        <return-type type="GDBusInterface*" owned="true"/>
        <parameters>
          <parameter name="interface_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetInterfaces" cname="get_interfaces">
        <return-type type="GList*" element_type="GDBusInterface*" elements_owned="true" owned="true"/>
      </virtual_method>
      <virtual_method name="GetObjectPath" cname="get_object_path">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <method name="GetInterface" cname="g_dbus_object_get_interface">
        <return-type type="GDBusInterface*" owned="true"/>
        <parameters>
          <parameter name="interface_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetInterfaces" cname="g_dbus_object_get_interfaces">
        <return-type type="GList*" element_type="GDBusInterface*" elements_owned="true" owned="true"/>
      </method>
      <method name="GetObjectPath" cname="g_dbus_object_get_object_path">
        <return-type type="const-gchar*"/>
      </method>
      <signal name="InterfaceAdded" cname="interface-added" when="last" field_name="interface_added">
        <return-type type="void"/>
        <parameters>
          <parameter name="interface" type="GDBusInterface*"/>
        </parameters>
      </signal>
      <signal name="InterfaceRemoved" cname="interface-removed" when="last" field_name="interface_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="interface" type="GDBusInterface*"/>
        </parameters>
      </signal>
    </interface>
    <interface name="DBusObjectManager" cname="GDBusObjectManager" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GDBusObjectManagerIface">
        <field cname="parent_iface" access="public" writeable="false" readable="true" name="ParentIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_object_path"/>
        <method vm="get_objects"/>
        <method vm="get_object"/>
        <method vm="get_interface"/>
        <method signal_vm="object_added"/>
        <method signal_vm="object_removed"/>
        <method signal_vm="interface_added"/>
        <method signal_vm="interface_removed"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_object_manager_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetInterface" cname="get_interface">
        <return-type type="GDBusInterface*" owned="true"/>
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetObject" cname="get_object">
        <return-type type="GDBusObject*" owned="true"/>
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetObjectPath" cname="get_object_path">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetObjects" cname="get_objects">
        <return-type type="GList*" element_type="GDBusObject*" elements_owned="true" owned="true"/>
      </virtual_method>
      <method name="GetInterface" cname="g_dbus_object_manager_get_interface">
        <return-type type="GDBusInterface*" owned="true"/>
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetObject" cname="g_dbus_object_manager_get_object">
        <return-type type="GDBusObject*" owned="true"/>
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetObjectPath" cname="g_dbus_object_manager_get_object_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetObjects" cname="g_dbus_object_manager_get_objects">
        <return-type type="GList*" element_type="GDBusObject*" elements_owned="true" owned="true"/>
      </method>
      <signal name="InterfaceAdded" cname="interface-added" when="last" field_name="interface_added">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="GDBusObject*"/>
          <parameter name="interface" type="GDBusInterface*"/>
        </parameters>
      </signal>
      <signal name="InterfaceRemoved" cname="interface-removed" when="last" field_name="interface_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="GDBusObject*"/>
          <parameter name="interface" type="GDBusInterface*"/>
        </parameters>
      </signal>
      <signal name="ObjectAdded" cname="object-added" when="last" field_name="object_added">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="GDBusObject*"/>
        </parameters>
      </signal>
      <signal name="ObjectRemoved" cname="object-removed" when="last" field_name="object_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="GDBusObject*"/>
        </parameters>
      </signal>
    </interface>
    <interface name="DesktopAppInfoLookup" cname="GDesktopAppInfoLookup" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GDesktopAppInfoLookupIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_default_for_uri_scheme"/>
      </class_struct>
      <method name="GetType" cname="g_desktop_app_info_lookup_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetDefaultForUriScheme" cname="get_default_for_uri_scheme" deprecated="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters>
          <parameter name="uri_scheme" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <method name="GetDefaultForUriScheme" cname="g_desktop_app_info_lookup_get_default_for_uri_scheme" deprecated="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters>
          <parameter name="uri_scheme" type="const-gchar*"/>
        </parameters>
      </method>
    </interface>
    <interface name="Drive" cname="GDrive" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GDriveIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="changed"/>
        <method signal_vm="disconnected"/>
        <method signal_vm="eject_button"/>
        <method vm="get_name"/>
        <method vm="get_icon"/>
        <method vm="has_volumes"/>
        <method vm="get_volumes"/>
        <method vm="is_media_removable"/>
        <method vm="has_media"/>
        <method vm="is_media_check_automatic"/>
        <method vm="can_eject"/>
        <method vm="can_poll_for_media"/>
        <method vm="eject"/>
        <method vm="eject_finish"/>
        <method vm="poll_for_media"/>
        <method vm="poll_for_media_finish"/>
        <method vm="get_identifier"/>
        <method vm="enumerate_identifiers"/>
        <method vm="get_start_stop_type"/>
        <method vm="can_start"/>
        <method vm="can_start_degraded"/>
        <method vm="start"/>
        <method vm="start_finish"/>
        <method vm="can_stop"/>
        <method vm="stop"/>
        <method vm="stop_finish"/>
        <method signal_vm="stop_button"/>
        <method vm="eject_with_operation"/>
        <method vm="eject_with_operation_finish"/>
        <method vm="get_sort_key"/>
        <method vm="get_symbolic_icon"/>
      </class_struct>
      <method name="GetType" cname="g_drive_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanPollForMedia" cname="can_poll_for_media">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanStart" cname="can_start">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanStartDegraded" cname="can_start_degraded">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanStop" cname="can_stop">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="Eject" cname="eject" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperation" cname="eject_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperationFinish" cname="eject_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateIdentifiers" cname="enumerate_identifiers">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetIdentifier" cname="get_identifier">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="kind" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetSortKey" cname="get_sort_key">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetStartStopType" cname="get_start_stop_type">
        <return-type type="GDriveStartStopType"/>
      </virtual_method>
      <virtual_method name="GetSymbolicIcon" cname="get_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetVolumes" cname="get_volumes">
        <return-type type="GList*" element_type="GVolume*" elements_owned="true" owned="true"/>
      </virtual_method>
      <virtual_method name="HasMedia" cname="has_media">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="HasVolumes" cname="has_volumes">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="IsMediaCheckAutomatic" cname="is_media_check_automatic">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="IsMediaRemovable" cname="is_media_removable">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="PollForMedia" cname="poll_for_media">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="2" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="PollForMediaFinish" cname="poll_for_media_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Start" cname="start">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GDriveStartFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="StartFinish" cname="start_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Stop" cname="stop">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="StopFinish" cname="stop_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_drive_can_eject">
        <return-type type="gboolean"/>
      </method>
      <method name="CanPollForMedia" cname="g_drive_can_poll_for_media">
        <return-type type="gboolean"/>
      </method>
      <method name="CanStart" cname="g_drive_can_start">
        <return-type type="gboolean"/>
      </method>
      <method name="CanStartDegraded" cname="g_drive_can_start_degraded">
        <return-type type="gboolean"/>
      </method>
      <method name="CanStop" cname="g_drive_can_stop">
        <return-type type="gboolean"/>
      </method>
      <method name="Eject" cname="g_drive_eject" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_drive_eject_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EjectWithOperation" cname="g_drive_eject_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectWithOperationFinish" cname="g_drive_eject_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EnumerateIdentifiers" cname="g_drive_enumerate_identifiers">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="GetIcon" cname="g_drive_get_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GetIdentifier" cname="g_drive_get_identifier">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="kind" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetName" cname="g_drive_get_name">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetSortKey" cname="g_drive_get_sort_key">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetStartStopType" cname="g_drive_get_start_stop_type">
        <return-type type="GDriveStartStopType"/>
      </method>
      <method name="GetSymbolicIcon" cname="g_drive_get_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GetVolumes" cname="g_drive_get_volumes">
        <return-type type="GList*" element_type="GVolume*" elements_owned="true" owned="true"/>
      </method>
      <method name="HasMedia" cname="g_drive_has_media">
        <return-type type="gboolean"/>
      </method>
      <method name="HasVolumes" cname="g_drive_has_volumes">
        <return-type type="gboolean"/>
      </method>
      <method name="IsMediaCheckAutomatic" cname="g_drive_is_media_check_automatic">
        <return-type type="gboolean"/>
      </method>
      <method name="IsMediaRemovable" cname="g_drive_is_media_removable">
        <return-type type="gboolean"/>
      </method>
      <method name="PollForMedia" cname="g_drive_poll_for_media">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="PollForMediaFinish" cname="g_drive_poll_for_media_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Start" cname="g_drive_start">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GDriveStartFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="StartFinish" cname="g_drive_start_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Stop" cname="g_drive_stop">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="StopFinish" cname="g_drive_stop_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <signal name="Changed" cname="changed" when="last" field_name="changed">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="Disconnected" cname="disconnected" when="last" field_name="disconnected">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="EjectButton" cname="eject-button" when="last" field_name="eject_button">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="StopButton" cname="stop-button" when="last" field_name="stop_button">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </interface>
    <interface name="File" cname="GFile" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GFileIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="dup"/>
        <method vm="hash"/>
        <method vm="equal"/>
        <method vm="is_native"/>
        <method vm="has_uri_scheme"/>
        <method vm="get_uri_scheme"/>
        <method vm="get_basename"/>
        <method vm="get_path"/>
        <method vm="get_uri"/>
        <method vm="get_parse_name"/>
        <method vm="get_parent"/>
        <method vm="prefix_matches"/>
        <method vm="get_relative_path"/>
        <method vm="resolve_relative_path"/>
        <method vm="get_child_for_display_name"/>
        <method vm="enumerate_children"/>
        <method vm="enumerate_children_async"/>
        <method vm="enumerate_children_finish"/>
        <method vm="query_info"/>
        <method vm="query_info_async"/>
        <method vm="query_info_finish"/>
        <method vm="query_filesystem_info"/>
        <method vm="query_filesystem_info_async"/>
        <method vm="query_filesystem_info_finish"/>
        <method vm="find_enclosing_mount"/>
        <method vm="find_enclosing_mount_async"/>
        <method vm="find_enclosing_mount_finish"/>
        <method vm="set_display_name"/>
        <method vm="set_display_name_async"/>
        <method vm="set_display_name_finish"/>
        <method vm="query_settable_attributes"/>
        <method vm="_query_settable_attributes_async"/>
        <method vm="_query_settable_attributes_finish"/>
        <method vm="query_writable_namespaces"/>
        <method vm="_query_writable_namespaces_async"/>
        <method vm="_query_writable_namespaces_finish"/>
        <method vm="set_attribute"/>
        <method vm="set_attributes_from_info"/>
        <method vm="set_attributes_async"/>
        <method vm="set_attributes_finish"/>
        <method vm="read_fn"/>
        <method vm="read_async"/>
        <method vm="read_finish"/>
        <method vm="append_to"/>
        <method vm="append_to_async"/>
        <method vm="append_to_finish"/>
        <method vm="create"/>
        <method vm="create_async"/>
        <method vm="create_finish"/>
        <method vm="replace"/>
        <method vm="replace_async"/>
        <method vm="replace_finish"/>
        <method vm="delete_file"/>
        <method vm="delete_file_async"/>
        <method vm="delete_file_finish"/>
        <method vm="trash"/>
        <method vm="_trash_async"/>
        <method vm="_trash_finish"/>
        <method vm="make_directory"/>
        <method vm="_make_directory_async"/>
        <method vm="_make_directory_finish"/>
        <method vm="make_symbolic_link"/>
        <method vm="_make_symbolic_link_async"/>
        <method vm="_make_symbolic_link_finish"/>
        <method vm="copy"/>
        <method vm="copy_async"/>
        <method vm="copy_finish"/>
        <method vm="move"/>
        <method vm="_move_async"/>
        <method vm="_move_finish"/>
        <method vm="mount_mountable"/>
        <method vm="mount_mountable_finish"/>
        <method vm="unmount_mountable"/>
        <method vm="unmount_mountable_finish"/>
        <method vm="eject_mountable"/>
        <method vm="eject_mountable_finish"/>
        <method vm="mount_enclosing_volume"/>
        <method vm="mount_enclosing_volume_finish"/>
        <method vm="monitor_dir"/>
        <method vm="monitor_file"/>
        <method vm="open_readwrite"/>
        <method vm="open_readwrite_async"/>
        <method vm="open_readwrite_finish"/>
        <method vm="create_readwrite"/>
        <method vm="create_readwrite_async"/>
        <method vm="create_readwrite_finish"/>
        <method vm="replace_readwrite"/>
        <method vm="replace_readwrite_async"/>
        <method vm="replace_readwrite_finish"/>
        <method vm="start_mountable"/>
        <method vm="start_mountable_finish"/>
        <method vm="stop_mountable"/>
        <method vm="stop_mountable_finish"/>
        <field cname="supports_thread_contexts" access="public" writeable="false" readable="true" name="SupportsThreadContexts" type="gboolean"/>
        <method vm="unmount_mountable_with_operation"/>
        <method vm="unmount_mountable_with_operation_finish"/>
        <method vm="eject_mountable_with_operation"/>
        <method vm="eject_mountable_with_operation_finish"/>
        <method vm="poll_mountable"/>
        <method vm="poll_mountable_finish"/>
      </class_struct>
      <virtual_method name="_queryQuerySettableAttributesAsync" cname="_query_settable_attributes_async" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_queryQuerySettableAttributesFinish" cname="_query_settable_attributes_finish" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_queryQueryWritableNamespacesAsync" cname="_query_writable_namespaces_async" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_queryQueryWritableNamespacesFinish" cname="_query_writable_namespaces_finish" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_trashTrashAsync" cname="_trash_async" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_trashTrashFinish" cname="_trash_finish" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_makeMakeDirectoryAsync" cname="_make_directory_async" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_makeMakeDirectoryFinish" cname="_make_directory_finish" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_makeMakeSymbolicLinkAsync" cname="_make_symbolic_link_async" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_makeMakeSymbolicLinkFinish" cname="_make_symbolic_link_finish" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_moveMoveAsync" cname="_move_async" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_moveMoveFinish" cname="_move_finish" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_file_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="NewForCommandlineArg" cname="g_file_new_for_commandline_arg" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="arg" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="NewForPath" cname="g_file_new_for_path" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="NewForUri" cname="g_file_new_for_uri" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="NewTmp" cname="g_file_new_tmp" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="tmpl" type="const-gfilename*"/>
          <parameter name="iostream" type="GFileIOStream*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ParseName" cname="g_file_parse_name" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="parse_name" type="const-gchar*"/>
        </parameters>
      </method>
      <virtual_method name="AppendTo" cname="append_to">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="AppendToAsync" cname="append_to_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="AppendToFinish" cname="append_to_finish">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="call" allow-none="1" name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CopyAsync" cname="copy_async" hidden="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" allow-none="1" name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter closure="7" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="7" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CopyFinish" cname="copy_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Create" cname="create">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CreateAsync" cname="create_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CreateFinish" cname="create_finish">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CreateReadwrite" cname="create_readwrite">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CreateReadwriteAsync" cname="create_readwrite_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CreateReadwriteFinish" cname="create_readwrite_finish">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFile" cname="delete_file">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFileAsync" cname="delete_file_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFileFinish" cname="delete_file_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Dup" cname="dup">
        <return-type type="GFile*" owned="true"/>
      </virtual_method>
      <virtual_method name="EjectMountable" cname="eject_mountable" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableFinish" cname="eject_mountable_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableWithOperation" cname="eject_mountable_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableWithOperationFinish" cname="eject_mountable_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildren" cname="enumerate_children">
        <return-type type="GFileEnumerator*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildrenAsync" cname="enumerate_children_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildrenFinish" cname="enumerate_children_finish">
        <return-type type="GFileEnumerator*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file2" type="GFile*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMount" cname="find_enclosing_mount">
        <return-type type="GMount*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMountAsync" cname="find_enclosing_mount_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMountFinish" cname="find_enclosing_mount_finish">
        <return-type type="GMount*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetBasename" cname="get_basename">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetChildForDisplayName" cname="get_child_for_display_name">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="display_name" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetParent" cname="get_parent">
        <return-type type="GFile*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetParseName" cname="get_parse_name">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetPath" cname="get_path">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetRelativePath" cname="get_relative_path">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="descendant" type="GFile*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetUri" cname="get_uri">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetUriScheme" cname="get_uri_scheme">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="HasUriScheme" cname="has_uri_scheme">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="uri_scheme" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Hash" cname="hash">
        <return-type type="guint"/>
      </virtual_method>
      <virtual_method name="IsNative" cname="is_native">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="MakeDirectory" cname="make_directory">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MakeSymbolicLink" cname="make_symbolic_link">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="symlink_value" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MonitorDir" cname="monitor_dir">
        <return-type type="GFileMonitor*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileMonitorFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MonitorFile" cname="monitor_file">
        <return-type type="GFileMonitor*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileMonitorFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MountEnclosingVolume" cname="mount_enclosing_volume">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MountEnclosingVolumeFinish" cname="mount_enclosing_volume_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MountMountable" cname="mount_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MountMountableFinish" cname="mount_mountable_finish">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Move" cname="move">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="call" allow-none="1" name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="OpenReadwrite" cname="open_readwrite">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="OpenReadwriteAsync" cname="open_readwrite_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="OpenReadwriteFinish" cname="open_readwrite_finish">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="PollMountable" cname="poll_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="2" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="PollMountableFinish" cname="poll_mountable_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="PrefixMatches" cname="prefix_matches">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfo" cname="query_filesystem_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfoAsync" cname="query_filesystem_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfoFinish" cname="query_filesystem_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QuerySettableAttributes" cname="query_settable_attributes">
        <return-type type="GFileAttributeInfoList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryWritableNamespaces" cname="query_writable_namespaces">
        <return-type type="GFileAttributeInfoList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReadAsync" cname="read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFinish" cname="read_finish">
        <return-type type="GFileInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="GFileInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Replace" cname="replace">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceAsync" cname="replace_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="6" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceFinish" cname="replace_finish">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceReadwrite" cname="replace_readwrite">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceReadwriteAsync" cname="replace_readwrite_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="6" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceReadwriteFinish" cname="replace_readwrite_finish">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ResolveRelativePath" cname="resolve_relative_path">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="relative_path" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttribute" cname="set_attribute">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="type" type="GFileAttributeType"/>
          <parameter allow-none="1" name="value_p" type="gpointer"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesAsync" cname="set_attributes_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesFinish" cname="set_attributes_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="info" type="GFileInfo*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesFromInfo" cname="set_attributes_from_info">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayName" cname="set_display_name">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="display_name" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayNameAsync" cname="set_display_name_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="display_name" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayNameFinish" cname="set_display_name_finish">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="StartMountable" cname="start_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GDriveStartFlags"/>
          <parameter allow-none="1" name="start_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="StartMountableFinish" cname="start_mountable_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="StopMountable" cname="stop_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="StopMountableFinish" cname="stop_mountable_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Trash" cname="trash">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountable" cname="unmount_mountable" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableFinish" cname="unmount_mountable_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableWithOperation" cname="unmount_mountable_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableWithOperationFinish" cname="unmount_mountable_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="AppendTo" cname="g_file_append_to">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AppendToAsync" cname="g_file_append_to_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AppendToFinish" cname="g_file_append_to_finish">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Copy" cname="g_file_copy">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="call" allow-none="1" name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CopyAttributes" cname="g_file_copy_attributes">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CopyFinish" cname="g_file_copy_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Create" cname="g_file_create">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CreateAsync" cname="g_file_create_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CreateFinish" cname="g_file_create_finish">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CreateReadwrite" cname="g_file_create_readwrite">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CreateReadwriteAsync" cname="g_file_create_readwrite_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CreateReadwriteFinish" cname="g_file_create_readwrite_finish">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Delete" cname="g_file_delete">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="DeleteAsync" cname="g_file_delete_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="DeleteFinish" cname="g_file_delete_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Dup" cname="g_file_dup">
        <return-type type="GFile*" owned="true"/>
      </method>
      <method name="EjectMountable" cname="g_file_eject_mountable" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectMountableFinish" cname="g_file_eject_mountable_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EjectMountableWithOperation" cname="g_file_eject_mountable_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectMountableWithOperationFinish" cname="g_file_eject_mountable_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EnumerateChildren" cname="g_file_enumerate_children">
        <return-type type="GFileEnumerator*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EnumerateChildrenAsync" cname="g_file_enumerate_children_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EnumerateChildrenFinish" cname="g_file_enumerate_children_finish">
        <return-type type="GFileEnumerator*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Equal" cname="g_file_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="file2" type="GFile*"/>
        </parameters>
      </method>
      <method name="FindEnclosingMount" cname="g_file_find_enclosing_mount">
        <return-type type="GMount*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="FindEnclosingMountAsync" cname="g_file_find_enclosing_mount_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="FindEnclosingMountFinish" cname="g_file_find_enclosing_mount_finish">
        <return-type type="GMount*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetBasename" cname="g_file_get_basename">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetChild" cname="g_file_get_child">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetChildForDisplayName" cname="g_file_get_child_for_display_name">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="display_name" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetParent" cname="g_file_get_parent">
        <return-type type="GFile*" owned="true"/>
      </method>
      <method name="GetParseName" cname="g_file_get_parse_name">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetPath" cname="g_file_get_path">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetRelativePath" cname="g_file_get_relative_path">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="descendant" type="GFile*"/>
        </parameters>
      </method>
      <method name="GetUri" cname="g_file_get_uri">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetUriScheme" cname="g_file_get_uri_scheme">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="HasParent" cname="g_file_has_parent">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="parent" type="GFile*"/>
        </parameters>
      </method>
      <method name="HasPrefix" cname="g_file_has_prefix">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="prefix" type="GFile*"/>
        </parameters>
      </method>
      <method name="HasUriScheme" cname="g_file_has_uri_scheme">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="uri_scheme" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Hash" cname="g_file_hash">
        <return-type type="guint"/>
      </method>
      <method name="IsNative" cname="g_file_is_native">
        <return-type type="gboolean"/>
      </method>
      <method name="LoadContents" cname="g_file_load_contents">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="contents" type="char***" owned="true" pass_as="out" array="true" array_length_param_index="2"/>
          <parameter allow-none="1" name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="etag_out" type="gchar*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LoadContentsAsync" cname="g_file_load_contents_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LoadContentsFinish" cname="g_file_load_contents_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="contents" type="char***" owned="true" pass_as="out" array="true" array_length_param_index="2"/>
          <parameter allow-none="1" name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="etag_out" type="gchar*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LoadPartialContentsFinish" cname="g_file_load_partial_contents_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="contents" type="char***" owned="true" pass_as="out" array="true" array_length_param_index="2"/>
          <parameter allow-none="1" name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="etag_out" type="gchar*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MakeDirectory" cname="g_file_make_directory">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MakeDirectoryWithParents" cname="g_file_make_directory_with_parents">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MakeSymbolicLink" cname="g_file_make_symbolic_link">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="symlink_value" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Monitor" cname="g_file_monitor">
        <return-type type="GFileMonitor*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileMonitorFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MonitorDirectory" cname="g_file_monitor_directory">
        <return-type type="GFileMonitor*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileMonitorFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MonitorFile" cname="g_file_monitor_file">
        <return-type type="GFileMonitor*" owned="true"/>
        <parameters throws="1">
          <parameter name="flags" type="GFileMonitorFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MountEnclosingVolume" cname="g_file_mount_enclosing_volume">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="MountEnclosingVolumeFinish" cname="g_file_mount_enclosing_volume_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="MountMountable" cname="g_file_mount_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="MountMountableFinish" cname="g_file_mount_mountable_finish">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Move" cname="g_file_move">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="destination" type="GFile*"/>
          <parameter name="flags" type="GFileCopyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="call" allow-none="1" name="progress_callback" type="GFileProgressCallback"/>
          <parameter name="progress_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="OpenReadwrite" cname="g_file_open_readwrite">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="OpenReadwriteAsync" cname="g_file_open_readwrite_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="OpenReadwriteFinish" cname="g_file_open_readwrite_finish">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PollMountable" cname="g_file_poll_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="PollMountableFinish" cname="g_file_poll_mountable_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryDefaultHandler" cname="g_file_query_default_handler">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryExists" cname="g_file_query_exists">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="QueryFileType" cname="g_file_query_file_type">
        <return-type type="GFileType"/>
        <parameters>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="QueryFilesystemInfo" cname="g_file_query_filesystem_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryFilesystemInfoAsync" cname="g_file_query_filesystem_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="QueryFilesystemInfoFinish" cname="g_file_query_filesystem_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryInfo" cname="g_file_query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QuerySettableAttributes" cname="g_file_query_settable_attributes">
        <return-type type="GFileAttributeInfoList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryWritableNamespaces" cname="g_file_query_writable_namespaces">
        <return-type type="GFileAttributeInfoList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Read" cname="g_file_read">
        <return-type type="GFileInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadAsync" cname="g_file_read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReadFinish" cname="g_file_read_finish">
        <return-type type="GFileInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Replace" cname="g_file_replace">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReplaceAsync" cname="g_file_replace_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReplaceContents" cname="g_file_replace_contents">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="contents" type="const-char*" array="true" array_length_param_index="1"/>
          <parameter name="length" type="gsize"/>
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="new_etag" type="gchar*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReplaceContentsAsync" cname="g_file_replace_contents_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="contents" type="const-char*" array="true" array_length_param_index="1"/>
          <parameter name="length" type="gsize"/>
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="7" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReplaceContentsFinish" cname="g_file_replace_contents_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter allow-none="1" name="new_etag" type="gchar*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReplaceFinish" cname="g_file_replace_finish">
        <return-type type="GFileOutputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReplaceReadwrite" cname="g_file_replace_readwrite">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReplaceReadwriteAsync" cname="g_file_replace_readwrite_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="etag" type="const-gchar*"/>
          <parameter name="make_backup" type="gboolean"/>
          <parameter name="flags" type="GFileCreateFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReplaceReadwriteFinish" cname="g_file_replace_readwrite_finish">
        <return-type type="GFileIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ResolveRelativePath" cname="g_file_resolve_relative_path">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="relative_path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetAttribute" cname="g_file_set_attribute">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="type" type="GFileAttributeType"/>
          <parameter allow-none="1" name="value_p" type="gpointer"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributeByteString" cname="g_file_set_attribute_byte_string">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="value" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributeInt32" cname="g_file_set_attribute_int32">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="value" type="gint32"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributeInt64" cname="g_file_set_attribute_int64">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="value" type="gint64"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributeString" cname="g_file_set_attribute_string">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="value" type="const-gchar*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributeUint32" cname="g_file_set_attribute_uint32">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="value" type="guint32"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributeUint64" cname="g_file_set_attribute_uint64">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="value" type="guint64"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributesAsync" cname="g_file_set_attributes_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="SetAttributesFinish" cname="g_file_set_attributes_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="info" type="GFileInfo*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetAttributesFromInfo" cname="g_file_set_attributes_from_info">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetDisplayName" cname="g_file_set_display_name">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="display_name" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetDisplayNameAsync" cname="g_file_set_display_name_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="display_name" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="SetDisplayNameFinish" cname="g_file_set_display_name_finish">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="StartMountable" cname="g_file_start_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GDriveStartFlags"/>
          <parameter allow-none="1" name="start_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="StartMountableFinish" cname="g_file_start_mountable_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="StopMountable" cname="g_file_stop_mountable">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="StopMountableFinish" cname="g_file_stop_mountable_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SupportsThreadContexts" cname="g_file_supports_thread_contexts">
        <return-type type="gboolean"/>
      </method>
      <method name="Trash" cname="g_file_trash">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="UnmountMountable" cname="g_file_unmount_mountable" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="UnmountMountableFinish" cname="g_file_unmount_mountable_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="UnmountMountableWithOperation" cname="g_file_unmount_mountable_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="UnmountMountableWithOperationFinish" cname="g_file_unmount_mountable_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="FileDescriptorBased" cname="GFileDescriptorBased" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GFileDescriptorBasedIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_fd"/>
      </class_struct>
      <method name="GetType" cname="g_file_descriptor_based_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetFd" cname="get_fd">
        <return-type type="gint"/>
      </virtual_method>
      <method name="GetFd" cname="g_file_descriptor_based_get_fd">
        <return-type type="gint"/>
      </method>
    </interface>
    <interface name="Icon" cname="GIcon" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GIconIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="hash"/>
        <method vm="equal"/>
        <method vm="to_tokens"/>
        <method vm="from_tokens"/>
      </class_struct>
      <virtual_method name="FromTokens" cname="from_tokens" shared="true" hidden="true">
        <return-type type="GIcon*"/>
        <parameters throws="1">
          <parameter name="tokens" type="const-gchar*"/>
          <parameter name="num_tokens" type="gint"/>
          <parameter name="version" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_icon_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Hash" cname="g_icon_hash" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="icon" type="gpointer"/>
        </parameters>
      </method>
      <method name="NewForString" cname="g_icon_new_for_string" shared="true">
        <return-type type="GIcon*" owned="true"/>
        <parameters throws="1">
          <parameter name="str" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="icon2" type="GIcon*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Hash" cname="hash">
        <return-type type="guint"/>
      </virtual_method>
      <virtual_method name="ToTokens" cname="to_tokens">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="tokens" type="GPtrArray" array="true" null_term_array="true"/>
          <parameter name="out_version" type="gint"/>
        </parameters>
      </virtual_method>
      <method name="Equal" cname="g_icon_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="icon2" type="GIcon*"/>
        </parameters>
      </method>
      <method name="ToString" cname="g_icon_to_string">
        <return-type type="gchar*" owned="true"/>
      </method>
    </interface>
    <interface name="Initable" cname="GInitable" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GInitableIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="init"/>
      </class_struct>
      <method name="GetType" cname="g_initable_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Newv" cname="g_initable_newv" shared="true">
        <return-type type="gpointer*" owned="true"/>
        <parameters throws="1">
          <parameter name="object_type" type="GType"/>
          <parameter name="n_parameters" type="guint"/>
          <parameter name="parameters" type="GParameter*" array="true" array_length_param_index="1"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <virtual_method name="Init" cname="init">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="Init" cname="g_initable_init">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="LoadableIcon" cname="GLoadableIcon" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GLoadableIconIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="load"/>
        <method vm="load_async"/>
        <method vm="load_finish"/>
      </class_struct>
      <method name="GetType" cname="g_loadable_icon_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Load" cname="load">
        <return-type type="GInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="size" type="gint"/>
          <parameter allow-none="1" name="type" type="gchar*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LoadAsync" cname="load_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="size" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LoadFinish" cname="load_finish">
        <return-type type="GInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="Load" cname="g_loadable_icon_load">
        <return-type type="GInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="size" type="gint"/>
          <parameter allow-none="1" name="type" type="gchar*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LoadAsync" cname="g_loadable_icon_load_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="size" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LoadFinish" cname="g_loadable_icon_load_finish">
        <return-type type="GInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="type" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="Mount" cname="GMount" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GMountIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="changed"/>
        <method signal_vm="unmounted"/>
        <method vm="get_root"/>
        <method vm="get_name"/>
        <method vm="get_icon"/>
        <method vm="get_uuid"/>
        <method vm="get_volume"/>
        <method vm="get_drive"/>
        <method vm="can_unmount"/>
        <method vm="can_eject"/>
        <method vm="unmount"/>
        <method vm="unmount_finish"/>
        <method vm="eject"/>
        <method vm="eject_finish"/>
        <method vm="remount"/>
        <method vm="remount_finish"/>
        <method vm="guess_content_type"/>
        <method vm="guess_content_type_finish"/>
        <method vm="guess_content_type_sync"/>
        <method signal_vm="pre_unmount"/>
        <method vm="unmount_with_operation"/>
        <method vm="unmount_with_operation_finish"/>
        <method vm="eject_with_operation"/>
        <method vm="eject_with_operation_finish"/>
        <method vm="get_default_location"/>
        <method vm="get_sort_key"/>
        <method vm="get_symbolic_icon"/>
      </class_struct>
      <method name="GetType" cname="g_mount_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanUnmount" cname="can_unmount">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="Eject" cname="eject" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperation" cname="eject_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperationFinish" cname="eject_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetDefaultLocation" cname="get_default_location">
        <return-type type="GFile*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetDrive" cname="get_drive">
        <return-type type="GDrive*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetRoot" cname="get_root">
        <return-type type="GFile*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetSortKey" cname="get_sort_key">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetSymbolicIcon" cname="get_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetUuid" cname="get_uuid">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetVolume" cname="get_volume">
        <return-type type="GVolume*" owned="true"/>
      </virtual_method>
      <virtual_method name="GuessContentType" cname="guess_content_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="force_rescan" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentTypeFinish" cname="guess_content_type_finish">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentTypeSync" cname="guess_content_type_sync">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="force_rescan" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Remount" cname="remount">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="RemountFinish" cname="remount_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Unmount" cname="unmount" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountFinish" cname="unmount_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountWithOperation" cname="unmount_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountWithOperationFinish" cname="unmount_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_mount_can_eject">
        <return-type type="gboolean"/>
      </method>
      <method name="CanUnmount" cname="g_mount_can_unmount">
        <return-type type="gboolean"/>
      </method>
      <method name="Eject" cname="g_mount_eject" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_mount_eject_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EjectWithOperation" cname="g_mount_eject_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectWithOperationFinish" cname="g_mount_eject_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetDefaultLocation" cname="g_mount_get_default_location">
        <return-type type="GFile*" owned="true"/>
      </method>
      <method name="GetDrive" cname="g_mount_get_drive">
        <return-type type="GDrive*" owned="true"/>
      </method>
      <method name="GetIcon" cname="g_mount_get_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GetName" cname="g_mount_get_name">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetRoot" cname="g_mount_get_root">
        <return-type type="GFile*" owned="true"/>
      </method>
      <method name="GetSortKey" cname="g_mount_get_sort_key">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetSymbolicIcon" cname="g_mount_get_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GetUuid" cname="g_mount_get_uuid">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetVolume" cname="g_mount_get_volume">
        <return-type type="GVolume*" owned="true"/>
      </method>
      <method name="GuessContentType" cname="g_mount_guess_content_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="force_rescan" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="GuessContentTypeFinish" cname="g_mount_guess_content_type_finish">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GuessContentTypeSync" cname="g_mount_guess_content_type_sync">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="force_rescan" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="IsShadowed" cname="g_mount_is_shadowed">
        <return-type type="gboolean"/>
      </method>
      <method name="Remount" cname="g_mount_remount">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="RemountFinish" cname="g_mount_remount_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Shadow" cname="g_mount_shadow">
        <return-type type="void"/>
      </method>
      <method name="Unmount" cname="g_mount_unmount" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="UnmountFinish" cname="g_mount_unmount_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="UnmountWithOperation" cname="g_mount_unmount_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="UnmountWithOperationFinish" cname="g_mount_unmount_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Unshadow" cname="g_mount_unshadow">
        <return-type type="void"/>
      </method>
      <signal name="Changed" cname="changed" when="last" field_name="changed">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="PreUnmount" cname="pre-unmount" when="last" field_name="pre_unmount">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="Unmounted" cname="unmounted" when="last" field_name="unmounted">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </interface>
    <interface name="NetworkMonitor" cname="GNetworkMonitor" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GNetworkMonitorInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="network_changed"/>
        <method vm="can_reach"/>
        <method vm="can_reach_async"/>
        <method vm="can_reach_finish"/>
      </class_struct>
      <method name="GetType" cname="g_network_monitor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetDefault" cname="g_network_monitor_get_default" shared="true">
        <return-type type="GNetworkMonitor*"/>
      </method>
      <virtual_method name="CanReach" cname="can_reach">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CanReachAsync" cname="can_reach_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CanReachFinish" cname="can_reach_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CanReach" cname="g_network_monitor_can_reach">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CanReachAsync" cname="g_network_monitor_can_reach_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CanReachFinish" cname="g_network_monitor_can_reach_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetNetworkAvailable" cname="g_network_monitor_get_network_available">
        <return-type type="gboolean"/>
      </method>
      <property name="NetworkAvailable" cname="network-available" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <signal name="NetworkChanged" cname="network-changed" when="last" field_name="network_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="available" type="gboolean"/>
        </parameters>
      </signal>
    </interface>
    <interface name="PollableInputStream" cname="GPollableInputStream" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GPollableInputStreamInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="can_poll"/>
        <method vm="is_readable"/>
        <method vm="create_source"/>
        <method vm="read_nonblocking"/>
      </class_struct>
      <method name="GetType" cname="g_pollable_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanPoll" cname="can_poll">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CreateSource" cname="create_source">
        <return-type type="GSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="IsReadable" cname="is_readable">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="ReadNonblocking" cname="read_nonblocking">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CanPoll" cname="g_pollable_input_stream_can_poll">
        <return-type type="gboolean"/>
      </method>
      <method name="CreateSource" cname="g_pollable_input_stream_create_source">
        <return-type type="GSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="IsReadable" cname="g_pollable_input_stream_is_readable">
        <return-type type="gboolean"/>
      </method>
      <method name="ReadNonblocking" cname="g_pollable_input_stream_read_nonblocking">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="PollableOutputStream" cname="GPollableOutputStream" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GPollableOutputStreamInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="can_poll"/>
        <method vm="is_writable"/>
        <method vm="create_source"/>
        <method vm="write_nonblocking"/>
      </class_struct>
      <method name="GetType" cname="g_pollable_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanPoll" cname="can_poll">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CreateSource" cname="create_source">
        <return-type type="GSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="IsWritable" cname="is_writable">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="WriteNonblocking" cname="write_nonblocking">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CanPoll" cname="g_pollable_output_stream_can_poll">
        <return-type type="gboolean"/>
      </method>
      <method name="CreateSource" cname="g_pollable_output_stream_create_source">
        <return-type type="GSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="IsWritable" cname="g_pollable_output_stream_is_writable">
        <return-type type="gboolean"/>
      </method>
      <method name="WriteNonblocking" cname="g_pollable_output_stream_write_nonblocking">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="Proxy" cname="GProxy" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GProxyInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="connect"/>
        <method vm="connect_async"/>
        <method vm="connect_finish"/>
        <method vm="supports_hostname"/>
      </class_struct>
      <method name="GetType" cname="g_proxy_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetDefaultForProtocol" cname="g_proxy_get_default_for_protocol" shared="true">
        <return-type type="GProxy*" owned="true"/>
        <parameters>
          <parameter name="protocol" type="const-gchar*"/>
        </parameters>
      </method>
      <virtual_method name="Connect" cname="connect">
        <return-type type="GIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="connection" type="GIOStream*"/>
          <parameter name="proxy_address" type="GProxyAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ConnectAsync" cname="connect_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GIOStream*"/>
          <parameter name="proxy_address" type="GProxyAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ConnectFinish" cname="connect_finish">
        <return-type type="GIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SupportsHostname" cname="supports_hostname">
        <return-type type="gboolean"/>
      </virtual_method>
      <method name="Connect" cname="g_proxy_connect">
        <return-type type="GIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="connection" type="GIOStream*"/>
          <parameter name="proxy_address" type="GProxyAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectAsync" cname="g_proxy_connect_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GIOStream*"/>
          <parameter name="proxy_address" type="GProxyAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ConnectFinish" cname="g_proxy_connect_finish">
        <return-type type="GIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SupportsHostname" cname="g_proxy_supports_hostname">
        <return-type type="gboolean"/>
      </method>
    </interface>
    <interface name="ProxyResolver" cname="GProxyResolver" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GProxyResolverInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="is_supported"/>
        <method vm="lookup"/>
        <method vm="lookup_async"/>
        <method vm="lookup_finish"/>
      </class_struct>
      <method name="GetType" cname="g_proxy_resolver_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetDefault" cname="g_proxy_resolver_get_default" shared="true">
        <return-type type="GProxyResolver*"/>
      </method>
      <virtual_method name="IsSupported" cname="is_supported">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="Lookup" cname="lookup">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="uri" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupAsync" cname="lookup_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupFinish" cname="lookup_finish">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="IsSupported" cname="g_proxy_resolver_is_supported">
        <return-type type="gboolean"/>
      </method>
      <method name="Lookup" cname="g_proxy_resolver_lookup">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="uri" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupAsync" cname="g_proxy_resolver_lookup_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupFinish" cname="g_proxy_resolver_lookup_finish">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="RemoteActionGroup" cname="GRemoteActionGroup" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GRemoteActionGroupInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="activate_action_full"/>
        <method vm="change_action_state_full"/>
      </class_struct>
      <method name="GetType" cname="g_remote_action_group_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="ActivateActionFull" cname="activate_action_full">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="platform_data" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="ChangeActionStateFull" cname="change_action_state_full">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="platform_data" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <method name="ActivateActionFull" cname="g_remote_action_group_activate_action_full">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="platform_data" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ChangeActionStateFull" cname="g_remote_action_group_change_action_state_full">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="platform_data" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
    </interface>
    <interface name="Seekable" cname="GSeekable" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GSeekableIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="tell"/>
        <method vm="can_seek"/>
        <method vm="seek"/>
        <method vm="can_truncate"/>
        <method vm="truncate_fn"/>
      </class_struct>
      <method name="GetType" cname="g_seekable_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter name="type" type="GSeekType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Tell" cname="tell">
        <return-type type="gint64"/>
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CanSeek" cname="g_seekable_can_seek">
        <return-type type="gboolean"/>
      </method>
      <method name="CanTruncate" cname="g_seekable_can_truncate">
        <return-type type="gboolean"/>
      </method>
      <method name="Seek" cname="g_seekable_seek">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter name="type" type="GSeekType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Tell" cname="g_seekable_tell">
        <return-type type="gint64"/>
      </method>
      <method name="Truncate" cname="g_seekable_truncate">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </interface>
    <interface name="SocketConnectable" cname="GSocketConnectable" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GSocketConnectableIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="enumerate"/>
        <method vm="proxy_enumerate"/>
      </class_struct>
      <method name="GetType" cname="g_socket_connectable_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Enumerate" cname="enumerate">
        <return-type type="GSocketAddressEnumerator*" owned="true"/>
      </virtual_method>
      <virtual_method name="ProxyEnumerate" cname="proxy_enumerate">
        <return-type type="GSocketAddressEnumerator*" owned="true"/>
      </virtual_method>
      <method name="Enumerate" cname="g_socket_connectable_enumerate">
        <return-type type="GSocketAddressEnumerator*" owned="true"/>
      </method>
      <method name="ProxyEnumerate" cname="g_socket_connectable_proxy_enumerate">
        <return-type type="GSocketAddressEnumerator*" owned="true"/>
      </method>
    </interface>
    <interface name="TlsBackend" cname="GTlsBackend" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GTlsBackendInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="supports_tls"/>
        <method vm="get_certificate_type"/>
        <method vm="get_client_connection_type"/>
        <method vm="get_server_connection_type"/>
        <method vm="get_file_database_type"/>
        <method vm="get_default_database"/>
      </class_struct>
      <virtual_method name="GetCertificateType" cname="get_certificate_type" shared="true">
        <return-type type="GType"/>
      </virtual_method>
      <virtual_method name="GetClientConnectionType" cname="get_client_connection_type" shared="true">
        <return-type type="GType"/>
      </virtual_method>
      <virtual_method name="GetServerConnectionType" cname="get_server_connection_type" shared="true">
        <return-type type="GType"/>
      </virtual_method>
      <virtual_method name="GetFileDatabaseType" cname="get_file_database_type" shared="true">
        <return-type type="GType"/>
      </virtual_method>
      <method name="GetType" cname="g_tls_backend_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetDefault" cname="g_tls_backend_get_default" shared="true">
        <return-type type="GTlsBackend*"/>
      </method>
      <virtual_method name="GetDefaultDatabase" cname="get_default_database">
        <return-type type="GTlsDatabase*" owned="true"/>
      </virtual_method>
      <virtual_method name="SupportsTls" cname="supports_tls">
        <return-type type="gboolean"/>
      </virtual_method>
      <method name="GetCertificateType" cname="g_tls_backend_get_certificate_type">
        <return-type type="GType"/>
      </method>
      <method name="GetClientConnectionType" cname="g_tls_backend_get_client_connection_type">
        <return-type type="GType"/>
      </method>
      <method name="GetDefaultDatabase" cname="g_tls_backend_get_default_database">
        <return-type type="GTlsDatabase*" owned="true"/>
      </method>
      <method name="GetFileDatabaseType" cname="g_tls_backend_get_file_database_type">
        <return-type type="GType"/>
      </method>
      <method name="GetServerConnectionType" cname="g_tls_backend_get_server_connection_type">
        <return-type type="GType"/>
      </method>
      <method name="SupportsTls" cname="g_tls_backend_supports_tls">
        <return-type type="gboolean"/>
      </method>
    </interface>
    <interface name="TlsClientConnection" cname="GTlsClientConnection" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GTlsClientConnectionInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_tls_client_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="New" cname="g_tls_client_connection_new" shared="true">
        <return-type type="GTlsClientConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="base_io_stream" type="GIOStream*"/>
          <parameter allow-none="1" name="server_identity" type="GSocketConnectable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetAcceptedCas" cname="g_tls_client_connection_get_accepted_cas">
        <return-type type="GList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetServerIdentity" cname="g_tls_client_connection_get_server_identity">
        <return-type type="GSocketConnectable*"/>
      </method>
      <method name="GetUseSsl3" cname="g_tls_client_connection_get_use_ssl3">
        <return-type type="gboolean"/>
      </method>
      <method name="GetValidationFlags" cname="g_tls_client_connection_get_validation_flags">
        <return-type type="GTlsCertificateFlags"/>
      </method>
      <method name="SetServerIdentity" cname="g_tls_client_connection_set_server_identity">
        <return-type type="void"/>
        <parameters>
          <parameter name="identity" type="GSocketConnectable*"/>
        </parameters>
      </method>
      <method name="SetUseSsl3" cname="g_tls_client_connection_set_use_ssl3">
        <return-type type="void"/>
        <parameters>
          <parameter name="use_ssl3" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetValidationFlags" cname="g_tls_client_connection_set_validation_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GTlsCertificateFlags"/>
        </parameters>
      </method>
      <property name="AcceptedCas" cname="accepted-cas" type="gpointer" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="ServerIdentity" cname="server-identity" type="GSocketConnectable*" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="UseSsl3" cname="use-ssl3" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="ValidationFlags" cname="validation-flags" type="GTlsCertificateFlags" readable="true" writeable="true" construct="true" construct-only="false"/>
    </interface>
    <interface name="TlsFileDatabase" cname="GTlsFileDatabase" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GTlsFileDatabaseInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_tls_file_database_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="New" cname="g_tls_file_database_new" shared="true">
        <return-type type="GTlsFileDatabase*" owned="true"/>
        <parameters throws="1">
          <parameter name="anchors" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <property name="Anchors" cname="anchors" type="gchar*" readable="true" writeable="true" construct="true" construct-only="false"/>
    </interface>
    <interface name="TlsServerConnection" cname="GTlsServerConnection" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GTlsServerConnectionInterface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_tls_server_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="New" cname="g_tls_server_connection_new" shared="true">
        <return-type type="GTlsServerConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="base_io_stream" type="GIOStream*"/>
          <parameter allow-none="1" name="certificate" type="GTlsCertificate*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <property name="AuthenticationMode" cname="authentication-mode" type="GTlsAuthenticationMode" readable="true" writeable="true" construct="false" construct-only="false"/>
    </interface>
    <interface name="Volume" cname="GVolume" abstract="false" opaque="false" hidden="false">
      <class_struct cname="GVolumeIface">
        <field cname="g_iface" access="public" writeable="false" readable="true" name="GIface" type="GTypeInterface">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="changed"/>
        <method signal_vm="removed"/>
        <method vm="get_name"/>
        <method vm="get_icon"/>
        <method vm="get_uuid"/>
        <method vm="get_drive"/>
        <method vm="get_mount"/>
        <method vm="can_mount"/>
        <method vm="can_eject"/>
        <method vm="mount_fn"/>
        <method vm="mount_finish"/>
        <method vm="eject"/>
        <method vm="eject_finish"/>
        <method vm="get_identifier"/>
        <method vm="enumerate_identifiers"/>
        <method vm="should_automount"/>
        <method vm="get_activation_root"/>
        <method vm="eject_with_operation"/>
        <method vm="eject_with_operation_finish"/>
        <method vm="get_sort_key"/>
        <method vm="get_symbolic_icon"/>
      </class_struct>
      <method name="GetType" cname="g_volume_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanMount" cname="can_mount">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="Eject" cname="eject" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperation" cname="eject_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperationFinish" cname="eject_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateIdentifiers" cname="enumerate_identifiers">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </virtual_method>
      <virtual_method name="GetActivationRoot" cname="get_activation_root">
        <return-type type="GFile*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetDrive" cname="get_drive">
        <return-type type="GDrive*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetIdentifier" cname="get_identifier">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="kind" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetMount" cname="get_mount">
        <return-type type="GMount*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetSortKey" cname="get_sort_key">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetSymbolicIcon" cname="get_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </virtual_method>
      <virtual_method name="GetUuid" cname="get_uuid">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="MountFinish" cname="mount_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="MountFn" cname="mount_fn">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ShouldAutomount" cname="should_automount">
        <return-type type="gboolean"/>
      </virtual_method>
      <method name="CanEject" cname="g_volume_can_eject">
        <return-type type="gboolean"/>
      </method>
      <method name="CanMount" cname="g_volume_can_mount">
        <return-type type="gboolean"/>
      </method>
      <method name="Eject" cname="g_volume_eject" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_volume_eject_finish" deprecated="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EjectWithOperation" cname="g_volume_eject_with_operation">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountUnmountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="EjectWithOperationFinish" cname="g_volume_eject_with_operation_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EnumerateIdentifiers" cname="g_volume_enumerate_identifiers">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="GetActivationRoot" cname="g_volume_get_activation_root">
        <return-type type="GFile*" owned="true"/>
      </method>
      <method name="GetDrive" cname="g_volume_get_drive">
        <return-type type="GDrive*" owned="true"/>
      </method>
      <method name="GetIcon" cname="g_volume_get_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GetIdentifier" cname="g_volume_get_identifier">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="kind" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetMount" cname="g_volume_get_mount">
        <return-type type="GMount*" owned="true"/>
      </method>
      <method name="GetName" cname="g_volume_get_name">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetSortKey" cname="g_volume_get_sort_key">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetSymbolicIcon" cname="g_volume_get_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GetUuid" cname="g_volume_get_uuid">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="Mount" cname="g_volume_mount">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GMountMountFlags"/>
          <parameter allow-none="1" name="mount_operation" type="GMountOperation*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="MountFinish" cname="g_volume_mount_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ShouldAutomount" cname="g_volume_should_automount">
        <return-type type="gboolean"/>
      </method>
      <signal name="Changed" cname="changed" when="last" field_name="changed">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="Removed" cname="removed" when="last" field_name="removed">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </interface>
    <object name="AppLaunchContext" cname="GAppLaunchContext" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GAppLaunchContextClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_display"/>
        <method vm="get_startup_notify_id"/>
        <method vm="launch_failed"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_app_launch_context_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_app_launch_context_new" disable_void_ctor=""/>
      <virtual_method name="GetDisplay" cname="get_display">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="info" type="GAppInfo*"/>
          <parameter name="files" type="GList*" element_type="GFile*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetStartupNotifyId" cname="get_startup_notify_id">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="info" type="GAppInfo*"/>
          <parameter name="files" type="GList*" element_type="GFile*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LaunchFailed" cname="launch_failed">
        <return-type type="void"/>
        <parameters>
          <parameter name="startup_notify_id" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <method name="GetDisplay" cname="g_app_launch_context_get_display">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="info" type="GAppInfo*"/>
          <parameter name="files" type="GList*" element_type="GFile*"/>
        </parameters>
      </method>
      <method name="GetEnvironment" cname="g_app_launch_context_get_environment">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="GetStartupNotifyId" cname="g_app_launch_context_get_startup_notify_id">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="info" type="GAppInfo*"/>
          <parameter name="files" type="GList*" element_type="GFile*"/>
        </parameters>
      </method>
      <method name="LaunchFailed" cname="g_app_launch_context_launch_failed">
        <return-type type="void"/>
        <parameters>
          <parameter name="startup_notify_id" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Setenv" cname="g_app_launch_context_setenv">
        <return-type type="void"/>
        <parameters>
          <parameter name="variable" type="const-gchar*"/>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Unsetenv" cname="g_app_launch_context_unsetenv">
        <return-type type="void"/>
        <parameters>
          <parameter name="variable" type="const-gchar*"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GAppLaunchContextPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Application" cname="GApplication" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GActionGroup"/>
        <interface cname="GActionMap"/>
      </implements>
      <class_struct cname="GApplicationClass">
        <field cname="parent_class" access="private" writeable="false" readable="false" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="startup"/>
        <method signal_vm="activate"/>
        <method signal_vm="open"/>
        <method signal_vm="command_line"/>
        <method vm="local_command_line"/>
        <method vm="before_emit"/>
        <method vm="after_emit"/>
        <method vm="add_platform_data"/>
        <method vm="quit_mainloop"/>
        <method vm="run_mainloop"/>
        <method signal_vm="shutdown"/>
        <method vm="dbus_register"/>
        <method vm="dbus_unregister"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="9"/>
      </class_struct>
      <method name="GetType" cname="g_application_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_application_new">
        <parameters>
          <parameter name="application_id" type="const-gchar*"/>
          <parameter name="flags" type="GApplicationFlags"/>
        </parameters>
      </constructor>
      <method name="GetDefault" cname="g_application_get_default" shared="true">
        <return-type type="GApplication*"/>
      </method>
      <method name="IdIsValid" cname="g_application_id_is_valid" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="application_id" type="const-gchar*"/>
        </parameters>
      </method>
      <virtual_method name="AddPlatformData" cname="add_platform_data">
        <return-type type="void"/>
        <parameters>
          <parameter name="builder" type="GVariantBuilder*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="AfterEmit" cname="after_emit">
        <return-type type="void"/>
        <parameters>
          <parameter name="platform_data" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="BeforeEmit" cname="before_emit">
        <return-type type="void"/>
        <parameters>
          <parameter name="platform_data" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="DbusRegister" cname="dbus_register">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="DbusUnregister" cname="dbus_unregister">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LocalCommandLine" cname="local_command_line">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="arguments" type="const-gchar*"/>
          <parameter name="exit_status" type="gint"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QuitMainloop" cname="quit_mainloop">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="RunMainloop" cname="run_mainloop">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetApplicationId" cname="g_application_get_application_id">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetDbusConnection" cname="g_application_get_dbus_connection">
        <return-type type="GDBusConnection*"/>
      </method>
      <method name="GetDbusObjectPath" cname="g_application_get_dbus_object_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFlags" cname="g_application_get_flags">
        <return-type type="GApplicationFlags"/>
      </method>
      <method name="GetInactivityTimeout" cname="g_application_get_inactivity_timeout">
        <return-type type="guint"/>
      </method>
      <method name="GetIsRegistered" cname="g_application_get_is_registered">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsRemote" cname="g_application_get_is_remote">
        <return-type type="gboolean"/>
      </method>
      <method name="Hold" cname="g_application_hold">
        <return-type type="void"/>
      </method>
      <method name="Quit" cname="g_application_quit">
        <return-type type="void"/>
      </method>
      <method name="Register" cname="g_application_register">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Release" cname="g_application_release">
        <return-type type="void"/>
      </method>
      <method name="Run" cname="g_application_run">
        <return-type type="gint"/>
        <parameters>
          <parameter name="argc" type="gint"/>
          <parameter allow-none="1" name="argv" type="char**" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="SetActionGroup" cname="g_application_set_action_group" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="action_group" type="GActionGroup*"/>
        </parameters>
      </method>
      <method name="SetApplicationId" cname="g_application_set_application_id">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="application_id" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetDefault" cname="g_application_set_default">
        <return-type type="void"/>
      </method>
      <method name="SetFlags" cname="g_application_set_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GApplicationFlags"/>
        </parameters>
      </method>
      <method name="SetInactivityTimeout" cname="g_application_set_inactivity_timeout">
        <return-type type="void"/>
        <parameters>
          <parameter name="inactivity_timeout" type="guint"/>
        </parameters>
      </method>
      <property name="ActionGroup" cname="action-group" type="GActionGroup*" readable="false" writeable="true" construct="false" construct-only="false"/>
      <property name="ApplicationId" cname="application-id" type="gchar*" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Flags" cname="flags" type="GApplicationFlags" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="InactivityTimeout" cname="inactivity-timeout" type="guint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="IsRegistered" cname="is-registered" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsRemote" cname="is-remote" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GApplicationPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Activate" cname="activate" when="last" field_name="activate">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="CommandLine" cname="command-line" when="last" field_name="command_line">
        <return-type type="gint"/>
        <parameters>
          <parameter name="command_line" type="GApplicationCommandLine*"/>
        </parameters>
      </signal>
      <signal name="Open" cname="open" when="last" field_name="open">
        <return-type type="void"/>
        <parameters>
          <parameter name="files" type="" array="true" array_length_param_index="1"/>
          <parameter name="n_files" type="gint"/>
          <parameter name="hint" type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="Shutdown" cname="shutdown" when="last" field_name="shutdown">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="Startup" cname="startup" when="first" field_name="startup">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </object>
    <object name="ApplicationCommandLine" cname="GApplicationCommandLine" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GApplicationCommandLineClass">
        <field cname="parent_class" access="private" writeable="false" readable="false" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="print_literal"/>
        <method vm="printerr_literal"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="12"/>
      </class_struct>
      <method name="GetType" cname="g_application_command_line_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="PrintLiteral" cname="print_literal">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="PrinterrLiteral" cname="printerr_literal">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <method name="GetArguments" cname="g_application_command_line_get_arguments">
        <return-type type="gchar***" owned="true" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter allow-none="1" name="argc" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="GetCwd" cname="g_application_command_line_get_cwd">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetEnviron" cname="g_application_command_line_get_environ">
        <return-type type="const-gchar**" array="true" null_term_array="true"/>
      </method>
      <method name="GetExitStatus" cname="g_application_command_line_get_exit_status">
        <return-type type="gint"/>
      </method>
      <method name="GetIsRemote" cname="g_application_command_line_get_is_remote">
        <return-type type="gboolean"/>
      </method>
      <method name="GetPlatformData" cname="g_application_command_line_get_platform_data">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Getenv" cname="g_application_command_line_getenv">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetExitStatus" cname="g_application_command_line_set_exit_status">
        <return-type type="void"/>
        <parameters>
          <parameter name="exit_status" type="gint"/>
        </parameters>
      </method>
      <property name="Arguments" cname="arguments" type="GVariant*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="IsRemote" cname="is-remote" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="PlatformData" cname="platform-data" type="GVariant*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GApplicationCommandLinePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="BufferedInputStream" cname="GBufferedInputStream" abstract="false" opaque="false" hidden="false" parent="GFilterInputStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GBufferedInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GFilterInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="fill"/>
        <method vm="fill_async"/>
        <method vm="fill_finish"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_buffered_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_buffered_input_stream_new">
        <parameters>
          <parameter name="base_stream" type="GInputStream*"/>
        </parameters>
      </constructor>
      <constructor cname="g_buffered_input_stream_new_sized">
        <parameters>
          <parameter name="base_stream" type="GInputStream*"/>
          <parameter name="size" type="gsize"/>
        </parameters>
      </constructor>
      <virtual_method name="Fill" cname="fill">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="count" type="gssize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FillAsync" cname="fill_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="count" type="gssize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FillFinish" cname="fill_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="Fill" cname="g_buffered_input_stream_fill">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="count" type="gssize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="FillAsync" cname="g_buffered_input_stream_fill_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="count" type="gssize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="FillFinish" cname="g_buffered_input_stream_fill_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetAvailable" cname="g_buffered_input_stream_get_available">
        <return-type type="gsize"/>
      </method>
      <method name="GetBufferSize" cname="g_buffered_input_stream_get_buffer_size">
        <return-type type="gsize"/>
      </method>
      <method name="Peek" cname="g_buffered_input_stream_peek">
        <return-type type="gsize"/>
        <parameters>
          <parameter name="buffer" type="void*" array="true" array_length_param_index="2"/>
          <parameter name="offset" type="gsize"/>
          <parameter name="count" type="gsize"/>
        </parameters>
      </method>
      <method name="PeekBuffer" cname="g_buffered_input_stream_peek_buffer">
        <return-type type="void*" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter name="count" type="gsize*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="ReadByte" cname="g_buffered_input_stream_read_byte">
        <return-type type="gint"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetBufferSize" cname="g_buffered_input_stream_set_buffer_size">
        <return-type type="void"/>
        <parameters>
          <parameter name="size" type="gsize"/>
        </parameters>
      </method>
      <property name="BufferSize" cname="buffer-size" type="guint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GFilterInputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GBufferedInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="BufferedOutputStream" cname="GBufferedOutputStream" abstract="false" opaque="false" hidden="false" parent="GFilterOutputStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GBufferedOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GFilterOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_buffered_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_buffered_output_stream_new">
        <parameters>
          <parameter name="base_stream" type="GOutputStream*"/>
        </parameters>
      </constructor>
      <constructor cname="g_buffered_output_stream_new_sized">
        <parameters>
          <parameter name="base_stream" type="GOutputStream*"/>
          <parameter name="size" type="gsize"/>
        </parameters>
      </constructor>
      <method name="GetAutoGrow" cname="g_buffered_output_stream_get_auto_grow">
        <return-type type="gboolean"/>
      </method>
      <method name="GetBufferSize" cname="g_buffered_output_stream_get_buffer_size">
        <return-type type="gsize"/>
      </method>
      <method name="SetAutoGrow" cname="g_buffered_output_stream_set_auto_grow">
        <return-type type="void"/>
        <parameters>
          <parameter name="auto_grow" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetBufferSize" cname="g_buffered_output_stream_set_buffer_size">
        <return-type type="void"/>
        <parameters>
          <parameter name="size" type="gsize"/>
        </parameters>
      </method>
      <property name="AutoGrow" cname="auto-grow" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="BufferSize" cname="buffer-size" type="guint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GFilterOutputStream*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GBufferedOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Cancellable" cname="GCancellable" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GCancellableClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="cancelled"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_cancellable_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_cancellable_new" disable_void_ctor=""/>
      <method name="GetCurrent" cname="g_cancellable_get_current" shared="true">
        <return-type type="GCancellable*"/>
      </method>
      <method name="Cancel" cname="g_cancellable_cancel">
        <return-type type="void"/>
      </method>
      <method name="Connect" cname="g_cancellable_connect">
        <return-type type="gulong"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="callback" type="GCallback"/>
          <parameter name="data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="data_destroy_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="Disconnect" cname="g_cancellable_disconnect">
        <return-type type="void"/>
        <parameters>
          <parameter name="handler_id" type="gulong"/>
        </parameters>
      </method>
      <method name="GetFd" cname="g_cancellable_get_fd">
        <return-type type="gint"/>
      </method>
      <method name="IsCancelled" cname="g_cancellable_is_cancelled">
        <return-type type="gboolean"/>
      </method>
      <method name="MakePollfd" cname="g_cancellable_make_pollfd">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="pollfd" type="GPollFD*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="PopCurrent" cname="g_cancellable_pop_current">
        <return-type type="void"/>
      </method>
      <method name="PushCurrent" cname="g_cancellable_push_current">
        <return-type type="void"/>
      </method>
      <method name="ReleaseFd" cname="g_cancellable_release_fd">
        <return-type type="void"/>
      </method>
      <method name="Reset" cname="g_cancellable_reset">
        <return-type type="void"/>
      </method>
      <method name="SetErrorIfCancelled" cname="g_cancellable_set_error_if_cancelled">
        <return-type type="gboolean"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GCancellablePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Cancelled" cname="cancelled" when="last" field_name="cancelled">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </object>
    <object name="CharsetConverter" cname="GCharsetConverter" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GConverter"/>
        <interface cname="GInitable"/>
      </implements>
      <class_struct cname="GCharsetConverterClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_charset_converter_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_charset_converter_new">
        <parameters>
          <parameter name="to_charset" type="const-gchar*"/>
          <parameter name="from_charset" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="GetNumFallbacks" cname="g_charset_converter_get_num_fallbacks">
        <return-type type="guint"/>
      </method>
      <method name="GetUseFallback" cname="g_charset_converter_get_use_fallback">
        <return-type type="gboolean"/>
      </method>
      <method name="SetUseFallback" cname="g_charset_converter_set_use_fallback">
        <return-type type="void"/>
        <parameters>
          <parameter name="use_fallback" type="gboolean"/>
        </parameters>
      </method>
      <property name="FromCharset" cname="from-charset" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="ToCharset" cname="to-charset" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="UseFallback" cname="use-fallback" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
    </object>
    <object name="ConverterInputStream" cname="GConverterInputStream" abstract="false" opaque="false" hidden="false" parent="GFilterInputStream">
      <implements>
        <interface cname="GPollableInputStream"/>
      </implements>
      <class_struct cname="GConverterInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GFilterInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_converter_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_converter_input_stream_new">
        <parameters>
          <parameter name="base_stream" type="GInputStream*"/>
          <parameter name="converter" type="GConverter*"/>
        </parameters>
      </constructor>
      <method name="GetConverter" cname="g_converter_input_stream_get_converter">
        <return-type type="GConverter*"/>
      </method>
      <property name="Converter" cname="converter" type="GConverter*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GFilterInputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GConverterInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="ConverterOutputStream" cname="GConverterOutputStream" abstract="false" opaque="false" hidden="false" parent="GFilterOutputStream">
      <implements>
        <interface cname="GPollableOutputStream"/>
      </implements>
      <class_struct cname="GConverterOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GFilterOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_converter_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_converter_output_stream_new">
        <parameters>
          <parameter name="base_stream" type="GOutputStream*"/>
          <parameter name="converter" type="GConverter*"/>
        </parameters>
      </constructor>
      <method name="GetConverter" cname="g_converter_output_stream_get_converter">
        <return-type type="GConverter*"/>
      </method>
      <property name="Converter" cname="converter" type="GConverter*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GFilterOutputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GConverterOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Credentials" cname="GCredentials" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GCredentialsClass"/>
      <method name="GetType" cname="g_credentials_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_credentials_new" disable_void_ctor=""/>
      <method name="GetUnixUser" cname="g_credentials_get_unix_user">
        <return-type type="guint"/>
      </method>
      <method name="IsSameUser" cname="g_credentials_is_same_user">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="other_credentials" type="GCredentials*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetNative" cname="g_credentials_set_native">
        <return-type type="void"/>
        <parameters>
          <parameter name="native_type" type="GCredentialsType"/>
          <parameter name="native" type="gpointer"/>
        </parameters>
      </method>
      <method name="SetUnixUser" cname="g_credentials_set_unix_user">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="uid" type="guint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ToString" cname="g_credentials_to_string">
        <return-type type="gchar*" owned="true"/>
      </method>
    </object>
    <object name="DBusActionGroup" cname="GDBusActionGroup" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GActionGroup"/>
        <interface cname="GRemoteActionGroup"/>
      </implements>
      <method name="GetType" cname="g_dbus_action_group_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Get" cname="g_dbus_action_group_get" shared="true">
        <return-type type="GDBusActionGroup*" owned="true"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </method>
    </object>
    <object name="DBusAuthObserver" cname="GDBusAuthObserver" abstract="false" opaque="false" hidden="false" parent="GObject">
      <method name="GetType" cname="g_dbus_auth_observer_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_auth_observer_new" disable_void_ctor=""/>
      <signal name="AllowMechanism" cname="allow-mechanism" when="last">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mechanism" type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="AuthorizeAuthenticatedPeer" cname="authorize-authenticated-peer" when="last">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="stream" type="GIOStream*"/>
          <parameter allow-none="1" name="credentials" type="GCredentials*"/>
        </parameters>
      </signal>
    </object>
    <object name="DBusConnection" cname="GDBusConnection" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GAsyncInitable"/>
        <interface cname="GInitable"/>
      </implements>
      <method name="GetType" cname="g_dbus_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_connection_new_finish">
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_for_address_finish">
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_for_address_sync">
        <parameters>
          <parameter name="address" type="const-gchar*"/>
          <parameter name="flags" type="GDBusConnectionFlags"/>
          <parameter name="observer" type="GDBusAuthObserver*"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_sync">
        <parameters>
          <parameter name="stream" type="GIOStream*"/>
          <parameter name="guid" type="const-gchar*"/>
          <parameter name="flags" type="GDBusConnectionFlags"/>
          <parameter name="observer" type="GDBusAuthObserver*"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <method name="New" cname="g_dbus_connection_new" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream" type="GIOStream*"/>
          <parameter allow-none="1" name="guid" type="const-gchar*"/>
          <parameter name="flags" type="GDBusConnectionFlags"/>
          <parameter allow-none="1" name="observer" type="GDBusAuthObserver*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="NewForAddress" cname="g_dbus_connection_new_for_address" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="address" type="const-gchar*"/>
          <parameter name="flags" type="GDBusConnectionFlags"/>
          <parameter allow-none="1" name="observer" type="GDBusAuthObserver*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AddFilter" cname="g_dbus_connection_add_filter">
        <return-type type="guint"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="filter_function" type="GDBusMessageFilterFunction"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" name="user_data_free_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="Call" cname="g_dbus_connection_call">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="reply_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="10" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CallFinish" cname="g_dbus_connection_call_finish">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CallSync" cname="g_dbus_connection_call_sync">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="reply_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CallWithUnixFdList" cname="g_dbus_connection_call_with_unix_fd_list">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="reply_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="fd_list" type="GUnixFDList*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="11" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CallWithUnixFdListFinish" cname="g_dbus_connection_call_with_unix_fd_list_finish">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="out_fd_list" type="GUnixFDList*" owned="true" pass_as="out"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CallWithUnixFdListSync" cname="g_dbus_connection_call_with_unix_fd_list_sync">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="reply_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="fd_list" type="GUnixFDList*"/>
          <parameter allow-none="1" name="out_fd_list" type="GUnixFDList*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Close" cname="g_dbus_connection_close">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_dbus_connection_close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CloseSync" cname="g_dbus_connection_close_sync">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="EmitSignal" cname="g_dbus_connection_emit_signal">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="destination_bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="signal_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ExportActionGroup" cname="g_dbus_connection_export_action_group">
        <return-type type="guint"/>
        <parameters throws="1">
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="action_group" type="GActionGroup*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ExportMenuModel" cname="g_dbus_connection_export_menu_model">
        <return-type type="guint"/>
        <parameters throws="1">
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="menu" type="GMenuModel*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Flush" cname="g_dbus_connection_flush">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="FlushFinish" cname="g_dbus_connection_flush_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="FlushSync" cname="g_dbus_connection_flush_sync">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetCapabilities" cname="g_dbus_connection_get_capabilities">
        <return-type type="GDBusCapabilityFlags"/>
      </method>
      <method name="GetExitOnClose" cname="g_dbus_connection_get_exit_on_close">
        <return-type type="gboolean"/>
      </method>
      <method name="GetGuid" cname="g_dbus_connection_get_guid">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetLastSerial" cname="g_dbus_connection_get_last_serial">
        <return-type type="guint32"/>
      </method>
      <method name="GetPeerCredentials" cname="g_dbus_connection_get_peer_credentials">
        <return-type type="GCredentials*"/>
      </method>
      <method name="GetStream" cname="g_dbus_connection_get_stream">
        <return-type type="GIOStream*"/>
      </method>
      <method name="GetUniqueName" cname="g_dbus_connection_get_unique_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="IsClosed" cname="g_dbus_connection_is_closed">
        <return-type type="gboolean"/>
      </method>
      <method name="RegisterObject" cname="g_dbus_connection_register_object">
        <return-type type="guint"/>
        <parameters throws="1">
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_info" type="GDBusInterfaceInfo*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="vtable" type="GDBusInterfaceVTable*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
          <parameter scope="async" name="user_data_free_func" type="GDestroyNotify"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="RegisterSubtree" cname="g_dbus_connection_register_subtree">
        <return-type type="guint"/>
        <parameters throws="1">
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="vtable" type="GDBusSubtreeVTable*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusSubtreeFlags"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" name="user_data_free_func" type="GDestroyNotify"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="RemoveFilter" cname="g_dbus_connection_remove_filter">
        <return-type type="void"/>
        <parameters>
          <parameter name="filter_id" type="guint"/>
        </parameters>
      </method>
      <method name="SendMessage" cname="g_dbus_connection_send_message">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="message" type="GDBusMessage*"/>
          <parameter name="flags" type="GDBusSendMessageFlags"/>
          <parameter allow-none="1" name="out_serial" type="guint32*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendMessageWithReply" cname="g_dbus_connection_send_message_with_reply">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="GDBusMessage*"/>
          <parameter name="flags" type="GDBusSendMessageFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="out_serial" type="guint32*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="SendMessageWithReplyFinish" cname="g_dbus_connection_send_message_with_reply_finish">
        <return-type type="GDBusMessage*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendMessageWithReplySync" cname="g_dbus_connection_send_message_with_reply_sync">
        <return-type type="GDBusMessage*" owned="true"/>
        <parameters throws="1">
          <parameter name="message" type="GDBusMessage*"/>
          <parameter name="flags" type="GDBusSendMessageFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="out_serial" type="guint32*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetExitOnClose" cname="g_dbus_connection_set_exit_on_close">
        <return-type type="void"/>
        <parameters>
          <parameter name="exit_on_close" type="gboolean"/>
        </parameters>
      </method>
      <method name="SignalSubscribe" cname="g_dbus_connection_signal_subscribe">
        <return-type type="guint"/>
        <parameters>
          <parameter allow-none="1" name="sender" type="const-gchar*"/>
          <parameter allow-none="1" name="interface_name" type="const-gchar*"/>
          <parameter allow-none="1" name="member" type="const-gchar*"/>
          <parameter allow-none="1" name="object_path" type="const-gchar*"/>
          <parameter allow-none="1" name="arg0" type="const-gchar*"/>
          <parameter name="flags" type="GDBusSignalFlags"/>
          <parameter closure="7" destroy="8" scope="notified" name="callback" type="GDBusSignalCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="user_data_free_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="SignalUnsubscribe" cname="g_dbus_connection_signal_unsubscribe">
        <return-type type="void"/>
        <parameters>
          <parameter name="subscription_id" type="guint"/>
        </parameters>
      </method>
      <method name="StartMessageProcessing" cname="g_dbus_connection_start_message_processing">
        <return-type type="void"/>
      </method>
      <method name="UnexportActionGroup" cname="g_dbus_connection_unexport_action_group">
        <return-type type="void"/>
        <parameters>
          <parameter name="export_id" type="guint"/>
        </parameters>
      </method>
      <method name="UnexportMenuModel" cname="g_dbus_connection_unexport_menu_model">
        <return-type type="void"/>
        <parameters>
          <parameter name="export_id" type="guint"/>
        </parameters>
      </method>
      <method name="UnregisterObject" cname="g_dbus_connection_unregister_object">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="registration_id" type="guint"/>
        </parameters>
      </method>
      <method name="UnregisterSubtree" cname="g_dbus_connection_unregister_subtree">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="registration_id" type="guint"/>
        </parameters>
      </method>
      <property name="Address" cname="address" type="gchar*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="AuthenticationObserver" cname="authentication-observer" type="GDBusAuthObserver*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="Capabilities" cname="capabilities" type="GDBusCapabilityFlags" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Closed" cname="closed" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="ExitOnClose" cname="exit-on-close" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Flags" cname="flags" type="GDBusConnectionFlags" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="Guid" cname="guid" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Stream" cname="stream" type="GIOStream*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="UniqueName" cname="unique-name" type="gchar*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <signal name="Closed" cname="closed" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="remote_peer_vanished" type="gboolean"/>
          <parameter allow-none="1" name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
    </object>
    <object name="DBusInterfaceSkeleton" cname="GDBusInterfaceSkeleton" abstract="true" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GDBusInterface"/>
      </implements>
      <class_struct cname="GDBusInterfaceSkeletonClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_info"/>
        <method vm="get_vtable"/>
        <method vm="get_properties"/>
        <method vm="flush"/>
        <field cname="vfunc_padding" access="private" writeable="false" readable="false" name="VfuncPadding" type="gpointer" array="true" array_len="8"/>
        <method signal_vm="g_authorize_method"/>
        <field cname="signal_padding" access="private" writeable="false" readable="false" name="SignalPadding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_interface_skeleton_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Flush" cname="flush">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="GetInfo" cname="get_info">
        <return-type type="GDBusInterfaceInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <virtual_method name="GetProperties" cname="get_properties">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <virtual_method name="GetVtable" cname="get_vtable" hidden="true">
        <return-type type="GDBusInterfaceVTable*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </virtual_method>
      <method name="Export" cname="g_dbus_interface_skeleton_export">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Flush" cname="g_dbus_interface_skeleton_flush">
        <return-type type="void"/>
      </method>
      <method name="GetConnection" cname="g_dbus_interface_skeleton_get_connection">
        <return-type type="GDBusConnection*"/>
      </method>
      <method name="GetConnections" cname="g_dbus_interface_skeleton_get_connections">
        <return-type type="GList*" element_type="GDBusConnection*" elements_owned="true" owned="true"/>
      </method>
      <method name="GetFlags" cname="g_dbus_interface_skeleton_get_flags">
        <return-type type="GDBusInterfaceSkeletonFlags"/>
      </method>
      <method name="GetInfo" cname="g_dbus_interface_skeleton_get_info">
        <return-type type="GDBusInterfaceInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetObjectPath" cname="g_dbus_interface_skeleton_get_object_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetProperties" cname="g_dbus_interface_skeleton_get_properties">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="HasConnection" cname="g_dbus_interface_skeleton_has_connection">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
        </parameters>
      </method>
      <method name="SetFlags" cname="g_dbus_interface_skeleton_set_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GDBusInterfaceSkeletonFlags"/>
        </parameters>
      </method>
      <method name="Unexport" cname="g_dbus_interface_skeleton_unexport">
        <return-type type="void"/>
      </method>
      <method name="UnexportFromConnection" cname="g_dbus_interface_skeleton_unexport_from_connection">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
        </parameters>
      </method>
      <property name="GFlags" cname="g-flags" type="GDBusInterfaceSkeletonFlags" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDBusInterfaceSkeletonPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="GAuthorizeMethod" cname="g-authorize-method" when="last" field_name="g_authorize_method">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="invocation" type="GDBusMethodInvocation*"/>
        </parameters>
      </signal>
    </object>
    <object name="DBusMenuModel" cname="GDBusMenuModel" abstract="false" opaque="false" hidden="false" parent="GMenuModel">
      <method name="GetType" cname="g_dbus_menu_model_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Get" cname="g_dbus_menu_model_get" shared="true">
        <return-type type="GDBusMenuModel*" owned="true"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="bus_name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </method>
    </object>
    <object name="DBusMessage" cname="GDBusMessage" abstract="false" opaque="false" hidden="false" parent="GObject">
      <method name="GetType" cname="g_dbus_message_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_message_new" disable_void_ctor=""/>
      <constructor cname="g_dbus_message_new_from_blob">
        <parameters>
          <parameter name="blob" type="guchar*" array="true" array_length_param_index="1"/>
          <parameter name="blob_len" type="gsize"/>
          <parameter name="capabilities" type="GDBusCapabilityFlags"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_method_call">
        <parameters>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="path" type="const-gchar*"/>
          <parameter name="interface_" type="const-gchar*"/>
          <parameter name="method" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_signal">
        <parameters>
          <parameter name="path" type="const-gchar*"/>
          <parameter name="interface_" type="const-gchar*"/>
          <parameter name="signal" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="BytesNeeded" cname="g_dbus_message_bytes_needed" shared="true">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="blob" type="guchar*" array="true" array_length_param_index="1"/>
          <parameter name="blob_len" type="gsize"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Copy" cname="g_dbus_message_copy">
        <return-type type="GDBusMessage*" owned="true"/>
      </method>
      <method name="GetArg0" cname="g_dbus_message_get_arg0">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetBody" cname="g_dbus_message_get_body">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetByteOrder" cname="g_dbus_message_get_byte_order">
        <return-type type="GDBusMessageByteOrder"/>
      </method>
      <method name="GetDestination" cname="g_dbus_message_get_destination">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetErrorName" cname="g_dbus_message_get_error_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFlags" cname="g_dbus_message_get_flags">
        <return-type type="GDBusMessageFlags"/>
      </method>
      <method name="GetHeader" cname="g_dbus_message_get_header">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="header_field" type="GDBusMessageHeaderField"/>
        </parameters>
      </method>
      <method name="GetHeaderFields" cname="g_dbus_message_get_header_fields">
        <return-type type="guchar*" array="true" null_term_array="true"/>
      </method>
      <method name="GetInterface" cname="g_dbus_message_get_interface">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetLocked" cname="g_dbus_message_get_locked">
        <return-type type="gboolean"/>
      </method>
      <method name="GetMember" cname="g_dbus_message_get_member">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetMessageType" cname="g_dbus_message_get_message_type">
        <return-type type="GDBusMessageType"/>
      </method>
      <method name="GetNumUnixFds" cname="g_dbus_message_get_num_unix_fds">
        <return-type type="guint32"/>
      </method>
      <method name="GetPath" cname="g_dbus_message_get_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetReplySerial" cname="g_dbus_message_get_reply_serial">
        <return-type type="guint32"/>
      </method>
      <method name="GetSender" cname="g_dbus_message_get_sender">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetSerial" cname="g_dbus_message_get_serial">
        <return-type type="guint32"/>
      </method>
      <method name="GetSignature" cname="g_dbus_message_get_signature">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetUnixFdList" cname="g_dbus_message_get_unix_fd_list">
        <return-type type="GUnixFDList*"/>
      </method>
      <method name="Lock" cname="g_dbus_message_lock">
        <return-type type="void"/>
      </method>
      <method name="NewMethodErrorLiteral" cname="g_dbus_message_new_method_error_literal">
        <return-type type="GDBusMessage*" owned="true"/>
        <parameters>
          <parameter name="error_name" type="const-gchar*"/>
          <parameter name="error_message" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="NewMethodReply" cname="g_dbus_message_new_method_reply">
        <return-type type="GDBusMessage*" owned="true"/>
      </method>
      <method name="Print" cname="g_dbus_message_print">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="indent" type="guint"/>
        </parameters>
      </method>
      <method name="SetBody" cname="g_dbus_message_set_body">
        <return-type type="void"/>
        <parameters>
          <parameter name="body" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_dbus_message_set_byte_order">
        <return-type type="void"/>
        <parameters>
          <parameter name="byte_order" type="GDBusMessageByteOrder"/>
        </parameters>
      </method>
      <method name="SetDestination" cname="g_dbus_message_set_destination">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetErrorName" cname="g_dbus_message_set_error_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetFlags" cname="g_dbus_message_set_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GDBusMessageFlags"/>
        </parameters>
      </method>
      <method name="SetHeader" cname="g_dbus_message_set_header">
        <return-type type="void"/>
        <parameters>
          <parameter name="header_field" type="GDBusMessageHeaderField"/>
          <parameter allow-none="1" name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetInterface" cname="g_dbus_message_set_interface">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetMember" cname="g_dbus_message_set_member">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetMessageType" cname="g_dbus_message_set_message_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="type" type="GDBusMessageType"/>
        </parameters>
      </method>
      <method name="SetNumUnixFds" cname="g_dbus_message_set_num_unix_fds">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="guint32"/>
        </parameters>
      </method>
      <method name="SetPath" cname="g_dbus_message_set_path">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetReplySerial" cname="g_dbus_message_set_reply_serial">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="guint32"/>
        </parameters>
      </method>
      <method name="SetSender" cname="g_dbus_message_set_sender">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetSerial" cname="g_dbus_message_set_serial">
        <return-type type="void"/>
        <parameters>
          <parameter name="serial" type="guint32"/>
        </parameters>
      </method>
      <method name="SetSignature" cname="g_dbus_message_set_signature">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetUnixFdList" cname="g_dbus_message_set_unix_fd_list">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="fd_list" type="GUnixFDList*"/>
        </parameters>
      </method>
      <method name="ToBlob" cname="g_dbus_message_to_blob">
        <return-type type="guchar**" owned="true" array="true" array_length_param_index="0"/>
        <parameters throws="1">
          <parameter name="out_size" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="capabilities" type="GDBusCapabilityFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ToGerror" cname="g_dbus_message_to_gerror">
        <return-type type="gboolean"/>
      </method>
      <property name="Locked" cname="locked" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
    </object>
    <object name="DBusMethodInvocation" cname="GDBusMethodInvocation" abstract="false" opaque="false" hidden="false" parent="GObject">
      <method name="GetType" cname="g_dbus_method_invocation_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetConnection" cname="g_dbus_method_invocation_get_connection">
        <return-type type="GDBusConnection*"/>
      </method>
      <method name="GetInterfaceName" cname="g_dbus_method_invocation_get_interface_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetMessage" cname="g_dbus_method_invocation_get_message">
        <return-type type="GDBusMessage*"/>
      </method>
      <method name="GetMethodInfo" cname="g_dbus_method_invocation_get_method_info">
        <return-type type="GDBusMethodInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetMethodName" cname="g_dbus_method_invocation_get_method_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetObjectPath" cname="g_dbus_method_invocation_get_object_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetParameters" cname="g_dbus_method_invocation_get_parameters">
        <return-type type="GVariant*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetSender" cname="g_dbus_method_invocation_get_sender">
        <return-type type="const-gchar*"/>
      </method>
      <method name="ReturnDbusError" cname="g_dbus_method_invocation_return_dbus_error">
        <return-type type="void"/>
        <parameters>
          <parameter name="error_name" type="const-gchar*"/>
          <parameter name="error_message" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ReturnErrorLiteral" cname="g_dbus_method_invocation_return_error_literal">
        <return-type type="void"/>
        <parameters>
          <parameter name="domain" type="guint32"/>
          <parameter name="code" type="gint"/>
          <parameter name="message" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ReturnGerror" cname="g_dbus_method_invocation_return_gerror">
        <return-type type="void"/>
        <parameters>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ReturnValue" cname="g_dbus_method_invocation_return_value">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ReturnValueWithUnixFdList" cname="g_dbus_method_invocation_return_value_with_unix_fd_list">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="fd_list" type="GUnixFDList*"/>
        </parameters>
      </method>
    </object>
    <object name="DBusObjectManagerClient" cname="GDBusObjectManagerClient" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GAsyncInitable"/>
        <interface cname="GDBusObjectManager"/>
        <interface cname="GInitable"/>
      </implements>
      <class_struct cname="GDBusObjectManagerClientClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="interface_proxy_signal"/>
        <method signal_vm="interface_proxy_properties_changed"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_object_manager_client_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_object_manager_client_new_finish">
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_object_manager_client_new_for_bus_finish">
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_object_manager_client_new_for_bus_sync">
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="flags" type="GDBusObjectManagerClientFlags"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="get_proxy_type_func" type="GDBusProxyTypeFunc"/>
          <parameter name="get_proxy_type_user_data" type="gpointer"/>
          <parameter name="get_proxy_type_destroy_notify" type="GDestroyNotify"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_object_manager_client_new_sync">
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="flags" type="GDBusObjectManagerClientFlags"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="get_proxy_type_func" type="GDBusProxyTypeFunc"/>
          <parameter name="get_proxy_type_user_data" type="gpointer"/>
          <parameter name="get_proxy_type_destroy_notify" type="GDestroyNotify"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <method name="New" cname="g_dbus_object_manager_client_new" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="flags" type="GDBusObjectManagerClientFlags"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter closure="5" destroy="6" scope="notified" allow-none="1" name="get_proxy_type_func" type="GDBusProxyTypeFunc"/>
          <parameter name="get_proxy_type_user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="get_proxy_type_destroy_notify" type="GDestroyNotify"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="9" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="NewForBus" cname="g_dbus_object_manager_client_new_for_bus" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="flags" type="GDBusObjectManagerClientFlags"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter closure="5" destroy="6" scope="notified" allow-none="1" name="get_proxy_type_func" type="GDBusProxyTypeFunc"/>
          <parameter name="get_proxy_type_user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="get_proxy_type_destroy_notify" type="GDestroyNotify"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="9" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="GetConnection" cname="g_dbus_object_manager_client_get_connection">
        <return-type type="GDBusConnection*"/>
      </method>
      <method name="GetFlags" cname="g_dbus_object_manager_client_get_flags">
        <return-type type="GDBusObjectManagerClientFlags"/>
      </method>
      <method name="GetName" cname="g_dbus_object_manager_client_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetNameOwner" cname="g_dbus_object_manager_client_get_name_owner">
        <return-type type="gchar*" owned="true"/>
      </method>
      <property name="BusType" cname="bus-type" type="GBusType" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="Connection" cname="connection" type="GDBusConnection*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Flags" cname="flags" type="GDBusObjectManagerClientFlags" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GetProxyTypeDestroyNotify" cname="get-proxy-type-destroy-notify" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GetProxyTypeFunc" cname="get-proxy-type-func" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GetProxyTypeUserData" cname="get-proxy-type-user-data" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="NameOwner" cname="name-owner" type="gchar*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="ObjectPath" cname="object-path" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDBusObjectManagerClientPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="InterfaceProxyPropertiesChanged" cname="interface-proxy-properties-changed" when="last" field_name="interface_proxy_properties_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="object_proxy" type="GDBusObjectProxy*"/>
          <parameter name="interface_proxy" type="GDBusProxy*"/>
          <parameter name="changed_properties" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="invalidated_properties" type="" array="true" null_term_array="true"/>
        </parameters>
      </signal>
      <signal name="InterfaceProxySignal" cname="interface-proxy-signal" when="last" field_name="interface_proxy_signal">
        <return-type type="void"/>
        <parameters>
          <parameter name="object_proxy" type="GDBusObjectProxy*"/>
          <parameter name="interface_proxy" type="GDBusProxy*"/>
          <parameter name="sender_name" type="const-gchar*"/>
          <parameter name="signal_name" type="const-gchar*"/>
          <parameter name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
    </object>
    <object name="DBusObjectManagerServer" cname="GDBusObjectManagerServer" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GDBusObjectManager"/>
      </implements>
      <class_struct cname="GDBusObjectManagerServerClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_object_manager_server_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_object_manager_server_new">
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="Export" cname="g_dbus_object_manager_server_export">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="GDBusObjectSkeleton*"/>
        </parameters>
      </method>
      <method name="ExportUniquely" cname="g_dbus_object_manager_server_export_uniquely">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="GDBusObjectSkeleton*"/>
        </parameters>
      </method>
      <method name="GetConnection" cname="g_dbus_object_manager_server_get_connection">
        <return-type type="GDBusConnection*" owned="true"/>
      </method>
      <method name="IsExported" cname="g_dbus_object_manager_server_is_exported">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="_object" type="GDBusObjectSkeleton*"/>
        </parameters>
      </method>
      <method name="SetConnection" cname="g_dbus_object_manager_server_set_connection">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="connection" type="GDBusConnection*"/>
        </parameters>
      </method>
      <method name="Unexport" cname="g_dbus_object_manager_server_unexport">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </method>
      <property name="Connection" cname="connection" type="GDBusConnection*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="ObjectPath" cname="object-path" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDBusObjectManagerServerPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="DBusObjectProxy" cname="GDBusObjectProxy" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GDBusObject"/>
      </implements>
      <class_struct cname="GDBusObjectProxyClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_object_proxy_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_object_proxy_new">
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="GetConnection" cname="g_dbus_object_proxy_get_connection">
        <return-type type="GDBusConnection*"/>
      </method>
      <property name="GConnection" cname="g-connection" type="GDBusConnection*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GObjectPath" cname="g-object-path" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDBusObjectProxyPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="DBusObjectSkeleton" cname="GDBusObjectSkeleton" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GDBusObject"/>
      </implements>
      <class_struct cname="GDBusObjectSkeletonClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="authorize_method"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_object_skeleton_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_object_skeleton_new">
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="AddInterface" cname="g_dbus_object_skeleton_add_interface">
        <return-type type="void"/>
        <parameters>
          <parameter name="interface_" type="GDBusInterfaceSkeleton*"/>
        </parameters>
      </method>
      <method name="Flush" cname="g_dbus_object_skeleton_flush">
        <return-type type="void"/>
      </method>
      <method name="RemoveInterface" cname="g_dbus_object_skeleton_remove_interface">
        <return-type type="void"/>
        <parameters>
          <parameter name="interface_" type="GDBusInterfaceSkeleton*"/>
        </parameters>
      </method>
      <method name="RemoveInterfaceByName" cname="g_dbus_object_skeleton_remove_interface_by_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="interface_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetObjectPath" cname="g_dbus_object_skeleton_set_object_path">
        <return-type type="void"/>
        <parameters>
          <parameter name="object_path" type="const-gchar*"/>
        </parameters>
      </method>
      <property name="GObjectPath" cname="g-object-path" type="gchar*" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDBusObjectSkeletonPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="AuthorizeMethod" cname="authorize-method" when="last" field_name="authorize_method">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="interface" type="GDBusInterfaceSkeleton*"/>
          <parameter name="invocation" type="GDBusMethodInvocation*"/>
        </parameters>
      </signal>
    </object>
    <object name="DBusProxy" cname="GDBusProxy" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GAsyncInitable"/>
        <interface cname="GDBusInterface"/>
        <interface cname="GInitable"/>
      </implements>
      <class_struct cname="GDBusProxyClass">
        <field cname="parent_class" access="private" writeable="false" readable="false" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="g_properties_changed"/>
        <method signal_vm="g_signal"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="32"/>
      </class_struct>
      <method name="GetType" cname="g_dbus_proxy_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_proxy_new_finish">
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_for_bus_finish">
        <parameters>
          <parameter name="res" type="GAsyncResult*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_for_bus_sync">
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="flags" type="GDBusProxyFlags"/>
          <parameter name="info" type="GDBusInterfaceInfo*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_sync">
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="flags" type="GDBusProxyFlags"/>
          <parameter name="info" type="GDBusInterfaceInfo*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <method name="New" cname="g_dbus_proxy_new" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="flags" type="GDBusProxyFlags"/>
          <parameter allow-none="1" name="info" type="GDBusInterfaceInfo*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="8" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="NewForBus" cname="g_dbus_proxy_new_for_bus" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="flags" type="GDBusProxyFlags"/>
          <parameter allow-none="1" name="info" type="GDBusInterfaceInfo*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="object_path" type="const-gchar*"/>
          <parameter name="interface_name" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="8" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="Call" cname="g_dbus_proxy_call">
        <return-type type="void"/>
        <parameters>
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CallFinish" cname="g_dbus_proxy_call_finish">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CallSync" cname="g_dbus_proxy_call_sync">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CallWithUnixFdList" cname="g_dbus_proxy_call_with_unix_fd_list">
        <return-type type="void"/>
        <parameters>
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="fd_list" type="GUnixFDList*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="7" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CallWithUnixFdListFinish" cname="g_dbus_proxy_call_with_unix_fd_list_finish">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter allow-none="1" name="out_fd_list" type="GUnixFDList*" owned="true" pass_as="out"/>
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CallWithUnixFdListSync" cname="g_dbus_proxy_call_with_unix_fd_list_sync">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="method_name" type="const-gchar*"/>
          <parameter allow-none="1" name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="flags" type="GDBusCallFlags"/>
          <parameter name="timeout_msec" type="gint"/>
          <parameter allow-none="1" name="fd_list" type="GUnixFDList*"/>
          <parameter allow-none="1" name="out_fd_list" type="GUnixFDList*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetCachedProperty" cname="g_dbus_proxy_get_cached_property">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="property_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetCachedPropertyNames" cname="g_dbus_proxy_get_cached_property_names">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="GetConnection" cname="g_dbus_proxy_get_connection">
        <return-type type="GDBusConnection*"/>
      </method>
      <method name="GetDefaultTimeout" cname="g_dbus_proxy_get_default_timeout">
        <return-type type="gint"/>
      </method>
      <method name="GetFlags" cname="g_dbus_proxy_get_flags">
        <return-type type="GDBusProxyFlags"/>
      </method>
      <method name="GetInterfaceInfo" cname="g_dbus_proxy_get_interface_info">
        <return-type type="GDBusInterfaceInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetInterfaceName" cname="g_dbus_proxy_get_interface_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetName" cname="g_dbus_proxy_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetNameOwner" cname="g_dbus_proxy_get_name_owner">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GetObjectPath" cname="g_dbus_proxy_get_object_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="SetCachedProperty" cname="g_dbus_proxy_set_cached_property">
        <return-type type="void"/>
        <parameters>
          <parameter name="property_name" type="const-gchar*"/>
          <parameter allow-none="1" name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetDefaultTimeout" cname="g_dbus_proxy_set_default_timeout">
        <return-type type="void"/>
        <parameters>
          <parameter name="timeout_msec" type="gint"/>
        </parameters>
      </method>
      <method name="SetInterfaceInfo" cname="g_dbus_proxy_set_interface_info">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="info" type="GDBusInterfaceInfo*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <property name="GBusType" cname="g-bus-type" type="GBusType" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="GConnection" cname="g-connection" type="GDBusConnection*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GDefaultTimeout" cname="g-default-timeout" type="gint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="GFlags" cname="g-flags" type="GDBusProxyFlags" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GInterfaceInfo" cname="g-interface-info" type="GDBusInterfaceInfo*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="GInterfaceName" cname="g-interface-name" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GName" cname="g-name" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="GNameOwner" cname="g-name-owner" type="gchar*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="GObjectPath" cname="g-object-path" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDBusProxyPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="GPropertiesChanged" cname="g-properties-changed" when="last" field_name="g_properties_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="changed_properties" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="invalidated_properties" type="" array="true" null_term_array="true"/>
        </parameters>
      </signal>
      <signal name="GSignal" cname="g-signal" when="last" field_name="g_signal">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="sender_name" type="const-gchar*"/>
          <parameter name="signal_name" type="const-gchar*"/>
          <parameter name="parameters" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
    </object>
    <object name="DBusServer" cname="GDBusServer" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GInitable"/>
      </implements>
      <method name="GetType" cname="g_dbus_server_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_dbus_server_new_sync">
        <parameters>
          <parameter name="address" type="const-gchar*"/>
          <parameter name="flags" type="GDBusServerFlags"/>
          <parameter name="guid" type="const-gchar*"/>
          <parameter name="observer" type="GDBusAuthObserver*"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </constructor>
      <method name="GetClientAddress" cname="g_dbus_server_get_client_address">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFlags" cname="g_dbus_server_get_flags">
        <return-type type="GDBusServerFlags"/>
      </method>
      <method name="GetGuid" cname="g_dbus_server_get_guid">
        <return-type type="const-gchar*"/>
      </method>
      <method name="IsActive" cname="g_dbus_server_is_active">
        <return-type type="gboolean"/>
      </method>
      <method name="Start" cname="g_dbus_server_start">
        <return-type type="void"/>
      </method>
      <method name="Stop" cname="g_dbus_server_stop">
        <return-type type="void"/>
      </method>
      <property name="Active" cname="active" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Address" cname="address" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="AuthenticationObserver" cname="authentication-observer" type="GDBusAuthObserver*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="ClientAddress" cname="client-address" type="gchar*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Flags" cname="flags" type="GDBusServerFlags" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Guid" cname="guid" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <signal name="NewConnection" cname="new-connection" when="last">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
        </parameters>
      </signal>
    </object>
    <object name="DataInputStream" cname="GDataInputStream" abstract="false" opaque="false" hidden="false" parent="GBufferedInputStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GDataInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GBufferedInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_data_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_data_input_stream_new">
        <parameters>
          <parameter name="base_stream" type="GInputStream*"/>
        </parameters>
      </constructor>
      <method name="GetByteOrder" cname="g_data_input_stream_get_byte_order">
        <return-type type="GDataStreamByteOrder"/>
      </method>
      <method name="GetNewlineType" cname="g_data_input_stream_get_newline_type">
        <return-type type="GDataStreamNewlineType"/>
      </method>
      <method name="ReadByte" cname="g_data_input_stream_read_byte">
        <return-type type="guint8"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadInt16" cname="g_data_input_stream_read_int16">
        <return-type type="gint16"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadInt32" cname="g_data_input_stream_read_int32">
        <return-type type="gint32"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadInt64" cname="g_data_input_stream_read_int64">
        <return-type type="gint64"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadLine" cname="g_data_input_stream_read_line">
        <return-type type="char**" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadLineAsync" cname="g_data_input_stream_read_line_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReadLineFinish" cname="g_data_input_stream_read_line_finish">
        <return-type type="char**" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadLineFinishUtf8" cname="g_data_input_stream_read_line_finish_utf8">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadLineUtf8" cname="g_data_input_stream_read_line_utf8">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUint16" cname="g_data_input_stream_read_uint16">
        <return-type type="guint16"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUint32" cname="g_data_input_stream_read_uint32">
        <return-type type="guint32"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUint64" cname="g_data_input_stream_read_uint64">
        <return-type type="guint64"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUntil" cname="g_data_input_stream_read_until">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="stop_chars" type="const-gchar*"/>
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUntilAsync" cname="g_data_input_stream_read_until_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stop_chars" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReadUntilFinish" cname="g_data_input_stream_read_until_finish">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUpto" cname="g_data_input_stream_read_upto">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="stop_chars" type="const-gchar*"/>
          <parameter name="stop_chars_len" type="gssize"/>
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadUptoAsync" cname="g_data_input_stream_read_upto_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stop_chars" type="const-gchar*"/>
          <parameter name="stop_chars_len" type="gssize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReadUptoFinish" cname="g_data_input_stream_read_upto_finish">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="length" type="gsize*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_data_input_stream_set_byte_order">
        <return-type type="void"/>
        <parameters>
          <parameter name="order" type="GDataStreamByteOrder"/>
        </parameters>
      </method>
      <method name="SetNewlineType" cname="g_data_input_stream_set_newline_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="type" type="GDataStreamNewlineType"/>
        </parameters>
      </method>
      <property name="ByteOrder" cname="byte-order" type="GDataStreamByteOrder" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="NewlineType" cname="newline-type" type="GDataStreamNewlineType" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GBufferedInputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDataInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="DataOutputStream" cname="GDataOutputStream" abstract="false" opaque="false" hidden="false" parent="GFilterOutputStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GDataOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GFilterOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_data_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_data_output_stream_new">
        <parameters>
          <parameter name="base_stream" type="GOutputStream*"/>
        </parameters>
      </constructor>
      <method name="GetByteOrder" cname="g_data_output_stream_get_byte_order">
        <return-type type="GDataStreamByteOrder"/>
      </method>
      <method name="PutByte" cname="g_data_output_stream_put_byte">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="guint8"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutInt16" cname="g_data_output_stream_put_int16">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="gint16"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutInt32" cname="g_data_output_stream_put_int32">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="gint32"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutInt64" cname="g_data_output_stream_put_int64">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="gint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutString" cname="g_data_output_stream_put_string">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="str" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutUint16" cname="g_data_output_stream_put_uint16">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="guint16"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutUint32" cname="g_data_output_stream_put_uint32">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="guint32"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PutUint64" cname="g_data_output_stream_put_uint64">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="data" type="guint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_data_output_stream_set_byte_order">
        <return-type type="void"/>
        <parameters>
          <parameter name="order" type="GDataStreamByteOrder"/>
        </parameters>
      </method>
      <property name="ByteOrder" cname="byte-order" type="GDataStreamByteOrder" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GFilterOutputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GDataOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="DesktopAppInfo" cname="GDesktopAppInfo" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GAppInfo"/>
      </implements>
      <class_struct cname="GDesktopAppInfoClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_desktop_app_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_desktop_app_info_new">
        <parameters>
          <parameter name="desktop_id" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_desktop_app_info_new_from_filename">
        <parameters>
          <parameter name="filename" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_desktop_app_info_new_from_keyfile">
        <parameters>
          <parameter name="key_file" type="GKeyFile*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <method name="SetDesktopEnv" cname="g_desktop_app_info_set_desktop_env" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="desktop_env" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetCategories" cname="g_desktop_app_info_get_categories">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFilename" cname="g_desktop_app_info_get_filename">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetGenericName" cname="g_desktop_app_info_get_generic_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetIsHidden" cname="g_desktop_app_info_get_is_hidden">
        <return-type type="gboolean"/>
      </method>
      <method name="GetKeywords" cname="g_desktop_app_info_get_keywords">
        <return-type type="const char* const*" array="true" null_term_array="true"/>
      </method>
      <method name="GetNodisplay" cname="g_desktop_app_info_get_nodisplay">
        <return-type type="gboolean"/>
      </method>
      <method name="GetShowIn" cname="g_desktop_app_info_get_show_in">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="desktop_env" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetStartupWmClass" cname="g_desktop_app_info_get_startup_wm_class">
        <return-type type="const-gchar*"/>
      </method>
      <method name="LaunchUrisAsManager" cname="g_desktop_app_info_launch_uris_as_manager">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="uris" type="GList*" element_type="const-gchar*"/>
          <parameter name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="spawn_flags" type="GSpawnFlags"/>
          <parameter closure="4" scope="call" name="user_setup" type="GSpawnChildSetupFunc"/>
          <parameter closure="3" name="user_setup_data" type="gpointer"/>
          <parameter closure="6" scope="call" name="pid_callback" type="GDesktopAppLaunchCallback"/>
          <parameter closure="5" name="pid_callback_data" type="gpointer"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <property name="Filename" cname="filename" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <object name="Emblem" cname="GEmblem" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GIcon"/>
      </implements>
      <class_struct cname="GEmblemClass"/>
      <method name="GetType" cname="g_emblem_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_emblem_new">
        <parameters>
          <parameter name="icon" type="GIcon*"/>
        </parameters>
      </constructor>
      <constructor cname="g_emblem_new_with_origin">
        <parameters>
          <parameter name="icon" type="GIcon*"/>
          <parameter name="origin" type="GEmblemOrigin"/>
        </parameters>
      </constructor>
      <method name="GetIcon" cname="g_emblem_get_icon">
        <return-type type="GIcon*"/>
      </method>
      <method name="GetOrigin" cname="g_emblem_get_origin">
        <return-type type="GEmblemOrigin"/>
      </method>
      <property name="Icon" cname="icon" type="GObject*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Origin" cname="origin" type="GEmblemOrigin" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <object name="EmblemedIcon" cname="GEmblemedIcon" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GIcon"/>
      </implements>
      <class_struct cname="GEmblemedIconClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_emblemed_icon_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_emblemed_icon_new">
        <parameters>
          <parameter name="icon" type="GIcon*"/>
          <parameter name="emblem" type="GEmblem*"/>
        </parameters>
      </constructor>
      <method name="AddEmblem" cname="g_emblemed_icon_add_emblem">
        <return-type type="void"/>
        <parameters>
          <parameter name="emblem" type="GEmblem*"/>
        </parameters>
      </method>
      <method name="ClearEmblems" cname="g_emblemed_icon_clear_emblems">
        <return-type type="void"/>
      </method>
      <method name="GetEmblems" cname="g_emblemed_icon_get_emblems">
        <return-type type="GList*" element_type="GEmblem*"/>
      </method>
      <method name="GetIcon" cname="g_emblemed_icon_get_icon">
        <return-type type="GIcon*"/>
      </method>
      <property name="Gicon" cname="gicon" type="GIcon*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GEmblemedIconPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="FileEnumerator" cname="GFileEnumerator" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GFileEnumeratorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="next_file"/>
        <method vm="close_fn"/>
        <method vm="next_files_async"/>
        <method vm="next_files_finish"/>
        <method vm="close_async"/>
        <method vm="close_finish"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_file_enumerator_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="NextFile" cname="next_file">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="NextFilesAsync" cname="next_files_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="num_files" type="gint"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="NextFilesFinish" cname="next_files_finish">
        <return-type type="GList*" element_type="GFileInfo*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="Close" cname="g_file_enumerator_close">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_file_enumerator_close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_file_enumerator_close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetContainer" cname="g_file_enumerator_get_container">
        <return-type type="GFile*"/>
      </method>
      <method name="HasPending" cname="g_file_enumerator_has_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="IsClosed" cname="g_file_enumerator_is_closed">
        <return-type type="gboolean"/>
      </method>
      <method name="NextFile" cname="g_file_enumerator_next_file">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="NextFilesAsync" cname="g_file_enumerator_next_files_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="num_files" type="gint"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="NextFilesFinish" cname="g_file_enumerator_next_files_finish">
        <return-type type="GList*" element_type="GFileInfo*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetPending" cname="g_file_enumerator_set_pending">
        <return-type type="void"/>
        <parameters>
          <parameter name="pending" type="gboolean"/>
        </parameters>
      </method>
      <property name="Container" cname="container" type="GFile*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GFileEnumeratorPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="FileIOStream" cname="GFileIOStream" abstract="false" opaque="false" hidden="false" parent="GIOStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GFileIOStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GIOStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="tell"/>
        <method vm="can_seek"/>
        <method vm="seek"/>
        <method vm="can_truncate"/>
        <method vm="truncate_fn"/>
        <method vm="query_info"/>
        <method vm="query_info_async"/>
        <method vm="query_info_finish"/>
        <method vm="get_etag"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_file_io_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="GetEtag" cname="get_etag">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter name="type" type="GSeekType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Tell" cname="tell">
        <return-type type="gint64"/>
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="size" type="gint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="GetEtag" cname="g_file_io_stream_get_etag">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="QueryInfo" cname="g_file_io_stream_query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_io_stream_query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_io_stream_query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GIOStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GFileIOStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="FileIcon" cname="GFileIcon" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GIcon"/>
        <interface cname="GLoadableIcon"/>
      </implements>
      <class_struct cname="GFileIconClass"/>
      <method name="GetType" cname="g_file_icon_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_file_icon_new">
        <parameters>
          <parameter name="file" type="GFile*"/>
        </parameters>
      </constructor>
      <method name="GetFile" cname="g_file_icon_get_file">
        <return-type type="GFile*"/>
      </method>
      <property name="File" cname="file" type="GFile*" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <object name="FileInfo" cname="GFileInfo" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GFileInfoClass"/>
      <method name="GetType" cname="g_file_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_file_info_new" disable_void_ctor=""/>
      <method name="ClearStatus" cname="g_file_info_clear_status">
        <return-type type="void"/>
      </method>
      <method name="CopyInto" cname="g_file_info_copy_into">
        <return-type type="void"/>
        <parameters>
          <parameter name="dest_info" type="GFileInfo*"/>
        </parameters>
      </method>
      <method name="Dup" cname="g_file_info_dup">
        <return-type type="GFileInfo*" owned="true"/>
      </method>
      <method name="GetAttributeAsString" cname="g_file_info_get_attribute_as_string">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeBoolean" cname="g_file_info_get_attribute_boolean">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeByteString" cname="g_file_info_get_attribute_byte_string">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeData" cname="g_file_info_get_attribute_data">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter allow-none="1" name="type" type="GFileAttributeType" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="value_pp" type="gpointer*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="status" type="GFileAttributeStatus" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="GetAttributeInt32" cname="g_file_info_get_attribute_int32">
        <return-type type="gint32"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeInt64" cname="g_file_info_get_attribute_int64">
        <return-type type="gint64"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeObject" cname="g_file_info_get_attribute_object">
        <return-type type="GObject*"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeStatus" cname="g_file_info_get_attribute_status">
        <return-type type="GFileAttributeStatus"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeString" cname="g_file_info_get_attribute_string">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeStringv" cname="g_file_info_get_attribute_stringv">
        <return-type type="char**" array="true" null_term_array="true"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeType" cname="g_file_info_get_attribute_type">
        <return-type type="GFileAttributeType"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeUint32" cname="g_file_info_get_attribute_uint32">
        <return-type type="guint32"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetAttributeUint64" cname="g_file_info_get_attribute_uint64">
        <return-type type="guint64"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetContentType" cname="g_file_info_get_content_type">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetDisplayName" cname="g_file_info_get_display_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetEditName" cname="g_file_info_get_edit_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetEtag" cname="g_file_info_get_etag">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFileType" cname="g_file_info_get_file_type">
        <return-type type="GFileType"/>
      </method>
      <method name="GetIcon" cname="g_file_info_get_icon">
        <return-type type="GIcon*"/>
      </method>
      <method name="GetIsBackup" cname="g_file_info_get_is_backup">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsHidden" cname="g_file_info_get_is_hidden">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsSymlink" cname="g_file_info_get_is_symlink">
        <return-type type="gboolean"/>
      </method>
      <method name="GetModificationTime" cname="g_file_info_get_modification_time">
        <return-type type="void"/>
        <parameters>
          <parameter name="_result" type="GTimeVal*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="GetName" cname="g_file_info_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetSize" cname="g_file_info_get_size">
        <return-type type="gint64"/>
      </method>
      <method name="GetSortOrder" cname="g_file_info_get_sort_order">
        <return-type type="gint32"/>
      </method>
      <method name="GetSymbolicIcon" cname="g_file_info_get_symbolic_icon">
        <return-type type="GIcon*"/>
      </method>
      <method name="GetSymlinkTarget" cname="g_file_info_get_symlink_target">
        <return-type type="const-gchar*"/>
      </method>
      <method name="HasAttribute" cname="g_file_info_has_attribute">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="HasNamespace" cname="g_file_info_has_namespace">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="name_space" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ListAttributes" cname="g_file_info_list_attributes">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
        <parameters>
          <parameter name="name_space" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="RemoveAttribute" cname="g_file_info_remove_attribute">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetAttribute" cname="g_file_info_set_attribute">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="type" type="GFileAttributeType"/>
          <parameter name="value_p" type="gpointer"/>
        </parameters>
      </method>
      <method name="SetAttributeBoolean" cname="g_file_info_set_attribute_boolean">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetAttributeByteString" cname="g_file_info_set_attribute_byte_string">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetAttributeInt32" cname="g_file_info_set_attribute_int32">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="gint32"/>
        </parameters>
      </method>
      <method name="SetAttributeInt64" cname="g_file_info_set_attribute_int64">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="gint64"/>
        </parameters>
      </method>
      <method name="SetAttributeMask" cname="g_file_info_set_attribute_mask">
        <return-type type="void"/>
        <parameters>
          <parameter name="mask" type="GFileAttributeMatcher*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetAttributeObject" cname="g_file_info_set_attribute_object">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="GObject*"/>
        </parameters>
      </method>
      <method name="SetAttributeStatus" cname="g_file_info_set_attribute_status">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="status" type="GFileAttributeStatus"/>
        </parameters>
      </method>
      <method name="SetAttributeString" cname="g_file_info_set_attribute_string">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetAttributeStringv" cname="g_file_info_set_attribute_stringv">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="char**" array="true"/>
        </parameters>
      </method>
      <method name="SetAttributeUint32" cname="g_file_info_set_attribute_uint32">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="guint32"/>
        </parameters>
      </method>
      <method name="SetAttributeUint64" cname="g_file_info_set_attribute_uint64">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter name="attr_value" type="guint64"/>
        </parameters>
      </method>
      <method name="SetContentType" cname="g_file_info_set_content_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetDisplayName" cname="g_file_info_set_display_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="display_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetEditName" cname="g_file_info_set_edit_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="edit_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetFileType" cname="g_file_info_set_file_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="type" type="GFileType"/>
        </parameters>
      </method>
      <method name="SetIcon" cname="g_file_info_set_icon">
        <return-type type="void"/>
        <parameters>
          <parameter name="icon" type="GIcon*"/>
        </parameters>
      </method>
      <method name="SetIsHidden" cname="g_file_info_set_is_hidden">
        <return-type type="void"/>
        <parameters>
          <parameter name="is_hidden" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetIsSymlink" cname="g_file_info_set_is_symlink">
        <return-type type="void"/>
        <parameters>
          <parameter name="is_symlink" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetModificationTime" cname="g_file_info_set_modification_time">
        <return-type type="void"/>
        <parameters>
          <parameter name="mtime" type="GTimeVal*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetName" cname="g_file_info_set_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetSize" cname="g_file_info_set_size">
        <return-type type="void"/>
        <parameters>
          <parameter name="size" type="gint64"/>
        </parameters>
      </method>
      <method name="SetSortOrder" cname="g_file_info_set_sort_order">
        <return-type type="void"/>
        <parameters>
          <parameter name="sort_order" type="gint32"/>
        </parameters>
      </method>
      <method name="SetSymbolicIcon" cname="g_file_info_set_symbolic_icon">
        <return-type type="void"/>
        <parameters>
          <parameter name="icon" type="GIcon*"/>
        </parameters>
      </method>
      <method name="SetSymlinkTarget" cname="g_file_info_set_symlink_target">
        <return-type type="void"/>
        <parameters>
          <parameter name="symlink_target" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="UnsetAttributeMask" cname="g_file_info_unset_attribute_mask">
        <return-type type="void"/>
      </method>
    </object>
    <object name="FileInputStream" cname="GFileInputStream" abstract="false" opaque="false" hidden="false" parent="GInputStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GFileInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="tell"/>
        <method vm="can_seek"/>
        <method vm="seek"/>
        <method vm="query_info"/>
        <method vm="query_info_async"/>
        <method vm="query_info_finish"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_file_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter name="type" type="GSeekType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Tell" cname="tell">
        <return-type type="gint64"/>
      </virtual_method>
      <method name="QueryInfo" cname="g_file_input_stream_query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_input_stream_query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_input_stream_query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GInputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GFileInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="FileMonitor" cname="GFileMonitor" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GFileMonitorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="changed"/>
        <method vm="cancel"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_file_monitor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Cancel" cname="cancel">
        <return-type type="gboolean"/>
      </virtual_method>
      <method name="Cancel" cname="g_file_monitor_cancel">
        <return-type type="gboolean"/>
      </method>
      <method name="EmitEvent" cname="g_file_monitor_emit_event">
        <return-type type="void"/>
        <parameters>
          <parameter name="child" type="GFile*"/>
          <parameter name="other_file" type="GFile*"/>
          <parameter name="event_type" type="GFileMonitorEvent"/>
        </parameters>
      </method>
      <method name="IsCancelled" cname="g_file_monitor_is_cancelled">
        <return-type type="gboolean"/>
      </method>
      <method name="SetRateLimit" cname="g_file_monitor_set_rate_limit">
        <return-type type="void"/>
        <parameters>
          <parameter name="limit_msecs" type="gint"/>
        </parameters>
      </method>
      <property name="Cancelled" cname="cancelled" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="RateLimit" cname="rate-limit" type="gint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GFileMonitorPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Changed" cname="changed" when="last" field_name="changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="file" type="GFile*"/>
          <parameter allow-none="1" name="other_file" type="GFile*"/>
          <parameter name="event_type" type="GFileMonitorEvent"/>
        </parameters>
      </signal>
    </object>
    <object name="FileOutputStream" cname="GFileOutputStream" abstract="false" opaque="false" hidden="false" parent="GOutputStream">
      <implements>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GFileOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="tell"/>
        <method vm="can_seek"/>
        <method vm="seek"/>
        <method vm="can_truncate"/>
        <method vm="truncate_fn"/>
        <method vm="query_info"/>
        <method vm="query_info_async"/>
        <method vm="query_info_finish"/>
        <method vm="get_etag"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_file_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="GetEtag" cname="get_etag">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="offset" type="gint64"/>
          <parameter name="type" type="GSeekType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Tell" cname="tell">
        <return-type type="gint64"/>
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="size" type="gint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="GetEtag" cname="g_file_output_stream_get_etag">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="QueryInfo" cname="g_file_output_stream_query_info">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="attributes" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_output_stream_query_info_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_output_stream_query_info_finish">
        <return-type type="GFileInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GOutputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GFileOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="FilenameCompleter" cname="GFilenameCompleter" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GFilenameCompleterClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="got_completion_data"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_filename_completer_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_filename_completer_new" disable_void_ctor=""/>
      <method name="GetCompletionSuffix" cname="g_filename_completer_get_completion_suffix">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="initial_text" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetCompletions" cname="g_filename_completer_get_completions">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
        <parameters>
          <parameter name="initial_text" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetDirsOnly" cname="g_filename_completer_set_dirs_only">
        <return-type type="void"/>
        <parameters>
          <parameter name="dirs_only" type="gboolean"/>
        </parameters>
      </method>
      <signal name="GotCompletionData" cname="got-completion-data" when="last" field_name="got_completion_data">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </object>
    <object name="FilterInputStream" cname="GFilterInputStream" abstract="true" opaque="false" hidden="false" parent="GInputStream">
      <class_struct cname="GFilterInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_filter_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetBaseStream" cname="g_filter_input_stream_get_base_stream">
        <return-type type="GInputStream*"/>
      </method>
      <method name="GetCloseBaseStream" cname="g_filter_input_stream_get_close_base_stream">
        <return-type type="gboolean"/>
      </method>
      <method name="SetCloseBaseStream" cname="g_filter_input_stream_set_close_base_stream">
        <return-type type="void"/>
        <parameters>
          <parameter name="close_base" type="gboolean"/>
        </parameters>
      </method>
      <property name="BaseStream" cname="base-stream" type="GInputStream*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="CloseBaseStream" cname="close-base-stream" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GInputStream*"/>
      <field cname="base_stream" access="public" writeable="false" readable="true" name="BaseStreamField" type="GInputStream*"/>
    </object>
    <object name="FilterOutputStream" cname="GFilterOutputStream" abstract="true" opaque="false" hidden="false" parent="GOutputStream">
      <class_struct cname="GFilterOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_filter_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetBaseStream" cname="g_filter_output_stream_get_base_stream">
        <return-type type="GOutputStream*"/>
      </method>
      <method name="GetCloseBaseStream" cname="g_filter_output_stream_get_close_base_stream">
        <return-type type="gboolean"/>
      </method>
      <method name="SetCloseBaseStream" cname="g_filter_output_stream_set_close_base_stream">
        <return-type type="void"/>
        <parameters>
          <parameter name="close_base" type="gboolean"/>
        </parameters>
      </method>
      <property name="BaseStream" cname="base-stream" type="GOutputStream*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="CloseBaseStream" cname="close-base-stream" type="gboolean" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GOutputStream*"/>
      <field cname="base_stream" access="public" writeable="false" readable="true" name="BaseStreamField" type="GOutputStream*"/>
    </object>
    <object name="IOModule" cname="GIOModule" abstract="false" opaque="false" hidden="false" parent="GTypeModule">
      <implements>
        <interface cname="GTypePlugin"/>
      </implements>
      <class_struct cname="GIOModuleClass"/>
      <method name="GetType" cname="g_io_module_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_io_module_new">
        <parameters>
          <parameter name="filename" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="Query" cname="g_io_module_query" shared="true">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="Load" cname="g_io_module_load">
        <return-type type="void"/>
      </method>
      <method name="Unload" cname="g_io_module_unload">
        <return-type type="void"/>
      </method>
    </object>
    <object name="IOStream" cname="GIOStream" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GIOStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_input_stream"/>
        <method vm="get_output_stream"/>
        <method vm="close_fn"/>
        <method vm="close_async"/>
        <method vm="close_finish"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
        <method vm="_g_reserved8"/>
        <method vm="_g_reserved9"/>
        <method vm="_g_reserved10"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved8" cname="_g_reserved8" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved9" cname="_g_reserved9" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved10" cname="_g_reserved10" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_io_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="SpliceFinish" cname="g_io_stream_splice_finish" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetInputStream" cname="get_input_stream">
        <return-type type="GInputStream*"/>
      </virtual_method>
      <virtual_method name="GetOutputStream" cname="get_output_stream">
        <return-type type="GOutputStream*"/>
      </virtual_method>
      <method name="ClearPending" cname="g_io_stream_clear_pending">
        <return-type type="void"/>
      </method>
      <method name="Close" cname="g_io_stream_close">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_io_stream_close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_io_stream_close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetInputStream" cname="g_io_stream_get_input_stream">
        <return-type type="GInputStream*"/>
      </method>
      <method name="GetOutputStream" cname="g_io_stream_get_output_stream">
        <return-type type="GOutputStream*"/>
      </method>
      <method name="HasPending" cname="g_io_stream_has_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="IsClosed" cname="g_io_stream_is_closed">
        <return-type type="gboolean"/>
      </method>
      <method name="SetPending" cname="g_io_stream_set_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="SpliceAsync" cname="g_io_stream_splice_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="stream2" type="GIOStream*"/>
          <parameter name="flags" type="GIOStreamSpliceFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <property name="Closed" cname="closed" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="InputStream" cname="input-stream" type="GInputStream*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="OutputStream" cname="output-stream" type="GOutputStream*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GIOStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="InetAddress" cname="GInetAddress" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GInetAddressClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="to_string"/>
        <method vm="to_bytes"/>
      </class_struct>
      <method name="GetType" cname="g_inet_address_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_inet_address_new_any">
        <parameters>
          <parameter name="family" type="GSocketFamily"/>
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_new_from_bytes">
        <parameters>
          <parameter name="bytes" type="guint8*" array="true"/>
          <parameter name="family" type="GSocketFamily"/>
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_new_from_string">
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_new_loopback">
        <parameters>
          <parameter name="family" type="GSocketFamily"/>
        </parameters>
      </constructor>
      <virtual_method name="ToBytes" cname="to_bytes" hidden="true">
        <return-type type="guint8"/>
      </virtual_method>
      <virtual_method name="ToString" cname="to_string">
        <return-type type="gchar*" owned="true"/>
      </virtual_method>
      <method name="Equal" cname="g_inet_address_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="other_address" type="GInetAddress*"/>
        </parameters>
      </method>
      <method name="GetFamily" cname="g_inet_address_get_family">
        <return-type type="GSocketFamily"/>
      </method>
      <method name="GetIsAny" cname="g_inet_address_get_is_any">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsLinkLocal" cname="g_inet_address_get_is_link_local">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsLoopback" cname="g_inet_address_get_is_loopback">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsMcGlobal" cname="g_inet_address_get_is_mc_global">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsMcLinkLocal" cname="g_inet_address_get_is_mc_link_local">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsMcNodeLocal" cname="g_inet_address_get_is_mc_node_local">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsMcOrgLocal" cname="g_inet_address_get_is_mc_org_local">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsMcSiteLocal" cname="g_inet_address_get_is_mc_site_local">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsMulticast" cname="g_inet_address_get_is_multicast">
        <return-type type="gboolean"/>
      </method>
      <method name="GetIsSiteLocal" cname="g_inet_address_get_is_site_local">
        <return-type type="gboolean"/>
      </method>
      <method name="GetNativeSize" cname="g_inet_address_get_native_size">
        <return-type type="gsize"/>
      </method>
      <method name="ToString" cname="g_inet_address_to_string">
        <return-type type="gchar*" owned="true"/>
      </method>
      <property name="Bytes" cname="bytes" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="IsAny" cname="is-any" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsLinkLocal" cname="is-link-local" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsLoopback" cname="is-loopback" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsMcGlobal" cname="is-mc-global" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsMcLinkLocal" cname="is-mc-link-local" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsMcNodeLocal" cname="is-mc-node-local" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsMcOrgLocal" cname="is-mc-org-local" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsMcSiteLocal" cname="is-mc-site-local" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsMulticast" cname="is-multicast" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="IsSiteLocal" cname="is-site-local" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GInetAddressPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="InetAddressMask" cname="GInetAddressMask" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GInitable"/>
      </implements>
      <class_struct cname="GInetAddressMaskClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_inet_address_mask_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_inet_address_mask_new">
        <parameters>
          <parameter name="addr" type="GInetAddress*"/>
          <parameter name="length" type="guint"/>
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_mask_new_from_string">
        <parameters>
          <parameter name="mask_string" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="Equal" cname="g_inet_address_mask_equal">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mask2" type="GInetAddressMask*"/>
        </parameters>
      </method>
      <method name="GetAddress" cname="g_inet_address_mask_get_address">
        <return-type type="GInetAddress*"/>
      </method>
      <method name="GetFamily" cname="g_inet_address_mask_get_family">
        <return-type type="GSocketFamily"/>
      </method>
      <method name="GetLength" cname="g_inet_address_mask_get_length">
        <return-type type="guint"/>
      </method>
      <method name="Matches" cname="g_inet_address_mask_matches">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="address" type="GInetAddress*"/>
        </parameters>
      </method>
      <method name="ToString" cname="g_inet_address_mask_to_string">
        <return-type type="gchar*" owned="true"/>
      </method>
      <property name="Address" cname="address" type="GInetAddress*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Length" cname="length" type="guint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GInetAddressMaskPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="InetSocketAddress" cname="GInetSocketAddress" abstract="false" opaque="false" hidden="false" parent="GSocketAddress">
      <implements>
        <interface cname="GSocketConnectable"/>
      </implements>
      <class_struct cname="GInetSocketAddressClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketAddressClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_inet_socket_address_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_inet_socket_address_new">
        <parameters>
          <parameter name="address" type="GInetAddress*"/>
          <parameter name="port" type="guint16"/>
        </parameters>
      </constructor>
      <method name="GetAddress" cname="g_inet_socket_address_get_address">
        <return-type type="GInetAddress*"/>
      </method>
      <method name="GetFlowinfo" cname="g_inet_socket_address_get_flowinfo">
        <return-type type="guint32"/>
      </method>
      <method name="GetPort" cname="g_inet_socket_address_get_port">
        <return-type type="guint16"/>
      </method>
      <method name="GetScopeId" cname="g_inet_socket_address_get_scope_id">
        <return-type type="guint32"/>
      </method>
      <property name="Address" cname="address" type="GInetAddress*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Flowinfo" cname="flowinfo" type="guint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Port" cname="port" type="guint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="ScopeId" cname="scope-id" type="guint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketAddress*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GInetSocketAddressPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="InputStream" cname="GInputStream" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="read_fn"/>
        <method vm="skip"/>
        <method vm="close_fn"/>
        <method vm="read_async"/>
        <method vm="read_finish"/>
        <method vm="skip_async"/>
        <method vm="skip_finish"/>
        <method vm="close_async"/>
        <method vm="close_finish"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReadAsync" cname="read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFinish" cname="read_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Skip" cname="skip">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SkipAsync" cname="skip_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SkipFinish" cname="skip_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="ClearPending" cname="g_input_stream_clear_pending">
        <return-type type="void"/>
      </method>
      <method name="Close" cname="g_input_stream_close">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_input_stream_close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_input_stream_close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="HasPending" cname="g_input_stream_has_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="IsClosed" cname="g_input_stream_is_closed">
        <return-type type="gboolean"/>
      </method>
      <method name="Read" cname="g_input_stream_read">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadAll" cname="g_input_stream_read_all">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter name="bytes_read" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadAsync" cname="g_input_stream_read_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReadBytes" cname="g_input_stream_read_bytes">
        <return-type type="GBytes*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadBytesAsync" cname="g_input_stream_read_bytes_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReadBytesFinish" cname="g_input_stream_read_bytes_finish">
        <return-type type="GBytes*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReadFinish" cname="g_input_stream_read_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetPending" cname="g_input_stream_set_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="Skip" cname="g_input_stream_skip">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SkipAsync" cname="g_input_stream_skip_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="SkipFinish" cname="g_input_stream_skip_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="MemoryInputStream" cname="GMemoryInputStream" abstract="false" opaque="false" hidden="false" parent="GInputStream">
      <implements>
        <interface cname="GPollableInputStream"/>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GMemoryInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_memory_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_memory_input_stream_new" disable_void_ctor=""/>
      <constructor cname="g_memory_input_stream_new_from_bytes">
        <parameters>
          <parameter name="bytes" type="GBytes*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <constructor cname="g_memory_input_stream_new_from_data">
        <parameters>
          <parameter name="data" type="void**" owned="true" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gssize"/>
          <parameter name="destroy" type="GDestroyNotify"/>
        </parameters>
      </constructor>
      <method name="AddBytes" cname="g_memory_input_stream_add_bytes">
        <return-type type="void"/>
        <parameters>
          <parameter name="bytes" type="GBytes*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="AddData" cname="g_memory_input_stream_add_data">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="void**" owned="true" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gssize"/>
          <parameter scope="async" allow-none="1" name="destroy" type="GDestroyNotify"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GInputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GMemoryInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="MemoryOutputStream" cname="GMemoryOutputStream" abstract="false" opaque="false" hidden="false" parent="GOutputStream">
      <implements>
        <interface cname="GPollableOutputStream"/>
        <interface cname="GSeekable"/>
      </implements>
      <class_struct cname="GMemoryOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_memory_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetData" cname="g_memory_output_stream_get_data">
        <return-type type="gpointer"/>
      </method>
      <method name="GetDataSize" cname="g_memory_output_stream_get_data_size">
        <return-type type="gsize"/>
      </method>
      <method name="GetSize" cname="g_memory_output_stream_get_size">
        <return-type type="gsize"/>
      </method>
      <method name="StealAsBytes" cname="g_memory_output_stream_steal_as_bytes">
        <return-type type="GBytes*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="StealData" cname="g_memory_output_stream_steal_data">
        <return-type type="gpointer*" owned="true"/>
      </method>
      <property name="Data" cname="data" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="DataSize" cname="data-size" type="gulong" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="DestroyFunction" cname="destroy-function" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="ReallocFunction" cname="realloc-function" type="gpointer" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Size" cname="size" type="gulong" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GOutputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GMemoryOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Menu" cname="GMenu" abstract="false" opaque="false" hidden="false" parent="GMenuModel">
      <method name="GetType" cname="g_menu_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_menu_new" disable_void_ctor=""/>
      <method name="Append" cname="g_menu_append">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter allow-none="1" name="detailed_action" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AppendItem" cname="g_menu_append_item">
        <return-type type="void"/>
        <parameters>
          <parameter name="item" type="GMenuItem*"/>
        </parameters>
      </method>
      <method name="AppendSection" cname="g_menu_append_section">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter name="section" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="AppendSubmenu" cname="g_menu_append_submenu">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter name="submenu" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="Freeze" cname="g_menu_freeze">
        <return-type type="void"/>
      </method>
      <method name="Insert" cname="g_menu_insert">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint"/>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter allow-none="1" name="detailed_action" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="InsertItem" cname="g_menu_insert_item">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint"/>
          <parameter name="item" type="GMenuItem*"/>
        </parameters>
      </method>
      <method name="InsertSection" cname="g_menu_insert_section">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint"/>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter name="section" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="InsertSubmenu" cname="g_menu_insert_submenu">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint"/>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter name="submenu" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="Prepend" cname="g_menu_prepend">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter allow-none="1" name="detailed_action" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="PrependItem" cname="g_menu_prepend_item">
        <return-type type="void"/>
        <parameters>
          <parameter name="item" type="GMenuItem*"/>
        </parameters>
      </method>
      <method name="PrependSection" cname="g_menu_prepend_section">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter name="section" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="PrependSubmenu" cname="g_menu_prepend_submenu">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
          <parameter name="submenu" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="Remove" cname="g_menu_remove">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint"/>
        </parameters>
      </method>
    </object>
    <object name="MenuAttributeIter" cname="GMenuAttributeIter" abstract="true" opaque="true" hidden="false" parent="GObject">
      <class_struct cname="GMenuAttributeIterClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_next"/>
      </class_struct>
      <method name="GetType" cname="g_menu_attribute_iter_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetNext" cname="get_next">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="out_type" type="const-gchar*"/>
          <parameter allow-none="1" name="value" type="GVariant**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <method name="GetName" cname="g_menu_attribute_iter_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetNext" cname="g_menu_attribute_iter_get_next">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="out_name" type="const-gchar*" pass_as="out"/>
          <parameter allow-none="1" name="value" type="GVariant**" owned="true" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="GetValue" cname="g_menu_attribute_iter_get_value">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Next" cname="g_menu_attribute_iter_next">
        <return-type type="gboolean"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GMenuAttributeIterPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="MenuItem" cname="GMenuItem" abstract="false" opaque="true" hidden="false" parent="GObject">
      <method name="GetType" cname="g_menu_item_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_menu_item_new">
        <parameters>
          <parameter name="label" type="const-gchar*"/>
          <parameter name="detailed_action" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_menu_item_new_from_model">
        <parameters>
          <parameter name="model" type="GMenuModel*"/>
          <parameter name="item_index" type="gint"/>
        </parameters>
      </constructor>
      <constructor cname="g_menu_item_new_section">
        <parameters>
          <parameter name="label" type="const-gchar*"/>
          <parameter name="section" type="GMenuModel*"/>
        </parameters>
      </constructor>
      <constructor cname="g_menu_item_new_submenu">
        <parameters>
          <parameter name="label" type="const-gchar*"/>
          <parameter name="submenu" type="GMenuModel*"/>
        </parameters>
      </constructor>
      <method name="GetAttributeValue" cname="g_menu_item_get_attribute_value">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter allow-none="1" name="expected_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="GetLink" cname="g_menu_item_get_link">
        <return-type type="GMenuModel*" owned="true"/>
        <parameters>
          <parameter name="link" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetActionAndTargetValue" cname="g_menu_item_set_action_and_target_value">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="action" type="const-gchar*"/>
          <parameter allow-none="1" name="target_value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetAttributeValue" cname="g_menu_item_set_attribute_value">
        <return-type type="void"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter allow-none="1" name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetDetailedAction" cname="g_menu_item_set_detailed_action">
        <return-type type="void"/>
        <parameters>
          <parameter name="detailed_action" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetLabel" cname="g_menu_item_set_label">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="label" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetLink" cname="g_menu_item_set_link">
        <return-type type="void"/>
        <parameters>
          <parameter name="link" type="const-gchar*"/>
          <parameter allow-none="1" name="model" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="SetSection" cname="g_menu_item_set_section">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="section" type="GMenuModel*"/>
        </parameters>
      </method>
      <method name="SetSubmenu" cname="g_menu_item_set_submenu">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="submenu" type="GMenuModel*"/>
        </parameters>
      </method>
    </object>
    <object name="MenuLinkIter" cname="GMenuLinkIter" abstract="true" opaque="true" hidden="false" parent="GObject">
      <class_struct cname="GMenuLinkIterClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_next"/>
      </class_struct>
      <method name="GetType" cname="g_menu_link_iter_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetNext" cname="get_next">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="out_name" type="const-gchar*"/>
          <parameter allow-none="1" name="value" type="GMenuModel*" owned="true" pass_as="out"/>
        </parameters>
      </virtual_method>
      <method name="GetName" cname="g_menu_link_iter_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetNext" cname="g_menu_link_iter_get_next">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="out_link" type="const-gchar*" pass_as="out"/>
          <parameter allow-none="1" name="value" type="GMenuModel*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="GetValue" cname="g_menu_link_iter_get_value">
        <return-type type="GMenuModel*" owned="true"/>
      </method>
      <method name="Next" cname="g_menu_link_iter_next">
        <return-type type="gboolean"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GMenuLinkIterPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="MenuModel" cname="GMenuModel" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GMenuModelClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="is_mutable"/>
        <method vm="get_n_items"/>
        <method vm="get_item_attributes"/>
        <method vm="iterate_item_attributes"/>
        <method vm="get_item_attribute_value"/>
        <method vm="get_item_links"/>
        <method vm="iterate_item_links"/>
        <method vm="get_item_link"/>
      </class_struct>
      <method name="GetType" cname="g_menu_model_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="GetItemAttributeValue" cname="get_item_attribute_value">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="item_index" type="gint"/>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter allow-none="1" name="expected_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="GetItemAttributes" cname="get_item_attributes">
        <return-type type="void"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
          <parameter name="attributes" type="GHashTable**" element_type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetItemLink" cname="get_item_link">
        <return-type type="GMenuModel*" owned="true"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
          <parameter name="link" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetItemLinks" cname="get_item_links">
        <return-type type="void"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
          <parameter name="links" type="GHashTable**" element_type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetNItems" cname="get_n_items">
        <return-type type="gint"/>
      </virtual_method>
      <virtual_method name="IsMutable" cname="is_mutable">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="IterateItemAttributes" cname="iterate_item_attributes">
        <return-type type="GMenuAttributeIter*" owned="true"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
        </parameters>
      </virtual_method>
      <virtual_method name="IterateItemLinks" cname="iterate_item_links">
        <return-type type="GMenuLinkIter*" owned="true"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
        </parameters>
      </virtual_method>
      <method name="GetItemAttributeValue" cname="g_menu_model_get_item_attribute_value">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="item_index" type="gint"/>
          <parameter name="attribute" type="const-gchar*"/>
          <parameter allow-none="1" name="expected_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="GetItemLink" cname="g_menu_model_get_item_link">
        <return-type type="GMenuModel*" owned="true"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
          <parameter name="link" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetNItems" cname="g_menu_model_get_n_items">
        <return-type type="gint"/>
      </method>
      <method name="IsMutable" cname="g_menu_model_is_mutable">
        <return-type type="gboolean"/>
      </method>
      <method name="IterateItemAttributes" cname="g_menu_model_iterate_item_attributes">
        <return-type type="GMenuAttributeIter*" owned="true"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
        </parameters>
      </method>
      <method name="IterateItemLinks" cname="g_menu_model_iterate_item_links">
        <return-type type="GMenuLinkIter*" owned="true"/>
        <parameters>
          <parameter name="item_index" type="gint"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GMenuModelPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="ItemsChanged" cname="items-changed" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint"/>
          <parameter name="removed" type="gint"/>
          <parameter name="added" type="gint"/>
        </parameters>
      </signal>
    </object>
    <object name="MountOperation" cname="GMountOperation" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GMountOperationClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="ask_password"/>
        <method signal_vm="ask_question"/>
        <method signal_vm="reply"/>
        <method signal_vm="aborted"/>
        <method signal_vm="show_processes"/>
        <method signal_vm="show_unmount_progress"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
        <method vm="_g_reserved8"/>
        <method vm="_g_reserved9"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved8" cname="_g_reserved8" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved9" cname="_g_reserved9" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_mount_operation_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_mount_operation_new" disable_void_ctor=""/>
      <method name="GetAnonymous" cname="g_mount_operation_get_anonymous">
        <return-type type="gboolean"/>
      </method>
      <method name="GetChoice" cname="g_mount_operation_get_choice">
        <return-type type="gint"/>
      </method>
      <method name="GetDomain" cname="g_mount_operation_get_domain">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPassword" cname="g_mount_operation_get_password">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPasswordSave" cname="g_mount_operation_get_password_save">
        <return-type type="GPasswordSave"/>
      </method>
      <method name="GetUsername" cname="g_mount_operation_get_username">
        <return-type type="const-gchar*"/>
      </method>
      <method name="SetAnonymous" cname="g_mount_operation_set_anonymous">
        <return-type type="void"/>
        <parameters>
          <parameter name="anonymous" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetChoice" cname="g_mount_operation_set_choice">
        <return-type type="void"/>
        <parameters>
          <parameter name="choice" type="gint"/>
        </parameters>
      </method>
      <method name="SetDomain" cname="g_mount_operation_set_domain">
        <return-type type="void"/>
        <parameters>
          <parameter name="domain" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetPassword" cname="g_mount_operation_set_password">
        <return-type type="void"/>
        <parameters>
          <parameter name="password" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetPasswordSave" cname="g_mount_operation_set_password_save">
        <return-type type="void"/>
        <parameters>
          <parameter name="save" type="GPasswordSave"/>
        </parameters>
      </method>
      <method name="SetUsername" cname="g_mount_operation_set_username">
        <return-type type="void"/>
        <parameters>
          <parameter name="username" type="const-gchar*"/>
        </parameters>
      </method>
      <property name="Anonymous" cname="anonymous" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Choice" cname="choice" type="gint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Domain" cname="domain" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Password" cname="password" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="PasswordSave" cname="password-save" type="GPasswordSave" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Username" cname="username" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GMountOperationPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Aborted" cname="aborted" when="last" field_name="aborted">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="AskPassword" cname="ask-password" when="last" field_name="ask_password">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="const-gchar*"/>
          <parameter name="default_user" type="const-gchar*"/>
          <parameter name="default_domain" type="const-gchar*"/>
          <parameter name="flags" type="GAskPasswordFlags"/>
        </parameters>
      </signal>
      <signal name="AskQuestion" cname="ask-question" when="last" field_name="ask_question">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="const-gchar*"/>
          <parameter name="choices" type="" array="true" null_term_array="true"/>
        </parameters>
      </signal>
      <signal name="Reply" cname="reply" when="last" field_name="reply">
        <return-type type="void"/>
        <parameters>
          <parameter name="_result" type="GMountOperationResult"/>
        </parameters>
      </signal>
      <signal name="ShowProcesses" cname="show-processes" when="last" field_name="show_processes">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="const-gchar*"/>
          <parameter name="processes" type="" array="true" null_term_array="true"/>
          <parameter name="choices" type="" array="true" null_term_array="true"/>
        </parameters>
      </signal>
      <signal name="ShowUnmountProgress" cname="show-unmount-progress" when="last" field_name="show_unmount_progress">
        <return-type type="void"/>
        <parameters>
          <parameter name="message" type="const-gchar*"/>
          <parameter name="time_left" type="gint64"/>
          <parameter name="bytes_left" type="gint64"/>
        </parameters>
      </signal>
    </object>
    <object name="NativeVolumeMonitor" cname="GNativeVolumeMonitor" abstract="true" opaque="false" hidden="false" parent="GVolumeMonitor">
      <class_struct cname="GNativeVolumeMonitorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GVolumeMonitorClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_mount_for_mount_path"/>
      </class_struct>
      <virtual_method name="GetMountForMountPath" cname="get_mount_for_mount_path" shared="true" hidden="true">
        <return-type type="GMount*"/>
        <parameters>
          <parameter name="mount_path" type="const-gchar*"/>
          <parameter name="cancellable" type="GCancellable*"/>
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_native_volume_monitor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GVolumeMonitor*"/>
    </object>
    <object name="NetworkAddress" cname="GNetworkAddress" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GSocketConnectable"/>
      </implements>
      <class_struct cname="GNetworkAddressClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_network_address_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_network_address_new">
        <parameters>
          <parameter name="hostname" type="const-gchar*"/>
          <parameter name="port" type="guint16"/>
        </parameters>
      </constructor>
      <method name="Parse" cname="g_network_address_parse" shared="true">
        <return-type type="GSocketConnectable*" owned="true"/>
        <parameters throws="1">
          <parameter name="host_and_port" type="const-gchar*"/>
          <parameter name="default_port" type="guint16"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ParseUri" cname="g_network_address_parse_uri" shared="true">
        <return-type type="GSocketConnectable*" owned="true"/>
        <parameters throws="1">
          <parameter name="uri" type="const-gchar*"/>
          <parameter name="default_port" type="guint16"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetHostname" cname="g_network_address_get_hostname">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPort" cname="g_network_address_get_port">
        <return-type type="guint16"/>
      </method>
      <method name="GetScheme" cname="g_network_address_get_scheme">
        <return-type type="const-gchar*"/>
      </method>
      <property name="Hostname" cname="hostname" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Port" cname="port" type="guint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Scheme" cname="scheme" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GNetworkAddressPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="NetworkService" cname="GNetworkService" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GSocketConnectable"/>
      </implements>
      <class_struct cname="GNetworkServiceClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_network_service_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_network_service_new">
        <parameters>
          <parameter name="service" type="const-gchar*"/>
          <parameter name="protocol" type="const-gchar*"/>
          <parameter name="domain" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="GetDomain" cname="g_network_service_get_domain">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetProtocol" cname="g_network_service_get_protocol">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetScheme" cname="g_network_service_get_scheme">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetService" cname="g_network_service_get_service">
        <return-type type="const-gchar*"/>
      </method>
      <method name="SetScheme" cname="g_network_service_set_scheme">
        <return-type type="void"/>
        <parameters>
          <parameter name="scheme" type="const-gchar*"/>
        </parameters>
      </method>
      <property name="Domain" cname="domain" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Protocol" cname="protocol" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Scheme" cname="scheme" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Service" cname="service" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GNetworkServicePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="OutputStream" cname="GOutputStream" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="write_fn"/>
        <method vm="splice"/>
        <method vm="flush"/>
        <method vm="close_fn"/>
        <method vm="write_async"/>
        <method vm="write_finish"/>
        <method vm="splice_async"/>
        <method vm="splice_finish"/>
        <method vm="flush_async"/>
        <method vm="flush_finish"/>
        <method vm="close_async"/>
        <method vm="close_finish"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
        <method vm="_g_reserved8"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved8" cname="_g_reserved8" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Flush" cname="flush">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FlushAsync" cname="flush_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="FlushFinish" cname="flush_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Splice" cname="splice">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="source" type="GInputStream*"/>
          <parameter name="flags" type="GOutputStreamSpliceFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SpliceAsync" cname="splice_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="source" type="GInputStream*"/>
          <parameter name="flags" type="GOutputStreamSpliceFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SpliceFinish" cname="splice_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="WriteAsync" cname="write_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="WriteFinish" cname="write_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="WriteFn" cname="write_fn">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="ClearPending" cname="g_output_stream_clear_pending">
        <return-type type="void"/>
      </method>
      <method name="Close" cname="g_output_stream_close">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_output_stream_close_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_output_stream_close_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Flush" cname="g_output_stream_flush">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="FlushAsync" cname="g_output_stream_flush_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="FlushFinish" cname="g_output_stream_flush_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="HasPending" cname="g_output_stream_has_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="IsClosed" cname="g_output_stream_is_closed">
        <return-type type="gboolean"/>
      </method>
      <method name="IsClosing" cname="g_output_stream_is_closing">
        <return-type type="gboolean"/>
      </method>
      <method name="SetPending" cname="g_output_stream_set_pending">
        <return-type type="gboolean"/>
      </method>
      <method name="Splice" cname="g_output_stream_splice">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="source" type="GInputStream*"/>
          <parameter name="flags" type="GOutputStreamSpliceFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SpliceAsync" cname="g_output_stream_splice_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="source" type="GInputStream*"/>
          <parameter name="flags" type="GOutputStreamSpliceFlags"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="SpliceFinish" cname="g_output_stream_splice_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Write" cname="g_output_stream_write">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="WriteAll" cname="g_output_stream_write_all">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter name="bytes_written" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="WriteAsync" cname="g_output_stream_write_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="buffer" type="void*" array="true" array_length_param_index="1"/>
          <parameter name="count" type="gsize"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="WriteBytes" cname="g_output_stream_write_bytes">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="bytes" type="GBytes*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="WriteBytesAsync" cname="g_output_stream_write_bytes_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="bytes" type="GBytes*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="WriteBytesFinish" cname="g_output_stream_write_bytes_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="WriteFinish" cname="g_output_stream_write_finish">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Permission" cname="GPermission" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GPermissionClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="acquire"/>
        <method vm="acquire_async"/>
        <method vm="acquire_finish"/>
        <method vm="release"/>
        <method vm="release_async"/>
        <method vm="release_finish"/>
        <field cname="reserved" access="public" writeable="false" readable="true" name="Reserved" type="gpointer" array="true" array_len="16"/>
      </class_struct>
      <method name="GetType" cname="g_permission_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Acquire" cname="acquire">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="AcquireAsync" cname="acquire_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="2" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="AcquireFinish" cname="acquire_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Release" cname="release">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReleaseAsync" cname="release_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="2" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ReleaseFinish" cname="release_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="Acquire" cname="g_permission_acquire">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AcquireAsync" cname="g_permission_acquire_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AcquireFinish" cname="g_permission_acquire_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetAllowed" cname="g_permission_get_allowed">
        <return-type type="gboolean"/>
      </method>
      <method name="GetCanAcquire" cname="g_permission_get_can_acquire">
        <return-type type="gboolean"/>
      </method>
      <method name="GetCanRelease" cname="g_permission_get_can_release">
        <return-type type="gboolean"/>
      </method>
      <method name="ImplUpdate" cname="g_permission_impl_update">
        <return-type type="void"/>
        <parameters>
          <parameter name="allowed" type="gboolean"/>
          <parameter name="can_acquire" type="gboolean"/>
          <parameter name="can_release" type="gboolean"/>
        </parameters>
      </method>
      <method name="Release" cname="g_permission_release">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReleaseAsync" cname="g_permission_release_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReleaseFinish" cname="g_permission_release_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <property name="Allowed" cname="allowed" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="CanAcquire" cname="can-acquire" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="CanRelease" cname="can-release" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GPermissionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="ProxyAddress" cname="GProxyAddress" abstract="false" opaque="false" hidden="false" parent="GInetSocketAddress">
      <implements>
        <interface cname="GSocketConnectable"/>
      </implements>
      <class_struct cname="GProxyAddressClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GInetSocketAddressClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_proxy_address_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_proxy_address_new">
        <parameters>
          <parameter name="inetaddr" type="GInetAddress*"/>
          <parameter name="port" type="guint16"/>
          <parameter name="protocol" type="const-gchar*"/>
          <parameter name="dest_hostname" type="const-gchar*"/>
          <parameter name="dest_port" type="guint16"/>
          <parameter name="username" type="const-gchar*"/>
          <parameter name="password" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="GetDestinationHostname" cname="g_proxy_address_get_destination_hostname">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetDestinationPort" cname="g_proxy_address_get_destination_port">
        <return-type type="guint16"/>
      </method>
      <method name="GetDestinationProtocol" cname="g_proxy_address_get_destination_protocol">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPassword" cname="g_proxy_address_get_password">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetProtocol" cname="g_proxy_address_get_protocol">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetUri" cname="g_proxy_address_get_uri">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetUsername" cname="g_proxy_address_get_username">
        <return-type type="const-gchar*"/>
      </method>
      <property name="DestinationHostname" cname="destination-hostname" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="DestinationPort" cname="destination-port" type="guint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="DestinationProtocol" cname="destination-protocol" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Password" cname="password" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Protocol" cname="protocol" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Uri" cname="uri" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Username" cname="username" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GInetSocketAddress*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GProxyAddressPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="ProxyAddressEnumerator" cname="GProxyAddressEnumerator" abstract="false" opaque="false" hidden="false" parent="GSocketAddressEnumerator">
      <class_struct cname="GProxyAddressEnumeratorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketAddressEnumeratorClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_proxy_address_enumerator_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <property name="Connectable" cname="connectable" type="GSocketConnectable*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Uri" cname="uri" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketAddressEnumerator*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GProxyAddressEnumeratorPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Resolver" cname="GResolver" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GResolverClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="reload"/>
        <method vm="lookup_by_name"/>
        <method vm="lookup_by_name_async"/>
        <method vm="lookup_by_name_finish"/>
        <method vm="lookup_by_address"/>
        <method vm="lookup_by_address_async"/>
        <method vm="lookup_by_address_finish"/>
        <method vm="lookup_service"/>
        <method vm="lookup_service_async"/>
        <method vm="lookup_service_finish"/>
        <method vm="lookup_records"/>
        <method vm="lookup_records_async"/>
        <method vm="lookup_records_finish"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
      </class_struct>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_resolver_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetDefault" cname="g_resolver_get_default" shared="true">
        <return-type type="GResolver*" owned="true"/>
      </method>
      <virtual_method name="LookupByAddress" cname="lookup_by_address">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="address" type="GInetAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByAddressAsync" cname="lookup_by_address_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="address" type="GInetAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByAddressFinish" cname="lookup_by_address_finish">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByName" cname="lookup_by_name">
        <return-type type="GList*" element_type="GInetAddress*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="hostname" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByNameAsync" cname="lookup_by_name_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="hostname" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByNameFinish" cname="lookup_by_name_finish">
        <return-type type="GList*" element_type="GInetAddress*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupRecords" cname="lookup_records">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="rrname" type="const-gchar*"/>
          <parameter name="record_type" type="GResolverRecordType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupRecordsAsync" cname="lookup_records_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="rrname" type="const-gchar*"/>
          <parameter name="record_type" type="GResolverRecordType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="4" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupRecordsFinish" cname="lookup_records_finish">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupService" cname="lookup_service" hidden="true">
        <return-type type="GList*" element_type="gpointer"/>
        <parameters throws="1">
          <parameter name="rrname" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupServiceAsync" cname="lookup_service_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="rrname" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupServiceFinish" cname="lookup_service_finish">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="LookupByAddress" cname="g_resolver_lookup_by_address">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="address" type="GInetAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupByAddressAsync" cname="g_resolver_lookup_by_address_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="address" type="GInetAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupByAddressFinish" cname="g_resolver_lookup_by_address_finish">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupByName" cname="g_resolver_lookup_by_name">
        <return-type type="GList*" element_type="GInetAddress*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="hostname" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupByNameAsync" cname="g_resolver_lookup_by_name_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="hostname" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupByNameFinish" cname="g_resolver_lookup_by_name_finish">
        <return-type type="GList*" element_type="GInetAddress*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupRecords" cname="g_resolver_lookup_records">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="rrname" type="const-gchar*"/>
          <parameter name="record_type" type="GResolverRecordType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupRecordsAsync" cname="g_resolver_lookup_records_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="rrname" type="const-gchar*"/>
          <parameter name="record_type" type="GResolverRecordType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupRecordsFinish" cname="g_resolver_lookup_records_finish">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupService" cname="g_resolver_lookup_service">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="service" type="const-gchar*"/>
          <parameter name="protocol" type="const-gchar*"/>
          <parameter name="domain" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupServiceAsync" cname="g_resolver_lookup_service_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="service" type="const-gchar*"/>
          <parameter name="protocol" type="const-gchar*"/>
          <parameter name="domain" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupServiceFinish" cname="g_resolver_lookup_service_finish">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetDefault" cname="g_resolver_set_default">
        <return-type type="void"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GResolverPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Reload" cname="reload" when="last" field_name="reload">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </object>
    <object name="Settings" cname="GSettings" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GSettingsClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="writable_changed"/>
        <method signal_vm="changed"/>
        <method signal_vm="writable_change_event"/>
        <method signal_vm="change_event"/>
        <field cname="padding" access="public" writeable="false" readable="true" name="Padding" type="gpointer" array="true" array_len="20"/>
      </class_struct>
      <method name="GetType" cname="g_settings_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_settings_new">
        <parameters>
          <parameter name="schema_id" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_full">
        <parameters>
          <parameter name="schema" type="GSettingsSchema*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="backend" type="GSettingsBackend*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_with_backend">
        <parameters>
          <parameter name="schema_id" type="const-gchar*"/>
          <parameter name="backend" type="GSettingsBackend*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_with_backend_and_path">
        <parameters>
          <parameter name="schema_id" type="const-gchar*"/>
          <parameter name="backend" type="GSettingsBackend*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_with_path">
        <parameters>
          <parameter name="schema_id" type="const-gchar*"/>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="ListRelocatableSchemas" cname="g_settings_list_relocatable_schemas" shared="true">
        <return-type type="const gchar* const*" array="true" null_term_array="true"/>
      </method>
      <method name="ListSchemas" cname="g_settings_list_schemas" shared="true">
        <return-type type="const gchar* const*" array="true" null_term_array="true"/>
      </method>
      <method name="Sync" cname="g_settings_sync" shared="true">
        <return-type type="void"/>
      </method>
      <method name="Unbind" cname="g_settings_unbind" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="gpointer"/>
          <parameter name="property" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Apply" cname="g_settings_apply">
        <return-type type="void"/>
      </method>
      <method name="Bind" cname="g_settings_bind">
        <return-type type="void"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="_object" type="GObject*"/>
          <parameter name="property" type="const-gchar*"/>
          <parameter name="flags" type="GSettingsBindFlags"/>
        </parameters>
      </method>
      <method name="BindWritable" cname="g_settings_bind_writable">
        <return-type type="void"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="_object" type="GObject*"/>
          <parameter name="property" type="const-gchar*"/>
          <parameter name="inverted" type="gboolean"/>
        </parameters>
      </method>
      <method name="CreateAction" cname="g_settings_create_action">
        <return-type type="GAction*" owned="true"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Delay" cname="g_settings_delay">
        <return-type type="void"/>
      </method>
      <method name="GetBoolean" cname="g_settings_get_boolean">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetChild" cname="g_settings_get_child">
        <return-type type="GSettings*" owned="true"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetDouble" cname="g_settings_get_double">
        <return-type type="gdouble"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetEnum" cname="g_settings_get_enum">
        <return-type type="gint"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetFlags" cname="g_settings_get_flags">
        <return-type type="guint"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetHasUnapplied" cname="g_settings_get_has_unapplied">
        <return-type type="gboolean"/>
      </method>
      <method name="GetInt" cname="g_settings_get_int">
        <return-type type="gint"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetMapped" cname="g_settings_get_mapped">
        <return-type type="gpointer*" owned="true"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter closure="2" scope="call" name="mapping" type="GSettingsGetMapping"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="GetRange" cname="g_settings_get_range">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetString" cname="g_settings_get_string">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetStrv" cname="g_settings_get_strv">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetUint" cname="g_settings_get_uint">
        <return-type type="guint"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetValue" cname="g_settings_get_value">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="IsWritable" cname="g_settings_is_writable">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ListChildren" cname="g_settings_list_children">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="ListKeys" cname="g_settings_list_keys">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="RangeCheck" cname="g_settings_range_check">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="Reset" cname="g_settings_reset">
        <return-type type="void"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Revert" cname="g_settings_revert">
        <return-type type="void"/>
      </method>
      <method name="SetBoolean" cname="g_settings_set_boolean">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetDouble" cname="g_settings_set_double">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="gdouble"/>
        </parameters>
      </method>
      <method name="SetEnum" cname="g_settings_set_enum">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="gint"/>
        </parameters>
      </method>
      <method name="SetFlags" cname="g_settings_set_flags">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="guint"/>
        </parameters>
      </method>
      <method name="SetInt" cname="g_settings_set_int">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="gint"/>
        </parameters>
      </method>
      <method name="SetString" cname="g_settings_set_string">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetStrv" cname="g_settings_set_strv">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter allow-none="1" name="value" type="const-gchar**" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="SetUint" cname="g_settings_set_uint">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="guint"/>
        </parameters>
      </method>
      <method name="SetValue" cname="g_settings_set_value">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <property name="DelayApply" cname="delay-apply" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="HasUnapplied" cname="has-unapplied" type="gboolean" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Path" cname="path" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Schema" cname="schema" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="SchemaId" cname="schema-id" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="SettingsSchema" cname="settings-schema" type="GSettingsSchema*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSettingsPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="ChangeEvent" cname="change-event" when="last" field_name="change_event">
        <return-type type="gboolean"/>
        <parameters>
          <parameter allow-none="1" name="keys" type="" array="true" array_length_param_index="1"/>
          <parameter name="n_keys" type="gint"/>
        </parameters>
      </signal>
      <signal name="Changed" cname="changed" when="last" field_name="changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="WritableChangeEvent" cname="writable-change-event" when="last" field_name="writable_change_event">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="key" type="guint"/>
        </parameters>
      </signal>
      <signal name="WritableChanged" cname="writable-changed" when="last" field_name="writable_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="key" type="const-gchar*"/>
        </parameters>
      </signal>
    </object>
    <object name="SimpleAction" cname="GSimpleAction" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GAction"/>
      </implements>
      <method name="GetType" cname="g_simple_action_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_simple_action_new">
        <parameters>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="parameter_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <constructor cname="g_simple_action_new_stateful">
        <parameters>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="parameter_type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="state" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <method name="SetEnabled" cname="g_simple_action_set_enabled">
        <return-type type="void"/>
        <parameters>
          <parameter name="enabled" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetState" cname="g_simple_action_set_state">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <property name="Enabled" cname="enabled" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="ParameterType" cname="parameter-type" type="GVariantType*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="State" cname="state" type="GVariant*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="StateType" cname="state-type" type="GVariantType*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <signal name="Activate" cname="activate" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="parameter" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
      <signal name="ChangeState" cname="change-state" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
    </object>
    <object name="SimpleActionGroup" cname="GSimpleActionGroup" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GActionGroup"/>
        <interface cname="GActionMap"/>
      </implements>
      <class_struct cname="GSimpleActionGroupClass">
        <field cname="parent_class" access="private" writeable="false" readable="false" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="12"/>
      </class_struct>
      <method name="GetType" cname="g_simple_action_group_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_simple_action_group_new" disable_void_ctor=""/>
      <method name="AddEntries" cname="g_simple_action_group_add_entries">
        <return-type type="void"/>
        <parameters>
          <parameter name="entries" type="GActionEntry*" array="true" array_length_param_index="1"/>
          <parameter name="n_entries" type="gint"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="Insert" cname="g_simple_action_group_insert">
        <return-type type="void"/>
        <parameters>
          <parameter name="action" type="GAction*"/>
        </parameters>
      </method>
      <method name="Lookup" cname="g_simple_action_group_lookup">
        <return-type type="GAction*"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Remove" cname="g_simple_action_group_remove">
        <return-type type="void"/>
        <parameters>
          <parameter name="action_name" type="const-gchar*"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GSimpleActionGroupPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="SimpleAsyncResult" cname="GSimpleAsyncResult" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GAsyncResult"/>
      </implements>
      <class_struct cname="GSimpleAsyncResultClass"/>
      <method name="GetType" cname="g_simple_async_result_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_simple_async_result_new">
        <parameters>
          <parameter name="source_object" type="GObject*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="source_tag" type="gpointer"/>
        </parameters>
      </constructor>
      <constructor cname="g_simple_async_result_new_from_error">
        <parameters>
          <parameter name="source_object" type="GObject*"/>
          <parameter name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <method name="IsValid" cname="g_simple_async_result_is_valid" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="source" type="GObject*"/>
          <parameter name="source_tag" type="gpointer"/>
        </parameters>
      </method>
      <method name="Complete" cname="g_simple_async_result_complete">
        <return-type type="void"/>
      </method>
      <method name="CompleteInIdle" cname="g_simple_async_result_complete_in_idle">
        <return-type type="void"/>
      </method>
      <method name="GetOpResGboolean" cname="g_simple_async_result_get_op_res_gboolean">
        <return-type type="gboolean"/>
      </method>
      <method name="GetOpResGssize" cname="g_simple_async_result_get_op_res_gssize">
        <return-type type="gssize"/>
      </method>
      <method name="PropagateError" cname="g_simple_async_result_propagate_error">
        <return-type type="gboolean"/>
      </method>
      <method name="SetCheckCancellable" cname="g_simple_async_result_set_check_cancellable">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="check_cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="SetFromError" cname="g_simple_async_result_set_from_error">
        <return-type type="void"/>
        <parameters>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SetHandleCancellation" cname="g_simple_async_result_set_handle_cancellation">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle_cancellation" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetOpResGboolean" cname="g_simple_async_result_set_op_res_gboolean">
        <return-type type="void"/>
        <parameters>
          <parameter name="op_res" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetOpResGssize" cname="g_simple_async_result_set_op_res_gssize">
        <return-type type="void"/>
        <parameters>
          <parameter name="op_res" type="gssize"/>
        </parameters>
      </method>
    </object>
    <object name="SimplePermission" cname="GSimplePermission" abstract="false" opaque="false" hidden="false" parent="GPermission">
      <method name="GetType" cname="g_simple_permission_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_simple_permission_new">
        <parameters>
          <parameter name="allowed" type="gboolean"/>
        </parameters>
      </constructor>
    </object>
    <object name="Socket" cname="GSocket" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GInitable"/>
      </implements>
      <class_struct cname="GSocketClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
        <method vm="_g_reserved8"/>
        <method vm="_g_reserved9"/>
        <method vm="_g_reserved10"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved8" cname="_g_reserved8" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved9" cname="_g_reserved9" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved10" cname="_g_reserved10" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_socket_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_socket_new">
        <parameters>
          <parameter name="family" type="GSocketFamily"/>
          <parameter name="type" type="GSocketType"/>
          <parameter name="protocol" type="GSocketProtocol"/>
        </parameters>
      </constructor>
      <constructor cname="g_socket_new_from_fd">
        <parameters>
          <parameter name="fd" type="gint"/>
        </parameters>
      </constructor>
      <method name="Accept" cname="g_socket_accept">
        <return-type type="GSocket*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Bind" cname="g_socket_bind">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="address" type="GSocketAddress*"/>
          <parameter name="allow_reuse" type="gboolean"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="CheckConnectResult" cname="g_socket_check_connect_result">
        <return-type type="gboolean"/>
      </method>
      <method name="Close" cname="g_socket_close">
        <return-type type="gboolean"/>
      </method>
      <method name="ConditionCheck" cname="g_socket_condition_check">
        <return-type type="GIOCondition"/>
        <parameters>
          <parameter name="condition" type="GIOCondition"/>
        </parameters>
      </method>
      <method name="ConditionTimedWait" cname="g_socket_condition_timed_wait">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="condition" type="GIOCondition"/>
          <parameter name="timeout" type="gint64"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConditionWait" cname="g_socket_condition_wait">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="condition" type="GIOCondition"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Connect" cname="g_socket_connect">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="address" type="GSocketAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectionFactoryCreateConnection" cname="g_socket_connection_factory_create_connection">
        <return-type type="GSocketConnection*" owned="true"/>
      </method>
      <method name="GetAvailableBytes" cname="g_socket_get_available_bytes">
        <return-type type="gssize"/>
      </method>
      <method name="GetBlocking" cname="g_socket_get_blocking">
        <return-type type="gboolean"/>
      </method>
      <method name="GetBroadcast" cname="g_socket_get_broadcast">
        <return-type type="gboolean"/>
      </method>
      <method name="GetCredentials" cname="g_socket_get_credentials">
        <return-type type="GCredentials*" owned="true"/>
      </method>
      <method name="GetFamily" cname="g_socket_get_family">
        <return-type type="GSocketFamily"/>
      </method>
      <method name="GetFd" cname="g_socket_get_fd">
        <return-type type="gint"/>
      </method>
      <method name="GetKeepalive" cname="g_socket_get_keepalive">
        <return-type type="gboolean"/>
      </method>
      <method name="GetListenBacklog" cname="g_socket_get_listen_backlog">
        <return-type type="gint"/>
      </method>
      <method name="GetLocalAddress" cname="g_socket_get_local_address">
        <return-type type="GSocketAddress*" owned="true"/>
      </method>
      <method name="GetMulticastLoopback" cname="g_socket_get_multicast_loopback">
        <return-type type="gboolean"/>
      </method>
      <method name="GetMulticastTtl" cname="g_socket_get_multicast_ttl">
        <return-type type="guint"/>
      </method>
      <method name="GetProtocol" cname="g_socket_get_protocol">
        <return-type type="GSocketProtocol"/>
      </method>
      <method name="GetRemoteAddress" cname="g_socket_get_remote_address">
        <return-type type="GSocketAddress*" owned="true"/>
      </method>
      <method name="GetSocketType" cname="g_socket_get_socket_type">
        <return-type type="GSocketType"/>
      </method>
      <method name="GetTimeout" cname="g_socket_get_timeout">
        <return-type type="guint"/>
      </method>
      <method name="GetTtl" cname="g_socket_get_ttl">
        <return-type type="guint"/>
      </method>
      <method name="IsClosed" cname="g_socket_is_closed">
        <return-type type="gboolean"/>
      </method>
      <method name="IsConnected" cname="g_socket_is_connected">
        <return-type type="gboolean"/>
      </method>
      <method name="JoinMulticastGroup" cname="g_socket_join_multicast_group">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="group" type="GInetAddress*"/>
          <parameter name="source_specific" type="gboolean"/>
          <parameter allow-none="1" name="iface" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LeaveMulticastGroup" cname="g_socket_leave_multicast_group">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="group" type="GInetAddress*"/>
          <parameter name="source_specific" type="gboolean"/>
          <parameter allow-none="1" name="iface" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Listen" cname="g_socket_listen">
        <return-type type="gboolean"/>
      </method>
      <method name="Receive" cname="g_socket_receive">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="const-gchar*"/>
          <parameter name="size" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReceiveFrom" cname="g_socket_receive_from">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter allow-none="1" name="address" type="GSocketAddress*" owned="true" pass_as="out"/>
          <parameter name="buffer" type="const-gchar*" array="true" array_length_param_index="2"/>
          <parameter name="size" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReceiveMessage" cname="g_socket_receive_message">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter allow-none="1" name="address" type="GSocketAddress*" owned="true" pass_as="out"/>
          <parameter name="vectors" type="GInputVector*" array="true" array_length_param_index="2"/>
          <parameter name="num_vectors" type="gint"/>
          <parameter allow-none="1" name="messages" type="GSocketControlMessage***" array="true" array_length_param_index="4"/>
          <parameter name="num_messages" type="gint"/>
          <parameter name="flags" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReceiveWithBlocking" cname="g_socket_receive_with_blocking">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="const-gchar*"/>
          <parameter name="size" type="gsize"/>
          <parameter name="blocking" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Send" cname="g_socket_send">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="const-gchar*" array="true" array_length_param_index="1"/>
          <parameter name="size" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendMessage" cname="g_socket_send_message">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter allow-none="1" name="address" type="GSocketAddress*"/>
          <parameter name="vectors" type="GOutputVector*" array="true" array_length_param_index="2"/>
          <parameter name="num_vectors" type="gint"/>
          <parameter allow-none="1" name="messages" type="GSocketControlMessage**" array="true" array_length_param_index="4"/>
          <parameter name="num_messages" type="gint"/>
          <parameter name="flags" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendTo" cname="g_socket_send_to">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter allow-none="1" name="address" type="GSocketAddress*"/>
          <parameter name="buffer" type="const-gchar*" array="true" array_length_param_index="2"/>
          <parameter name="size" type="gsize"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendWithBlocking" cname="g_socket_send_with_blocking">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="buffer" type="const-gchar*" array="true" array_length_param_index="1"/>
          <parameter name="size" type="gsize"/>
          <parameter name="blocking" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetBlocking" cname="g_socket_set_blocking">
        <return-type type="void"/>
        <parameters>
          <parameter name="blocking" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetBroadcast" cname="g_socket_set_broadcast">
        <return-type type="void"/>
        <parameters>
          <parameter name="broadcast" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetKeepalive" cname="g_socket_set_keepalive">
        <return-type type="void"/>
        <parameters>
          <parameter name="keepalive" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetListenBacklog" cname="g_socket_set_listen_backlog">
        <return-type type="void"/>
        <parameters>
          <parameter name="backlog" type="gint"/>
        </parameters>
      </method>
      <method name="SetMulticastLoopback" cname="g_socket_set_multicast_loopback">
        <return-type type="void"/>
        <parameters>
          <parameter name="loopback" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetMulticastTtl" cname="g_socket_set_multicast_ttl">
        <return-type type="void"/>
        <parameters>
          <parameter name="ttl" type="guint"/>
        </parameters>
      </method>
      <method name="SetTimeout" cname="g_socket_set_timeout">
        <return-type type="void"/>
        <parameters>
          <parameter name="timeout" type="guint"/>
        </parameters>
      </method>
      <method name="SetTtl" cname="g_socket_set_ttl">
        <return-type type="void"/>
        <parameters>
          <parameter name="ttl" type="guint"/>
        </parameters>
      </method>
      <method name="Shutdown" cname="g_socket_shutdown">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="shutdown_read" type="gboolean"/>
          <parameter name="shutdown_write" type="gboolean"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SpeaksIpv4" cname="g_socket_speaks_ipv4">
        <return-type type="gboolean"/>
      </method>
      <property name="Blocking" cname="blocking" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Broadcast" cname="broadcast" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Fd" cname="fd" type="gint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Keepalive" cname="keepalive" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="ListenBacklog" cname="listen-backlog" type="gint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="LocalAddress" cname="local-address" type="GSocketAddress*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="MulticastLoopback" cname="multicast-loopback" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="MulticastTtl" cname="multicast-ttl" type="guint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Protocol" cname="protocol" type="GSocketProtocol" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="RemoteAddress" cname="remote-address" type="GSocketAddress*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Timeout" cname="timeout" type="guint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Ttl" cname="ttl" type="guint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Type" cname="type" type="GSocketType" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSocketPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="SocketAddress" cname="GSocketAddress" abstract="true" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GSocketConnectable"/>
      </implements>
      <class_struct cname="GSocketAddressClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_family"/>
        <method vm="get_native_size"/>
        <method vm="to_native"/>
      </class_struct>
      <method name="GetType" cname="g_socket_address_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_socket_address_new_from_native">
        <parameters>
          <parameter name="native" type="gpointer"/>
          <parameter name="len" type="gsize"/>
        </parameters>
      </constructor>
      <virtual_method name="GetFamily" cname="get_family">
        <return-type type="GSocketFamily"/>
      </virtual_method>
      <virtual_method name="GetNativeSize" cname="get_native_size">
        <return-type type="gssize"/>
      </virtual_method>
      <virtual_method name="ToNative" cname="to_native">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="dest" type="gpointer"/>
          <parameter name="destlen" type="gsize"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="GetFamily" cname="g_socket_address_get_family">
        <return-type type="GSocketFamily"/>
      </method>
      <method name="GetNativeSize" cname="g_socket_address_get_native_size">
        <return-type type="gssize"/>
      </method>
      <method name="ToNative" cname="g_socket_address_to_native">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="dest" type="gpointer"/>
          <parameter name="destlen" type="gsize"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="false" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
    </object>
    <object name="SocketAddressEnumerator" cname="GSocketAddressEnumerator" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GSocketAddressEnumeratorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="next"/>
        <method vm="next_async"/>
        <method vm="next_finish"/>
      </class_struct>
      <method name="GetType" cname="g_socket_address_enumerator_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Next" cname="next">
        <return-type type="GSocketAddress*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="NextAsync" cname="next_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="2" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="NextFinish" cname="next_finish">
        <return-type type="GSocketAddress*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="Next" cname="g_socket_address_enumerator_next">
        <return-type type="GSocketAddress*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="NextAsync" cname="g_socket_address_enumerator_next_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="NextFinish" cname="g_socket_address_enumerator_next_finish">
        <return-type type="GSocketAddress*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
    </object>
    <object name="SocketClient" cname="GSocketClient" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GSocketClientClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="event"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_socket_client_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_socket_client_new" disable_void_ctor=""/>
      <method name="AddApplicationProxy" cname="g_socket_client_add_application_proxy">
        <return-type type="void"/>
        <parameters>
          <parameter name="protocol" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Connect" cname="g_socket_client_connect">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectAsync" cname="g_socket_client_connect_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ConnectFinish" cname="g_socket_client_connect_finish">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectToHost" cname="g_socket_client_connect_to_host">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="host_and_port" type="const-gchar*"/>
          <parameter name="default_port" type="guint16"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectToHostAsync" cname="g_socket_client_connect_to_host_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="host_and_port" type="const-gchar*"/>
          <parameter name="default_port" type="guint16"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ConnectToHostFinish" cname="g_socket_client_connect_to_host_finish">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectToService" cname="g_socket_client_connect_to_service">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="domain" type="const-gchar*"/>
          <parameter name="service" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectToServiceAsync" cname="g_socket_client_connect_to_service_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="domain" type="const-gchar*"/>
          <parameter name="service" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ConnectToServiceFinish" cname="g_socket_client_connect_to_service_finish">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectToUri" cname="g_socket_client_connect_to_uri">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="uri" type="const-gchar*"/>
          <parameter name="default_port" type="guint16"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectToUriAsync" cname="g_socket_client_connect_to_uri_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
          <parameter name="default_port" type="guint16"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="4" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ConnectToUriFinish" cname="g_socket_client_connect_to_uri_finish">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetEnableProxy" cname="g_socket_client_get_enable_proxy">
        <return-type type="gboolean"/>
      </method>
      <method name="GetFamily" cname="g_socket_client_get_family">
        <return-type type="GSocketFamily"/>
      </method>
      <method name="GetLocalAddress" cname="g_socket_client_get_local_address">
        <return-type type="GSocketAddress*"/>
      </method>
      <method name="GetProtocol" cname="g_socket_client_get_protocol">
        <return-type type="GSocketProtocol"/>
      </method>
      <method name="GetSocketType" cname="g_socket_client_get_socket_type">
        <return-type type="GSocketType"/>
      </method>
      <method name="GetTimeout" cname="g_socket_client_get_timeout">
        <return-type type="guint"/>
      </method>
      <method name="GetTls" cname="g_socket_client_get_tls">
        <return-type type="gboolean"/>
      </method>
      <method name="GetTlsValidationFlags" cname="g_socket_client_get_tls_validation_flags">
        <return-type type="GTlsCertificateFlags"/>
      </method>
      <method name="SetEnableProxy" cname="g_socket_client_set_enable_proxy">
        <return-type type="void"/>
        <parameters>
          <parameter name="enable" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetFamily" cname="g_socket_client_set_family">
        <return-type type="void"/>
        <parameters>
          <parameter name="family" type="GSocketFamily"/>
        </parameters>
      </method>
      <method name="SetLocalAddress" cname="g_socket_client_set_local_address">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="address" type="GSocketAddress*"/>
        </parameters>
      </method>
      <method name="SetProtocol" cname="g_socket_client_set_protocol">
        <return-type type="void"/>
        <parameters>
          <parameter name="protocol" type="GSocketProtocol"/>
        </parameters>
      </method>
      <method name="SetSocketType" cname="g_socket_client_set_socket_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="type" type="GSocketType"/>
        </parameters>
      </method>
      <method name="SetTimeout" cname="g_socket_client_set_timeout">
        <return-type type="void"/>
        <parameters>
          <parameter name="timeout" type="guint"/>
        </parameters>
      </method>
      <method name="SetTls" cname="g_socket_client_set_tls">
        <return-type type="void"/>
        <parameters>
          <parameter name="tls" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetTlsValidationFlags" cname="g_socket_client_set_tls_validation_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GTlsCertificateFlags"/>
        </parameters>
      </method>
      <property name="EnableProxy" cname="enable-proxy" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="LocalAddress" cname="local-address" type="GSocketAddress*" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Protocol" cname="protocol" type="GSocketProtocol" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Timeout" cname="timeout" type="guint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Tls" cname="tls" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="TlsValidationFlags" cname="tls-validation-flags" type="GTlsCertificateFlags" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Type" cname="type" type="GSocketType" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSocketClientPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Event" cname="event" when="last" field_name="event">
        <return-type type="void"/>
        <parameters>
          <parameter name="event" type="GSocketClientEvent"/>
          <parameter name="connectable" type="GSocketConnectable*"/>
          <parameter name="connection" type="GIOStream*"/>
        </parameters>
      </signal>
    </object>
    <object name="SocketConnection" cname="GSocketConnection" abstract="false" opaque="false" hidden="false" parent="GIOStream">
      <class_struct cname="GSocketConnectionClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GIOStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_socket_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="FactoryLookupType" cname="g_socket_connection_factory_lookup_type" shared="true">
        <return-type type="GType"/>
        <parameters>
          <parameter name="family" type="GSocketFamily"/>
          <parameter name="type" type="GSocketType"/>
          <parameter name="protocol_id" type="gint"/>
        </parameters>
      </method>
      <method name="FactoryRegisterType" cname="g_socket_connection_factory_register_type" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="g_type" type="GType"/>
          <parameter name="family" type="GSocketFamily"/>
          <parameter name="type" type="GSocketType"/>
          <parameter name="protocol" type="gint"/>
        </parameters>
      </method>
      <method name="Connect" cname="g_socket_connection_connect">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="address" type="GSocketAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ConnectAsync" cname="g_socket_connection_connect_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="address" type="GSocketAddress*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ConnectFinish" cname="g_socket_connection_connect_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetLocalAddress" cname="g_socket_connection_get_local_address">
        <return-type type="GSocketAddress*" owned="true"/>
      </method>
      <method name="GetRemoteAddress" cname="g_socket_connection_get_remote_address">
        <return-type type="GSocketAddress*" owned="true"/>
      </method>
      <method name="GetSocket" cname="g_socket_connection_get_socket">
        <return-type type="GSocket*"/>
      </method>
      <method name="IsConnected" cname="g_socket_connection_is_connected">
        <return-type type="gboolean"/>
      </method>
      <property name="Socket" cname="socket" type="GSocket*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GIOStream*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSocketConnectionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="SocketControlMessage" cname="GSocketControlMessage" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GSocketControlMessageClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_size"/>
        <method vm="get_level"/>
        <method vm="get_type"/>
        <method vm="serialize"/>
        <method vm="deserialize"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="Deserialize" cname="deserialize" shared="true" hidden="true">
        <return-type type="GSocketControlMessage*"/>
        <parameters>
          <parameter name="level" type="gint"/>
          <parameter name="type" type="gint"/>
          <parameter name="size" type="gsize"/>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_socket_control_message_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Deserialize" cname="g_socket_control_message_deserialize" shared="true">
        <return-type type="GSocketControlMessage*" owned="true"/>
        <parameters>
          <parameter name="level" type="gint"/>
          <parameter name="type" type="gint"/>
          <parameter name="size" type="gsize"/>
          <parameter name="data" type="gpointer" array="true" array_length_param_index="2"/>
        </parameters>
      </method>
      <virtual_method name="GetLevel" cname="get_level">
        <return-type type="gint"/>
      </virtual_method>
      <virtual_method name="GetSize" cname="get_size">
        <return-type type="gsize"/>
      </virtual_method>
      <virtual_method name="GetType" cname="get_type">
        <return-type type="gint"/>
      </virtual_method>
      <virtual_method name="Serialize" cname="serialize">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <method name="GetLevel" cname="g_socket_control_message_get_level">
        <return-type type="gint"/>
      </method>
      <method name="GetMsgType" cname="g_socket_control_message_get_msg_type">
        <return-type type="gint"/>
      </method>
      <method name="GetSize" cname="g_socket_control_message_get_size">
        <return-type type="gsize"/>
      </method>
      <method name="Serialize" cname="g_socket_control_message_serialize">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="gpointer"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSocketControlMessagePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="SocketListener" cname="GSocketListener" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GSocketListenerClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="changed"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_socket_listener_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_socket_listener_new" disable_void_ctor=""/>
      <virtual_method name="Changed" cname="changed">
        <return-type type="void"/>
      </virtual_method>
      <method name="Accept" cname="g_socket_listener_accept">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="source_object" type="GObject*" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AcceptAsync" cname="g_socket_listener_accept_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AcceptFinish" cname="g_socket_listener_accept_finish">
        <return-type type="GSocketConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter allow-none="1" name="source_object" type="GObject*" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AcceptSocket" cname="g_socket_listener_accept_socket">
        <return-type type="GSocket*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="source_object" type="GObject*" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AcceptSocketAsync" cname="g_socket_listener_accept_socket_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AcceptSocketFinish" cname="g_socket_listener_accept_socket_finish">
        <return-type type="GSocket*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter allow-none="1" name="source_object" type="GObject*" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AddAddress" cname="g_socket_listener_add_address">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="address" type="GSocketAddress*"/>
          <parameter name="type" type="GSocketType"/>
          <parameter name="protocol" type="GSocketProtocol"/>
          <parameter allow-none="1" name="source_object" type="GObject*"/>
          <parameter allow-none="1" name="effective_address" type="GSocketAddress*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AddAnyInetPort" cname="g_socket_listener_add_any_inet_port">
        <return-type type="guint16"/>
        <parameters throws="1">
          <parameter allow-none="1" name="source_object" type="GObject*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AddInetPort" cname="g_socket_listener_add_inet_port">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="port" type="guint16"/>
          <parameter allow-none="1" name="source_object" type="GObject*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AddSocket" cname="g_socket_listener_add_socket">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="socket" type="GSocket*"/>
          <parameter allow-none="1" name="source_object" type="GObject*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Close" cname="g_socket_listener_close">
        <return-type type="void"/>
      </method>
      <method name="SetBacklog" cname="g_socket_listener_set_backlog">
        <return-type type="void"/>
        <parameters>
          <parameter name="listen_backlog" type="gint"/>
        </parameters>
      </method>
      <property name="ListenBacklog" cname="listen-backlog" type="gint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSocketListenerPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="SocketService" cname="GSocketService" abstract="false" opaque="false" hidden="false" parent="GSocketListener">
      <class_struct cname="GSocketServiceClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketListenerClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="incoming"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_socket_service_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_socket_service_new" disable_void_ctor=""/>
      <method name="IsActive" cname="g_socket_service_is_active">
        <return-type type="gboolean"/>
      </method>
      <method name="Start" cname="g_socket_service_start">
        <return-type type="void"/>
      </method>
      <method name="Stop" cname="g_socket_service_stop">
        <return-type type="void"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketListener*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GSocketServicePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Incoming" cname="incoming" when="last" field_name="incoming">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="connection" type="GSocketConnection*"/>
          <parameter allow-none="1" name="source_object" type="GObject*"/>
        </parameters>
      </signal>
    </object>
    <object name="TcpConnection" cname="GTcpConnection" abstract="false" opaque="false" hidden="false" parent="GSocketConnection">
      <class_struct cname="GTcpConnectionClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketConnectionClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_tcp_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetGracefulDisconnect" cname="g_tcp_connection_get_graceful_disconnect">
        <return-type type="gboolean"/>
      </method>
      <method name="SetGracefulDisconnect" cname="g_tcp_connection_set_graceful_disconnect">
        <return-type type="void"/>
        <parameters>
          <parameter name="graceful_disconnect" type="gboolean"/>
        </parameters>
      </method>
      <property name="GracefulDisconnect" cname="graceful-disconnect" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketConnection*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GTcpConnectionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="TcpWrapperConnection" cname="GTcpWrapperConnection" abstract="false" opaque="false" hidden="false" parent="GTcpConnection">
      <class_struct cname="GTcpWrapperConnectionClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GTcpConnectionClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_tcp_wrapper_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_tcp_wrapper_connection_new">
        <parameters>
          <parameter name="base_io_stream" type="GIOStream*"/>
          <parameter name="socket" type="GSocket*"/>
        </parameters>
      </constructor>
      <method name="GetBaseIoStream" cname="g_tcp_wrapper_connection_get_base_io_stream">
        <return-type type="GIOStream*"/>
      </method>
      <property name="BaseIoStream" cname="base-io-stream" type="GIOStream*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GTcpConnection*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GTcpWrapperConnectionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="TestDBus" cname="GTestDBus" abstract="false" opaque="false" hidden="false" parent="GObject">
      <method name="GetType" cname="g_test_dbus_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_test_dbus_new">
        <parameters>
          <parameter name="flags" type="GTestDBusFlags"/>
        </parameters>
      </constructor>
      <method name="Unset" cname="g_test_dbus_unset" shared="true">
        <return-type type="void"/>
      </method>
      <method name="AddServiceDir" cname="g_test_dbus_add_service_dir">
        <return-type type="void"/>
        <parameters>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Down" cname="g_test_dbus_down">
        <return-type type="void"/>
      </method>
      <method name="GetBusAddress" cname="g_test_dbus_get_bus_address">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFlags" cname="g_test_dbus_get_flags">
        <return-type type="GTestDBusFlags"/>
      </method>
      <method name="Stop" cname="g_test_dbus_stop">
        <return-type type="void"/>
      </method>
      <method name="Up" cname="g_test_dbus_up">
        <return-type type="void"/>
      </method>
      <property name="Flags" cname="flags" type="GTestDBusFlags" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <object name="ThemedIcon" cname="GThemedIcon" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GIcon"/>
      </implements>
      <class_struct cname="GThemedIconClass"/>
      <method name="GetType" cname="g_themed_icon_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_themed_icon_new">
        <parameters>
          <parameter name="iconname" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_themed_icon_new_from_names">
        <parameters>
          <parameter name="iconnames" type="char**" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gint"/>
        </parameters>
      </constructor>
      <constructor cname="g_themed_icon_new_with_default_fallbacks">
        <parameters>
          <parameter name="iconname" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="AppendName" cname="g_themed_icon_append_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="iconname" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetNames" cname="g_themed_icon_get_names">
        <return-type type="const gchar* const*" array="true" null_term_array="true"/>
      </method>
      <method name="PrependName" cname="g_themed_icon_prepend_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="iconname" type="const-gchar*"/>
        </parameters>
      </method>
      <property name="Name" cname="name" type="gchar*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <property name="UseDefaultFallbacks" cname="use-default-fallbacks" type="gboolean" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <object name="ThreadedSocketService" cname="GThreadedSocketService" abstract="false" opaque="false" hidden="false" parent="GSocketService">
      <class_struct cname="GThreadedSocketServiceClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketServiceClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="run"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_threaded_socket_service_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_threaded_socket_service_new">
        <parameters>
          <parameter name="max_threads" type="gint"/>
        </parameters>
      </constructor>
      <property name="MaxThreads" cname="max-threads" type="gint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketService*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GThreadedSocketServicePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="Run" cname="run" when="last" field_name="run">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="connection" type="GSocketConnection*"/>
          <parameter name="source_object" type="GObject*"/>
        </parameters>
      </signal>
    </object>
    <object name="TlsCertificate" cname="GTlsCertificate" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GTlsCertificateClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="verify"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_tls_certificate_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_tls_certificate_new_from_file">
        <parameters>
          <parameter name="file" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_tls_certificate_new_from_files">
        <parameters>
          <parameter name="cert_file" type="const-gchar*"/>
          <parameter name="key_file" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_tls_certificate_new_from_pem">
        <parameters>
          <parameter name="data" type="const-gchar*"/>
          <parameter name="length" type="gssize"/>
        </parameters>
      </constructor>
      <method name="ListNewFromFile" cname="g_tls_certificate_list_new_from_file" shared="true">
        <return-type type="GList*" element_type="GTlsCertificate*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="file" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <virtual_method name="Verify" cname="verify">
        <return-type type="GTlsCertificateFlags"/>
        <parameters>
          <parameter allow-none="1" name="identity" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="trusted_ca" type="GTlsCertificate*"/>
        </parameters>
      </virtual_method>
      <method name="GetIssuer" cname="g_tls_certificate_get_issuer">
        <return-type type="GTlsCertificate*"/>
      </method>
      <method name="IsSame" cname="g_tls_certificate_is_same">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="cert_two" type="GTlsCertificate*"/>
        </parameters>
      </method>
      <method name="Verify" cname="g_tls_certificate_verify">
        <return-type type="GTlsCertificateFlags"/>
        <parameters>
          <parameter allow-none="1" name="identity" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="trusted_ca" type="GTlsCertificate*"/>
        </parameters>
      </method>
      <property name="CertificatePem" cname="certificate-pem" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Issuer" cname="issuer" type="GTlsCertificate*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="PrivateKeyPem" cname="private-key-pem" type="gchar*" readable="false" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GTlsCertificatePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="TlsConnection" cname="GTlsConnection" abstract="true" opaque="false" hidden="false" parent="GIOStream">
      <class_struct cname="GTlsConnectionClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GIOStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="accept_certificate"/>
        <method vm="handshake"/>
        <method vm="handshake_async"/>
        <method vm="handshake_finish"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
      </class_struct>
      <method name="GetType" cname="g_tls_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="Handshake" cname="handshake">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="HandshakeAsync" cname="handshake_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="HandshakeFinish" cname="handshake_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="EmitAcceptCertificate" cname="g_tls_connection_emit_accept_certificate">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="peer_cert" type="GTlsCertificate*"/>
          <parameter name="errors" type="GTlsCertificateFlags"/>
        </parameters>
      </method>
      <method name="GetCertificate" cname="g_tls_connection_get_certificate">
        <return-type type="GTlsCertificate*"/>
      </method>
      <method name="GetDatabase" cname="g_tls_connection_get_database">
        <return-type type="GTlsDatabase*"/>
      </method>
      <method name="GetInteraction" cname="g_tls_connection_get_interaction">
        <return-type type="GTlsInteraction*"/>
      </method>
      <method name="GetPeerCertificate" cname="g_tls_connection_get_peer_certificate">
        <return-type type="GTlsCertificate*"/>
      </method>
      <method name="GetPeerCertificateErrors" cname="g_tls_connection_get_peer_certificate_errors">
        <return-type type="GTlsCertificateFlags"/>
      </method>
      <method name="GetRehandshakeMode" cname="g_tls_connection_get_rehandshake_mode">
        <return-type type="GTlsRehandshakeMode"/>
      </method>
      <method name="GetRequireCloseNotify" cname="g_tls_connection_get_require_close_notify">
        <return-type type="gboolean"/>
      </method>
      <method name="GetUseSystemCertdb" cname="g_tls_connection_get_use_system_certdb" deprecated="true">
        <return-type type="gboolean"/>
      </method>
      <method name="Handshake" cname="g_tls_connection_handshake">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="HandshakeAsync" cname="g_tls_connection_handshake_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="HandshakeFinish" cname="g_tls_connection_handshake_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SetCertificate" cname="g_tls_connection_set_certificate">
        <return-type type="void"/>
        <parameters>
          <parameter name="certificate" type="GTlsCertificate*"/>
        </parameters>
      </method>
      <method name="SetDatabase" cname="g_tls_connection_set_database">
        <return-type type="void"/>
        <parameters>
          <parameter name="database" type="GTlsDatabase*"/>
        </parameters>
      </method>
      <method name="SetInteraction" cname="g_tls_connection_set_interaction">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
        </parameters>
      </method>
      <method name="SetRehandshakeMode" cname="g_tls_connection_set_rehandshake_mode">
        <return-type type="void"/>
        <parameters>
          <parameter name="mode" type="GTlsRehandshakeMode"/>
        </parameters>
      </method>
      <method name="SetRequireCloseNotify" cname="g_tls_connection_set_require_close_notify">
        <return-type type="void"/>
        <parameters>
          <parameter name="require_close_notify" type="gboolean"/>
        </parameters>
      </method>
      <method name="SetUseSystemCertdb" cname="g_tls_connection_set_use_system_certdb" deprecated="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="use_system_certdb" type="gboolean"/>
        </parameters>
      </method>
      <property name="BaseIoStream" cname="base-io-stream" type="GIOStream*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Certificate" cname="certificate" type="GTlsCertificate*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Database" cname="database" type="GTlsDatabase*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Interaction" cname="interaction" type="GTlsInteraction*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="PeerCertificate" cname="peer-certificate" type="GTlsCertificate*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="PeerCertificateErrors" cname="peer-certificate-errors" type="GTlsCertificateFlags" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="RehandshakeMode" cname="rehandshake-mode" type="GTlsRehandshakeMode" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="RequireCloseNotify" cname="require-close-notify" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="UseSystemCertdb" cname="use-system-certdb" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GIOStream*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GTlsConnectionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <signal name="AcceptCertificate" cname="accept-certificate" when="last" field_name="accept_certificate">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="peer_cert" type="GTlsCertificate*"/>
          <parameter name="errors" type="GTlsCertificateFlags"/>
        </parameters>
      </signal>
    </object>
    <object name="TlsDatabase" cname="GTlsDatabase" abstract="true" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GTlsDatabaseClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="verify_chain"/>
        <method vm="verify_chain_async"/>
        <method vm="verify_chain_finish"/>
        <method vm="create_certificate_handle"/>
        <method vm="lookup_certificate_for_handle"/>
        <method vm="lookup_certificate_for_handle_async"/>
        <method vm="lookup_certificate_for_handle_finish"/>
        <method vm="lookup_certificate_issuer"/>
        <method vm="lookup_certificate_issuer_async"/>
        <method vm="lookup_certificate_issuer_finish"/>
        <method vm="lookup_certificates_issued_by"/>
        <method vm="lookup_certificates_issued_by_async"/>
        <method vm="lookup_certificates_issued_by_finish"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="16"/>
      </class_struct>
      <method name="GetType" cname="g_tls_database_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="CreateCertificateHandle" cname="create_certificate_handle">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="certificate" type="GTlsCertificate*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificateForHandle" cname="lookup_certificate_for_handle">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="handle" type="const-gchar*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificateForHandleAsync" cname="lookup_certificate_for_handle_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="const-gchar*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificateForHandleFinish" cname="lookup_certificate_for_handle_finish">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificateIssuer" cname="lookup_certificate_issuer">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="certificate" type="GTlsCertificate*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificateIssuerAsync" cname="lookup_certificate_issuer_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="certificate" type="GTlsCertificate*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificateIssuerFinish" cname="lookup_certificate_issuer_finish">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificatesIssuedBy" cname="lookup_certificates_issued_by">
        <return-type type="GList*" element_type="GTlsCertificate*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="issuer_raw_dn" type="GByteArray*" array="true" null_term_array="true"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificatesIssuedByAsync" cname="lookup_certificates_issued_by_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="issuer_raw_dn" type="GByteArray*" array="true" null_term_array="true"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="5" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LookupCertificatesIssuedByFinish" cname="lookup_certificates_issued_by_finish" hidden="true">
        <return-type type="GList*" element_type="gpointer" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="VerifyChain" cname="verify_chain">
        <return-type type="GTlsCertificateFlags"/>
        <parameters throws="1">
          <parameter name="chain" type="GTlsCertificate*"/>
          <parameter name="purpose" type="const-gchar*"/>
          <parameter allow-none="1" name="identity" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseVerifyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="VerifyChainAsync" cname="verify_chain_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="chain" type="GTlsCertificate*"/>
          <parameter name="purpose" type="const-gchar*"/>
          <parameter allow-none="1" name="identity" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseVerifyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="7" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="7" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="VerifyChainFinish" cname="verify_chain_finish">
        <return-type type="GTlsCertificateFlags"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="CreateCertificateHandle" cname="g_tls_database_create_certificate_handle">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="certificate" type="GTlsCertificate*"/>
        </parameters>
      </method>
      <method name="LookupCertificateForHandle" cname="g_tls_database_lookup_certificate_for_handle">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="handle" type="const-gchar*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupCertificateForHandleAsync" cname="g_tls_database_lookup_certificate_for_handle_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="handle" type="const-gchar*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupCertificateForHandleFinish" cname="g_tls_database_lookup_certificate_for_handle_finish">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupCertificateIssuer" cname="g_tls_database_lookup_certificate_issuer">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="certificate" type="GTlsCertificate*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupCertificateIssuerAsync" cname="g_tls_database_lookup_certificate_issuer_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="certificate" type="GTlsCertificate*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="LookupCertificateIssuerFinish" cname="g_tls_database_lookup_certificate_issuer_finish">
        <return-type type="GTlsCertificate*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupCertificatesIssuedBy" cname="g_tls_database_lookup_certificates_issued_by">
        <return-type type="GList*" element_type="GTlsCertificate*" elements_owned="true" owned="true"/>
        <parameters throws="1">
          <parameter name="issuer_raw_dn" type="GByteArray*" array="true" null_term_array="true"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupCertificatesIssuedByAsync" cname="g_tls_database_lookup_certificates_issued_by_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="issuer_raw_dn" type="GByteArray*" array="true" null_term_array="true"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseLookupFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="5" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="VerifyChain" cname="g_tls_database_verify_chain">
        <return-type type="GTlsCertificateFlags"/>
        <parameters throws="1">
          <parameter name="chain" type="GTlsCertificate*"/>
          <parameter name="purpose" type="const-gchar*"/>
          <parameter allow-none="1" name="identity" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseVerifyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="VerifyChainAsync" cname="g_tls_database_verify_chain_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="chain" type="GTlsCertificate*"/>
          <parameter name="purpose" type="const-gchar*"/>
          <parameter allow-none="1" name="identity" type="GSocketConnectable*"/>
          <parameter allow-none="1" name="interaction" type="GTlsInteraction*"/>
          <parameter name="flags" type="GTlsDatabaseVerifyFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="7" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="VerifyChainFinish" cname="g_tls_database_verify_chain_finish">
        <return-type type="GTlsCertificateFlags"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GTlsDatabasePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="TlsInteraction" cname="GTlsInteraction" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GTlsInteractionClass">
        <field cname="parent_class" access="private" writeable="false" readable="false" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="ask_password"/>
        <method vm="ask_password_async"/>
        <method vm="ask_password_finish"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="24"/>
      </class_struct>
      <method name="GetType" cname="g_tls_interaction_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="AskPassword" cname="ask_password">
        <return-type type="GTlsInteractionResult"/>
        <parameters throws="1">
          <parameter name="password" type="GTlsPassword*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="AskPasswordAsync" cname="ask_password_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="password" type="GTlsPassword*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter closure="3" allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <virtual_method name="AskPasswordFinish" cname="ask_password_finish">
        <return-type type="GTlsInteractionResult"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <method name="AskPassword" cname="g_tls_interaction_ask_password">
        <return-type type="GTlsInteractionResult"/>
        <parameters throws="1">
          <parameter name="password" type="GTlsPassword*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AskPasswordAsync" cname="g_tls_interaction_ask_password_async">
        <return-type type="void"/>
        <parameters>
          <parameter name="password" type="GTlsPassword*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AskPasswordFinish" cname="g_tls_interaction_ask_password_finish">
        <return-type type="GTlsInteractionResult"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="InvokeAskPassword" cname="g_tls_interaction_invoke_ask_password">
        <return-type type="GTlsInteractionResult"/>
        <parameters throws="1">
          <parameter name="password" type="GTlsPassword*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="private" writeable="false" readable="false" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GTlsInteractionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="TlsPassword" cname="GTlsPassword" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GTlsPasswordClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="get_value"/>
        <method vm="set_value"/>
        <method vm="get_default_warning"/>
        <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="4"/>
      </class_struct>
      <method name="GetType" cname="g_tls_password_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_tls_password_new">
        <parameters>
          <parameter name="flags" type="GTlsPasswordFlags"/>
          <parameter name="description" type="const-gchar*"/>
        </parameters>
      </constructor>
      <virtual_method name="GetDefaultWarning" cname="get_default_warning">
        <return-type type="const-gchar*"/>
      </virtual_method>
      <virtual_method name="GetValue" cname="get_value">
        <return-type type="guint8"/>
        <parameters>
          <parameter allow-none="1" name="length" type="gsize"/>
        </parameters>
      </virtual_method>
      <virtual_method name="SetValue" cname="set_value">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="guint8"/>
          <parameter name="length" type="gssize"/>
          <parameter scope="async" allow-none="1" name="destroy" type="GDestroyNotify"/>
        </parameters>
      </virtual_method>
      <method name="GetDescription" cname="g_tls_password_get_description">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFlags" cname="g_tls_password_get_flags">
        <return-type type="GTlsPasswordFlags"/>
      </method>
      <method name="GetValue" cname="g_tls_password_get_value">
        <return-type type="guint8"/>
        <parameters>
          <parameter allow-none="1" name="length" type="gsize"/>
        </parameters>
      </method>
      <method name="GetWarning" cname="g_tls_password_get_warning">
        <return-type type="const-gchar*"/>
      </method>
      <method name="SetDescription" cname="g_tls_password_set_description">
        <return-type type="void"/>
        <parameters>
          <parameter name="description" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SetFlags" cname="g_tls_password_set_flags">
        <return-type type="void"/>
        <parameters>
          <parameter name="flags" type="GTlsPasswordFlags"/>
        </parameters>
      </method>
      <method name="SetValue" cname="g_tls_password_set_value">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="guint8"/>
          <parameter name="length" type="gssize"/>
        </parameters>
      </method>
      <method name="SetValueFull" cname="g_tls_password_set_value_full">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="guint8"/>
          <parameter name="length" type="gssize"/>
          <parameter scope="async" allow-none="1" name="destroy" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="SetWarning" cname="g_tls_password_set_warning">
        <return-type type="void"/>
        <parameters>
          <parameter name="warning" type="const-gchar*"/>
        </parameters>
      </method>
      <property name="Description" cname="description" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Flags" cname="flags" type="GTlsPasswordFlags" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Warning" cname="warning" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GTlsPasswordPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixConnection" cname="GUnixConnection" abstract="false" opaque="false" hidden="false" parent="GSocketConnection">
      <class_struct cname="GUnixConnectionClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketConnectionClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_unix_connection_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="ReceiveCredentials" cname="g_unix_connection_receive_credentials">
        <return-type type="GCredentials*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReceiveCredentialsAsync" cname="g_unix_connection_receive_credentials_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="ReceiveCredentialsFinish" cname="g_unix_connection_receive_credentials_finish">
        <return-type type="GCredentials*" owned="true"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ReceiveFd" cname="g_unix_connection_receive_fd">
        <return-type type="gint"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendCredentials" cname="g_unix_connection_send_credentials">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendCredentialsAsync" cname="g_unix_connection_send_credentials_async">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="SendCredentialsFinish" cname="g_unix_connection_send_credentials_finish">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="_result" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SendFd" cname="g_unix_connection_send_fd">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="fd" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketConnection*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GUnixConnectionPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixCredentialsMessage" cname="GUnixCredentialsMessage" abstract="false" opaque="false" hidden="false" parent="GSocketControlMessage">
      <class_struct cname="GUnixCredentialsMessageClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketControlMessageClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_unix_credentials_message_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_credentials_message_new" disable_void_ctor=""/>
      <constructor cname="g_unix_credentials_message_new_with_credentials">
        <parameters>
          <parameter name="credentials" type="GCredentials*"/>
        </parameters>
      </constructor>
      <method name="IsSupported" cname="g_unix_credentials_message_is_supported" shared="true">
        <return-type type="gboolean"/>
      </method>
      <method name="GetCredentials" cname="g_unix_credentials_message_get_credentials">
        <return-type type="GCredentials*"/>
      </method>
      <property name="Credentials" cname="credentials" type="GCredentials*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketControlMessage*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GUnixCredentialsMessagePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixFDList" cname="GUnixFDList" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GUnixFDListClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_unix_fd_list_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_fd_list_new" disable_void_ctor=""/>
      <constructor cname="g_unix_fd_list_new_from_array">
        <parameters>
          <parameter name="fds" type="gint*" array="true" array_length_param_index="1"/>
          <parameter name="n_fds" type="gint"/>
        </parameters>
      </constructor>
      <method name="Append" cname="g_unix_fd_list_append">
        <return-type type="gint"/>
        <parameters throws="1">
          <parameter name="fd" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Get" cname="g_unix_fd_list_get">
        <return-type type="gint"/>
        <parameters throws="1">
          <parameter name="index_" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetLength" cname="g_unix_fd_list_get_length">
        <return-type type="gint"/>
      </method>
      <method name="PeekFds" cname="g_unix_fd_list_peek_fds">
        <return-type type="gint*" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter allow-none="1" name="length" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="StealFds" cname="g_unix_fd_list_steal_fds">
        <return-type type="gint**" owned="true" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter allow-none="1" name="length" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GUnixFDListPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixFDMessage" cname="GUnixFDMessage" abstract="false" opaque="false" hidden="false" parent="GSocketControlMessage">
      <class_struct cname="GUnixFDMessageClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketControlMessageClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_unix_fd_message_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_fd_message_new" disable_void_ctor=""/>
      <constructor cname="g_unix_fd_message_new_with_fd_list">
        <parameters>
          <parameter name="fd_list" type="GUnixFDList*"/>
        </parameters>
      </constructor>
      <method name="AppendFd" cname="g_unix_fd_message_append_fd">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="fd" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetFdList" cname="g_unix_fd_message_get_fd_list">
        <return-type type="GUnixFDList*"/>
      </method>
      <method name="StealFds" cname="g_unix_fd_message_steal_fds">
        <return-type type="gint**" owned="true" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter allow-none="1" name="length" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <property name="FdList" cname="fd-list" type="GUnixFDList*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketControlMessage*"/>
      <field cname="priv" access="public" writeable="false" readable="true" name="Priv" type="GUnixFDMessagePrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixInputStream" cname="GUnixInputStream" abstract="false" opaque="false" hidden="false" parent="GInputStream">
      <implements>
        <interface cname="GFileDescriptorBased"/>
        <interface cname="GPollableInputStream"/>
      </implements>
      <class_struct cname="GUnixInputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GInputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_unix_input_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_input_stream_new">
        <parameters>
          <parameter name="fd" type="gint"/>
          <parameter name="close_fd" type="gboolean"/>
        </parameters>
      </constructor>
      <method name="GetCloseFd" cname="g_unix_input_stream_get_close_fd">
        <return-type type="gboolean"/>
      </method>
      <method name="GetFd" cname="g_unix_input_stream_get_fd">
        <return-type type="gint"/>
      </method>
      <method name="SetCloseFd" cname="g_unix_input_stream_set_close_fd">
        <return-type type="void"/>
        <parameters>
          <parameter name="close_fd" type="gboolean"/>
        </parameters>
      </method>
      <property name="CloseFd" cname="close-fd" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Fd" cname="fd" type="gint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GInputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GUnixInputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixMountMonitor" cname="GUnixMountMonitor" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GUnixMountMonitorClass"/>
      <method name="GetType" cname="g_unix_mount_monitor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_mount_monitor_new" disable_void_ctor=""/>
      <method name="SetRateLimit" cname="g_unix_mount_monitor_set_rate_limit">
        <return-type type="void"/>
        <parameters>
          <parameter name="limit_msec" type="gint"/>
        </parameters>
      </method>
      <signal name="MountpointsChanged" cname="mountpoints-changed" when="last">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="MountsChanged" cname="mounts-changed" when="last">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </object>
    <object name="UnixOutputStream" cname="GUnixOutputStream" abstract="false" opaque="false" hidden="false" parent="GOutputStream">
      <implements>
        <interface cname="GFileDescriptorBased"/>
        <interface cname="GPollableOutputStream"/>
      </implements>
      <class_struct cname="GUnixOutputStreamClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GOutputStreamClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_unix_output_stream_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_output_stream_new">
        <parameters>
          <parameter name="fd" type="gint"/>
          <parameter name="close_fd" type="gboolean"/>
        </parameters>
      </constructor>
      <method name="GetCloseFd" cname="g_unix_output_stream_get_close_fd">
        <return-type type="gboolean"/>
      </method>
      <method name="GetFd" cname="g_unix_output_stream_get_fd">
        <return-type type="gint"/>
      </method>
      <method name="SetCloseFd" cname="g_unix_output_stream_set_close_fd">
        <return-type type="void"/>
        <parameters>
          <parameter name="close_fd" type="gboolean"/>
        </parameters>
      </method>
      <property name="CloseFd" cname="close-fd" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Fd" cname="fd" type="gint" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GOutputStream*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GUnixOutputStreamPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="UnixSocketAddress" cname="GUnixSocketAddress" abstract="false" opaque="false" hidden="false" parent="GSocketAddress">
      <implements>
        <interface cname="GSocketConnectable"/>
      </implements>
      <class_struct cname="GUnixSocketAddressClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GSocketAddressClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_unix_socket_address_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_unix_socket_address_new">
        <parameters>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </constructor>
      <constructor cname="g_unix_socket_address_new_abstract">
        <parameters>
          <parameter name="path" type="const-gchar*" array="true" array_length_param_index="1"/>
          <parameter name="path_len" type="gint"/>
        </parameters>
      </constructor>
      <constructor cname="g_unix_socket_address_new_with_type">
        <parameters>
          <parameter name="path" type="const-gchar*" array="true" array_length_param_index="1"/>
          <parameter name="path_len" type="gint"/>
          <parameter name="type" type="GUnixSocketAddressType"/>
        </parameters>
      </constructor>
      <method name="AbstractNamesSupported" cname="g_unix_socket_address_abstract_names_supported" shared="true">
        <return-type type="gboolean"/>
      </method>
      <method name="GetAddressType" cname="g_unix_socket_address_get_address_type">
        <return-type type="GUnixSocketAddressType"/>
      </method>
      <method name="GetIsAbstract" cname="g_unix_socket_address_get_is_abstract" deprecated="true">
        <return-type type="gboolean"/>
      </method>
      <method name="GetPath" cname="g_unix_socket_address_get_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPathLen" cname="g_unix_socket_address_get_path_len">
        <return-type type="gsize"/>
      </method>
      <property name="Abstract" cname="abstract" type="gboolean" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="AddressType" cname="address-type" type="GUnixSocketAddressType" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Path" cname="path" type="gchar*" readable="true" writeable="true" construct="false" construct-only="true"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GSocketAddress*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="GUnixSocketAddressPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
    </object>
    <object name="Vfs" cname="GVfs" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GVfsClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method vm="is_active"/>
        <method vm="get_file_for_path"/>
        <method vm="get_file_for_uri"/>
        <method vm="get_supported_uri_schemes"/>
        <method vm="parse_name"/>
        <method vm="local_file_add_info"/>
        <method vm="add_writable_namespaces"/>
        <method vm="local_file_set_attributes"/>
        <method vm="local_file_removed"/>
        <method vm="local_file_moved"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
        <method vm="_g_reserved7"/>
      </class_struct>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved7" cname="_g_reserved7" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_vfs_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetDefault" cname="g_vfs_get_default" shared="true">
        <return-type type="GVfs*"/>
      </method>
      <method name="GetLocal" cname="g_vfs_get_local" shared="true">
        <return-type type="GVfs*"/>
      </method>
      <virtual_method name="AddWritableNamespaces" cname="add_writable_namespaces">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="GFileAttributeInfoList*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </virtual_method>
      <virtual_method name="GetFileForPath" cname="get_file_for_path">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetFileForUri" cname="get_file_for_uri">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetSupportedUriSchemes" cname="get_supported_uri_schemes">
        <return-type type="const gchar* const*" array="true" null_term_array="true"/>
      </virtual_method>
      <virtual_method name="IsActive" cname="is_active">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="LocalFileAddInfo" cname="local_file_add_info">
        <return-type type="void"/>
        <parameters>
          <parameter name="filename" type="const-gchar*"/>
          <parameter name="device" type="guint64"/>
          <parameter name="attribute_matcher" type="GFileAttributeMatcher*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="info" type="GFileInfo*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="extra_data" type="gpointer"/>
          <parameter scope="async" name="free_extra_data" type="GDestroyNotify"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileMoved" cname="local_file_moved">
        <return-type type="void"/>
        <parameters>
          <parameter name="source" type="const-gchar*"/>
          <parameter name="dest" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileRemoved" cname="local_file_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="filename" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileSetAttributes" cname="local_file_set_attributes">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="filename" type="const-gchar*"/>
          <parameter name="info" type="GFileInfo*"/>
          <parameter name="flags" type="GFileQueryInfoFlags"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ParseName" cname="parse_name">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="parse_name" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <method name="GetFileForPath" cname="g_vfs_get_file_for_path">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetFileForUri" cname="g_vfs_get_file_for_uri">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetSupportedUriSchemes" cname="g_vfs_get_supported_uri_schemes">
        <return-type type="const gchar* const*" array="true" null_term_array="true"/>
      </method>
      <method name="IsActive" cname="g_vfs_is_active">
        <return-type type="gboolean"/>
      </method>
      <method name="ParseName" cname="g_vfs_parse_name">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="parse_name" type="const-gchar*"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
    </object>
    <object name="VolumeMonitor" cname="GVolumeMonitor" abstract="false" opaque="false" hidden="false" parent="GObject">
      <class_struct cname="GVolumeMonitorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
        <method signal_vm="volume_added"/>
        <method signal_vm="volume_removed"/>
        <method signal_vm="volume_changed"/>
        <method signal_vm="mount_added"/>
        <method signal_vm="mount_removed"/>
        <method signal_vm="mount_pre_unmount"/>
        <method signal_vm="mount_changed"/>
        <method signal_vm="drive_connected"/>
        <method signal_vm="drive_disconnected"/>
        <method signal_vm="drive_changed"/>
        <method vm="is_supported"/>
        <method vm="get_connected_drives"/>
        <method vm="get_volumes"/>
        <method vm="get_mounts"/>
        <method vm="get_volume_for_uuid"/>
        <method vm="get_mount_for_uuid"/>
        <method vm="adopt_orphan_mount"/>
        <method signal_vm="drive_eject_button"/>
        <method signal_vm="drive_stop_button"/>
        <method vm="_g_reserved1"/>
        <method vm="_g_reserved2"/>
        <method vm="_g_reserved3"/>
        <method vm="_g_reserved4"/>
        <method vm="_g_reserved5"/>
        <method vm="_g_reserved6"/>
      </class_struct>
      <virtual_method name="IsSupported" cname="is_supported" shared="true">
        <return-type type="gboolean"/>
      </virtual_method>
      <virtual_method name="AdoptOrphanMount" cname="adopt_orphan_mount" shared="true" hidden="true">
        <return-type type="GVolume*"/>
        <parameters>
          <parameter name="mount" type="GMount*"/>
          <parameter name="volume_monitor" type="GVolumeMonitor*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="_gGReserved1" cname="_g_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved2" cname="_g_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved3" cname="_g_reserved3" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved4" cname="_g_reserved4" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved5" cname="_g_reserved5" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_gGReserved6" cname="_g_reserved6" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="g_volume_monitor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="AdoptOrphanMount" cname="g_volume_monitor_adopt_orphan_mount" shared="true" deprecated="true">
        <return-type type="GVolume*" owned="true"/>
        <parameters>
          <parameter name="mount" type="GMount*"/>
        </parameters>
      </method>
      <method name="Get" cname="g_volume_monitor_get" shared="true">
        <return-type type="GVolumeMonitor*" owned="true"/>
      </method>
      <virtual_method name="GetConnectedDrives" cname="get_connected_drives">
        <return-type type="GList*" element_type="GDrive*" elements_owned="true" owned="true"/>
      </virtual_method>
      <virtual_method name="GetMountForUuid" cname="get_mount_for_uuid">
        <return-type type="GMount*" owned="true"/>
        <parameters>
          <parameter name="uuid" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetMounts" cname="get_mounts">
        <return-type type="GList*" element_type="GMount*" elements_owned="true" owned="true"/>
      </virtual_method>
      <virtual_method name="GetVolumeForUuid" cname="get_volume_for_uuid">
        <return-type type="GVolume*" owned="true"/>
        <parameters>
          <parameter name="uuid" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="GetVolumes" cname="get_volumes">
        <return-type type="GList*" element_type="GVolume*" elements_owned="true" owned="true"/>
      </virtual_method>
      <method name="GetConnectedDrives" cname="g_volume_monitor_get_connected_drives">
        <return-type type="GList*" element_type="GDrive*" elements_owned="true" owned="true"/>
      </method>
      <method name="GetMountForUuid" cname="g_volume_monitor_get_mount_for_uuid">
        <return-type type="GMount*" owned="true"/>
        <parameters>
          <parameter name="uuid" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetMounts" cname="g_volume_monitor_get_mounts">
        <return-type type="GList*" element_type="GMount*" elements_owned="true" owned="true"/>
      </method>
      <method name="GetVolumeForUuid" cname="g_volume_monitor_get_volume_for_uuid">
        <return-type type="GVolume*" owned="true"/>
        <parameters>
          <parameter name="uuid" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetVolumes" cname="g_volume_monitor_get_volumes">
        <return-type type="GList*" element_type="GVolume*" elements_owned="true" owned="true"/>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" name="ParentInstance" type="GObject*"/>
      <field cname="priv" access="private" writeable="false" readable="false" name="Priv" type="gpointer"/>
      <signal name="DriveChanged" cname="drive-changed" when="last" field_name="drive_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <signal name="DriveConnected" cname="drive-connected" when="last" field_name="drive_connected">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <signal name="DriveDisconnected" cname="drive-disconnected" when="last" field_name="drive_disconnected">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <signal name="DriveEjectButton" cname="drive-eject-button" when="last" field_name="drive_eject_button">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <signal name="DriveStopButton" cname="drive-stop-button" when="last" field_name="drive_stop_button">
        <return-type type="void"/>
        <parameters>
          <parameter name="drive" type="GDrive*"/>
        </parameters>
      </signal>
      <signal name="MountAdded" cname="mount-added" when="last" field_name="mount_added">
        <return-type type="void"/>
        <parameters>
          <parameter name="mount" type="GMount*"/>
        </parameters>
      </signal>
      <signal name="MountChanged" cname="mount-changed" when="last" field_name="mount_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="mount" type="GMount*"/>
        </parameters>
      </signal>
      <signal name="MountPreUnmount" cname="mount-pre-unmount" when="last" field_name="mount_pre_unmount">
        <return-type type="void"/>
        <parameters>
          <parameter name="mount" type="GMount*"/>
        </parameters>
      </signal>
      <signal name="MountRemoved" cname="mount-removed" when="last" field_name="mount_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="mount" type="GMount*"/>
        </parameters>
      </signal>
      <signal name="VolumeAdded" cname="volume-added" when="last" field_name="volume_added">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <signal name="VolumeChanged" cname="volume-changed" when="last" field_name="volume_changed">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
      <signal name="VolumeRemoved" cname="volume-removed" when="last" field_name="volume_removed">
        <return-type type="void"/>
        <parameters>
          <parameter name="volume" type="GVolume*"/>
        </parameters>
      </signal>
    </object>
    <object name="ZlibCompressor" cname="GZlibCompressor" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GConverter"/>
      </implements>
      <class_struct cname="GZlibCompressorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_zlib_compressor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_zlib_compressor_new">
        <parameters>
          <parameter name="format" type="GZlibCompressorFormat"/>
          <parameter name="level" type="gint"/>
        </parameters>
      </constructor>
      <method name="GetFileInfo" cname="g_zlib_compressor_get_file_info">
        <return-type type="GFileInfo*"/>
      </method>
      <method name="SetFileInfo" cname="g_zlib_compressor_set_file_info">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="file_info" type="GFileInfo*"/>
        </parameters>
      </method>
      <property name="FileInfo" cname="file-info" type="GFileInfo*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Format" cname="format" type="GZlibCompressorFormat" readable="true" writeable="true" construct="false" construct-only="true"/>
      <property name="Level" cname="level" type="gint" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <object name="ZlibDecompressor" cname="GZlibDecompressor" abstract="false" opaque="false" hidden="false" parent="GObject">
      <implements>
        <interface cname="GConverter"/>
      </implements>
      <class_struct cname="GZlibDecompressorClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" name="ParentClass" type="GObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="g_zlib_decompressor_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_zlib_decompressor_new">
        <parameters>
          <parameter name="format" type="GZlibCompressorFormat"/>
        </parameters>
      </constructor>
      <method name="GetFileInfo" cname="g_zlib_decompressor_get_file_info">
        <return-type type="GFileInfo*"/>
      </method>
      <property name="FileInfo" cname="file-info" type="GFileInfo*" readable="true" writeable="false" construct="false" construct-only="false"/>
      <property name="Format" cname="format" type="GZlibCompressorFormat" readable="true" writeable="true" construct="false" construct-only="true"/>
    </object>
    <struct name="ActionEntry" cname="GActionEntry" opaque="false" hidden="false">
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="parameter_type" access="public" writeable="true" readable="true" name="ParameterType" type="gchar*"/>
      <field cname="state" access="public" writeable="true" readable="true" name="State" type="gchar*"/>
      <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gsize" array="true" array_len="3"/>
    </struct>
    <struct name="AppLaunchContextPrivate" cname="GAppLaunchContextPrivate" opaque="true" hidden="true"/>
    <struct name="ApplicationCommandLinePrivate" cname="GApplicationCommandLinePrivate" opaque="true" hidden="true"/>
    <struct name="ApplicationPrivate" cname="GApplicationPrivate" opaque="true" hidden="true"/>
    <struct name="BufferedInputStreamPrivate" cname="GBufferedInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="BufferedOutputStreamPrivate" cname="GBufferedOutputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="CancellablePrivate" cname="GCancellablePrivate" opaque="true" hidden="true"/>
    <struct name="ConverterInputStreamPrivate" cname="GConverterInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="ConverterOutputStreamPrivate" cname="GConverterOutputStreamPrivate" opaque="true" hidden="true"/>
    <boxed name="DBusAnnotationInfo" cname="GDBusAnnotationInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_annotation_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="key" access="public" writeable="true" readable="true" name="Key" type="gchar*"/>
      <field cname="value" access="public" writeable="true" readable="true" name="Value" type="gchar*"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <method name="Ref" cname="g_dbus_annotation_info_ref">
        <return-type type="GDBusAnnotationInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_annotation_info_unref">
        <return-type type="void"/>
      </method>
      <method name="Lookup" cname="g_dbus_annotation_info_lookup" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter allow-none="1" name="annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
    </boxed>
    <boxed name="DBusArgInfo" cname="GDBusArgInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_arg_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="signature" access="public" writeable="true" readable="true" name="Signature" type="gchar*"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <method name="Ref" cname="g_dbus_arg_info_ref">
        <return-type type="GDBusArgInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_arg_info_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <struct name="DBusErrorEntry" cname="GDBusErrorEntry" opaque="false" hidden="false">
      <field cname="error_code" access="public" writeable="true" readable="true" name="ErrorCode" type="gint"/>
      <field cname="dbus_error_name" access="public" writeable="true" readable="true" name="DbusErrorName" type="gchar*"/>
    </struct>
    <boxed name="DBusInterfaceInfo" cname="GDBusInterfaceInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_interface_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="methods" access="public" writeable="true" readable="true" name="Methods" type="GDBusMethodInfo**" array="true" null_term_array="true"/>
      <field cname="signals" access="public" writeable="true" readable="true" name="Signals" type="GDBusSignalInfo**" array="true" null_term_array="true"/>
      <field cname="properties" access="public" writeable="true" readable="true" name="Properties" type="GDBusPropertyInfo**" array="true" null_term_array="true"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <method name="CacheBuild" cname="g_dbus_interface_info_cache_build">
        <return-type type="void"/>
      </method>
      <method name="CacheRelease" cname="g_dbus_interface_info_cache_release">
        <return-type type="void"/>
      </method>
      <method name="GenerateXml" cname="g_dbus_interface_info_generate_xml">
        <return-type type="void"/>
        <parameters>
          <parameter name="indent" type="guint"/>
          <parameter name="string_builder" type="GString*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="LookupMethod" cname="g_dbus_interface_info_lookup_method">
        <return-type type="GDBusMethodInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="LookupProperty" cname="g_dbus_interface_info_lookup_property">
        <return-type type="GDBusPropertyInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="LookupSignal" cname="g_dbus_interface_info_lookup_signal">
        <return-type type="GDBusSignalInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Ref" cname="g_dbus_interface_info_ref">
        <return-type type="GDBusInterfaceInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_interface_info_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <struct name="DBusInterfaceSkeletonPrivate" cname="GDBusInterfaceSkeletonPrivate" opaque="true" hidden="true"/>
    <struct name="DBusInterfaceVTable" cname="GDBusInterfaceVTable" opaque="false" hidden="false">
      <field cname="method_call" access="public" writeable="true" readable="true" name="MethodCall" type="GDBusInterfaceMethodCallFunc"/>
      <field cname="get_property" access="public" writeable="true" readable="true" name="GetProperty" type="GDBusInterfaceGetPropertyFunc"/>
      <field cname="set_property" access="public" writeable="true" readable="true" name="SetProperty" type="GDBusInterfaceSetPropertyFunc"/>
      <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
    </struct>
    <boxed name="DBusMethodInfo" cname="GDBusMethodInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_method_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="in_args" access="public" writeable="true" readable="true" name="InArgs" type="GDBusArgInfo**" array="true" null_term_array="true"/>
      <field cname="out_args" access="public" writeable="true" readable="true" name="OutArgs" type="GDBusArgInfo**" array="true" null_term_array="true"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <method name="Ref" cname="g_dbus_method_info_ref">
        <return-type type="GDBusMethodInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_method_info_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <boxed name="DBusNodeInfo" cname="GDBusNodeInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_node_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="path" access="public" writeable="true" readable="true" name="Path" type="gchar*"/>
      <field cname="interfaces" access="public" writeable="true" readable="true" name="Interfaces" type="GDBusInterfaceInfo**" array="true" null_term_array="true"/>
      <field cname="nodes" access="public" writeable="true" readable="true" name="Nodes" type="GDBusNodeInfo**" array="true" null_term_array="true"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <constructor cname="g_dbus_node_info_new_for_xml">
        <parameters>
          <parameter name="xml_data" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="GenerateXml" cname="g_dbus_node_info_generate_xml">
        <return-type type="void"/>
        <parameters>
          <parameter name="indent" type="guint"/>
          <parameter name="string_builder" type="GString*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="LookupInterface" cname="g_dbus_node_info_lookup_interface">
        <return-type type="GDBusInterfaceInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Ref" cname="g_dbus_node_info_ref">
        <return-type type="GDBusNodeInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_node_info_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <struct name="DBusObjectManagerClientPrivate" cname="GDBusObjectManagerClientPrivate" opaque="true" hidden="true"/>
    <struct name="DBusObjectManagerServerPrivate" cname="GDBusObjectManagerServerPrivate" opaque="true" hidden="true"/>
    <struct name="DBusObjectProxyPrivate" cname="GDBusObjectProxyPrivate" opaque="true" hidden="true"/>
    <struct name="DBusObjectSkeletonPrivate" cname="GDBusObjectSkeletonPrivate" opaque="true" hidden="true"/>
    <boxed name="DBusPropertyInfo" cname="GDBusPropertyInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_property_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="signature" access="public" writeable="true" readable="true" name="Signature" type="gchar*"/>
      <field cname="flags" access="public" writeable="true" readable="true" name="Flags" type="GDBusPropertyInfoFlags"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <method name="Ref" cname="g_dbus_property_info_ref">
        <return-type type="GDBusPropertyInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_property_info_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <struct name="DBusProxyPrivate" cname="GDBusProxyPrivate" opaque="true" hidden="true"/>
    <boxed name="DBusSignalInfo" cname="GDBusSignalInfo" opaque="false" hidden="false">
      <method name="GetType" cname="g_dbus_signal_info_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="ref_count" access="public" writeable="true" readable="true" name="RefCount" type="gint"/>
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="args" access="public" writeable="true" readable="true" name="Args" type="GDBusArgInfo**" array="true" null_term_array="true"/>
      <field cname="annotations" access="public" writeable="true" readable="true" name="Annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
      <method name="Ref" cname="g_dbus_signal_info_ref">
        <return-type type="GDBusSignalInfo*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_dbus_signal_info_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <struct name="DBusSubtreeVTable" cname="GDBusSubtreeVTable" opaque="false" hidden="false">
      <field cname="enumerate" access="public" writeable="true" readable="true" name="Enumerate" type="GDBusSubtreeEnumerateFunc"/>
      <field cname="introspect" access="public" writeable="true" readable="true" name="Introspect" type="GDBusSubtreeIntrospectFunc"/>
      <field cname="dispatch" access="public" writeable="true" readable="true" name="Dispatch" type="GDBusSubtreeDispatchFunc"/>
      <field cname="padding" access="private" writeable="false" readable="false" name="Padding" type="gpointer" array="true" array_len="8"/>
    </struct>
    <struct name="DataInputStreamPrivate" cname="GDataInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="DataOutputStreamPrivate" cname="GDataOutputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="EmblemedIconPrivate" cname="GEmblemedIconPrivate" opaque="true" hidden="true"/>
    <struct name="FileAttributeInfo" cname="GFileAttributeInfo" opaque="false" hidden="false">
      <field cname="name" access="public" writeable="true" readable="true" name="Name" type="gchar*"/>
      <field cname="type" access="public" writeable="true" readable="true" name="Type" type="GFileAttributeType"/>
      <field cname="flags" access="public" writeable="true" readable="true" name="Flags" type="GFileAttributeInfoFlags"/>
    </struct>
    <boxed name="FileAttributeInfoList" cname="GFileAttributeInfoList" opaque="false" hidden="false">
      <method name="GetType" cname="g_file_attribute_info_list_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="infos" access="public" writeable="true" readable="true" name="Infos" type="GFileAttributeInfo*">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="n_infos" access="public" writeable="true" readable="true" name="NInfos" type="gint"/>
      <constructor cname="g_file_attribute_info_list_new" disable_void_ctor=""/>
      <method name="Add" cname="g_file_attribute_info_list_add">
        <return-type type="void"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="type" type="GFileAttributeType"/>
          <parameter name="flags" type="GFileAttributeInfoFlags"/>
        </parameters>
      </method>
      <method name="Dup" cname="g_file_attribute_info_list_dup">
        <return-type type="GFileAttributeInfoList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Lookup" cname="g_file_attribute_info_list_lookup">
        <return-type type="GFileAttributeInfo*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Ref" cname="g_file_attribute_info_list_ref">
        <return-type type="GFileAttributeInfoList*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_file_attribute_info_list_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <boxed name="FileAttributeMatcher" cname="GFileAttributeMatcher" opaque="false" hidden="false">
      <method name="GetType" cname="g_file_attribute_matcher_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_file_attribute_matcher_new">
        <parameters>
          <parameter name="attributes" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="EnumerateNamespace" cname="g_file_attribute_matcher_enumerate_namespace">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="ns" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="EnumerateNext" cname="g_file_attribute_matcher_enumerate_next">
        <return-type type="const-gchar*"/>
      </method>
      <method name="Matches" cname="g_file_attribute_matcher_matches">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="MatchesOnly" cname="g_file_attribute_matcher_matches_only">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="attribute" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Ref" cname="g_file_attribute_matcher_ref">
        <return-type type="GFileAttributeMatcher*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Subtract" cname="g_file_attribute_matcher_subtract">
        <return-type type="GFileAttributeMatcher*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="subtract" type="GFileAttributeMatcher*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ToString" cname="g_file_attribute_matcher_to_string">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="Unref" cname="g_file_attribute_matcher_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <struct name="FileEnumeratorPrivate" cname="GFileEnumeratorPrivate" opaque="true" hidden="true"/>
    <struct name="FileIOStreamPrivate" cname="GFileIOStreamPrivate" opaque="true" hidden="true"/>
    <struct name="FileInputStreamPrivate" cname="GFileInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="FileMonitorPrivate" cname="GFileMonitorPrivate" opaque="true" hidden="true"/>
    <struct name="FileOutputStreamPrivate" cname="GFileOutputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="IOExtension" cname="GIOExtension" opaque="true" hidden="false">
      <method name="GetName" cname="g_io_extension_get_name">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPriority" cname="g_io_extension_get_priority">
        <return-type type="gint"/>
      </method>
      <method name="GetType" cname="g_io_extension_get_type">
        <return-type type="GType"/>
      </method>
    </struct>
    <struct name="IOExtensionPoint" cname="GIOExtensionPoint" opaque="true" hidden="false">
      <method name="GetExtensionByName" cname="g_io_extension_point_get_extension_by_name">
        <return-type type="GIOExtension*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="GetExtensions" cname="g_io_extension_point_get_extensions">
        <return-type type="GList*" element_type="GList*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="GetRequiredType" cname="g_io_extension_point_get_required_type">
        <return-type type="GType"/>
      </method>
      <method name="SetRequiredType" cname="g_io_extension_point_set_required_type">
        <return-type type="void"/>
        <parameters>
          <parameter name="type" type="GType"/>
        </parameters>
      </method>
      <method name="Implement" cname="g_io_extension_point_implement" shared="true">
        <return-type type="GIOExtension*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="extension_point_name" type="const-gchar*"/>
          <parameter name="type" type="GType"/>
          <parameter name="extension_name" type="const-gchar*"/>
          <parameter name="priority" type="gint"/>
        </parameters>
      </method>
      <method name="Lookup" cname="g_io_extension_point_lookup" shared="true">
        <return-type type="GIOExtensionPoint*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Register" cname="g_io_extension_point_register" shared="true">
        <return-type type="GIOExtensionPoint*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
    </struct>
    <struct name="IOModuleScope" cname="GIOModuleScope" opaque="true" hidden="false">
      <method name="Block" cname="g_io_module_scope_block">
        <return-type type="void"/>
        <parameters>
          <parameter name="basename" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Free" cname="g_io_module_scope_free">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="IOSchedulerJob" cname="GIOSchedulerJob" opaque="true" hidden="false">
      <method name="SendToMainloop" cname="g_io_scheduler_job_send_to_mainloop">
        <return-type type="gboolean"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="func" type="GSourceFunc"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="notify" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="SendToMainloopAsync" cname="g_io_scheduler_job_send_to_mainloop_async">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="func" type="GSourceFunc"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="notify" type="GDestroyNotify"/>
        </parameters>
      </method>
    </struct>
    <struct name="IOStreamAdapter" cname="GIOStreamAdapter" opaque="true" hidden="false"/>
    <struct name="IOStreamPrivate" cname="GIOStreamPrivate" opaque="true" hidden="true"/>
    <struct name="InetAddressMaskPrivate" cname="GInetAddressMaskPrivate" opaque="true" hidden="true"/>
    <struct name="InetAddressPrivate" cname="GInetAddressPrivate" opaque="true" hidden="true"/>
    <struct name="InetSocketAddressPrivate" cname="GInetSocketAddressPrivate" opaque="true" hidden="true"/>
    <struct name="InputStreamPrivate" cname="GInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="InputVector" cname="GInputVector" opaque="false" hidden="false">
      <field cname="buffer" access="public" writeable="true" readable="true" name="Buffer" type="gpointer"/>
      <field cname="size" access="public" writeable="true" readable="true" name="Size" type="gsize"/>
    </struct>
    <struct name="MemoryInputStreamPrivate" cname="GMemoryInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="MemoryOutputStreamPrivate" cname="GMemoryOutputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="MenuAttributeIterPrivate" cname="GMenuAttributeIterPrivate" opaque="true" hidden="true"/>
    <struct name="MenuLinkIterPrivate" cname="GMenuLinkIterPrivate" opaque="true" hidden="true"/>
    <struct name="MenuModelPrivate" cname="GMenuModelPrivate" opaque="true" hidden="true"/>
    <struct name="MountOperationPrivate" cname="GMountOperationPrivate" opaque="true" hidden="true"/>
    <struct name="NetworkAddressPrivate" cname="GNetworkAddressPrivate" opaque="true" hidden="true"/>
    <struct name="NetworkServicePrivate" cname="GNetworkServicePrivate" opaque="true" hidden="true"/>
    <struct name="OutputStreamPrivate" cname="GOutputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="OutputVector" cname="GOutputVector" opaque="false" hidden="false">
      <field cname="buffer" access="public" writeable="true" readable="true" name="Buffer" type="gpointer"/>
      <field cname="size" access="public" writeable="true" readable="true" name="Size" type="gsize"/>
    </struct>
    <struct name="PermissionPrivate" cname="GPermissionPrivate" opaque="true" hidden="true"/>
    <struct name="ProxyAddressEnumeratorPrivate" cname="GProxyAddressEnumeratorPrivate" opaque="true" hidden="true"/>
    <struct name="ProxyAddressPrivate" cname="GProxyAddressPrivate" opaque="true" hidden="true"/>
    <struct name="ResolverPrivate" cname="GResolverPrivate" opaque="true" hidden="true"/>
    <boxed name="Resource" cname="GResource" opaque="false" hidden="false">
      <method name="GetType" cname="g_resource_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_resource_new_from_data">
        <parameters>
          <parameter name="data" type="GBytes*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </constructor>
      <method name="_Register" cname="g_resources_register">
        <return-type type="void"/>
      </method>
      <method name="_Unregister" cname="g_resources_unregister">
        <return-type type="void"/>
      </method>
      <method name="EnumerateChildren" cname="g_resource_enumerate_children">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetInfo" cname="g_resource_get_info">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter allow-none="1" name="size" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="flags" type="guint32*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="LookupData" cname="g_resource_lookup_data">
        <return-type type="GBytes*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="OpenStream" cname="g_resource_open_stream">
        <return-type type="GInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="Ref" cname="g_resource_ref">
        <return-type type="GResource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_resource_unref">
        <return-type type="void"/>
      </method>
      <method name="Load" cname="g_resource_load" shared="true">
        <return-type type="GResource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="filename" type="const-gfilename*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
    </boxed>
    <struct name="SettingsBackend" cname="GSettingsBackend" opaque="true" hidden="false"/>
    <struct name="SettingsPrivate" cname="GSettingsPrivate" opaque="true" hidden="true"/>
    <boxed name="SettingsSchema" cname="GSettingsSchema" opaque="false" hidden="false">
      <method name="GetType" cname="g_settings_schema_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="GetId" cname="g_settings_schema_get_id">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPath" cname="g_settings_schema_get_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="Ref" cname="g_settings_schema_ref">
        <return-type type="GSettingsSchema*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_settings_schema_unref">
        <return-type type="void"/>
      </method>
    </boxed>
    <boxed name="SettingsSchemaSource" cname="GSettingsSchemaSource" opaque="true" hidden="false">
      <method name="GetType" cname="g_settings_schema_source_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_settings_schema_source_new_from_directory">
        <parameters>
          <parameter name="directory" type="const-gchar*"/>
          <parameter name="parent" type="GSettingsSchemaSource*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="trusted" type="gboolean"/>
        </parameters>
      </constructor>
      <method name="Lookup" cname="g_settings_schema_source_lookup">
        <return-type type="GSettingsSchema*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="schema_id" type="const-gchar*"/>
          <parameter name="recursive" type="gboolean"/>
        </parameters>
      </method>
      <method name="Ref" cname="g_settings_schema_source_ref">
        <return-type type="GSettingsSchemaSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Unref" cname="g_settings_schema_source_unref">
        <return-type type="void"/>
      </method>
      <method name="GetDefault" cname="g_settings_schema_source_get_default" shared="true">
        <return-type type="GSettingsSchemaSource*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
    </boxed>
    <struct name="SimpleActionGroupPrivate" cname="GSimpleActionGroupPrivate" opaque="true" hidden="true"/>
    <struct name="SocketClientPrivate" cname="GSocketClientPrivate" opaque="true" hidden="true"/>
    <struct name="SocketConnectionPrivate" cname="GSocketConnectionPrivate" opaque="true" hidden="true"/>
    <struct name="SocketControlMessagePrivate" cname="GSocketControlMessagePrivate" opaque="true" hidden="true"/>
    <struct name="SocketListenerPrivate" cname="GSocketListenerPrivate" opaque="true" hidden="true"/>
    <struct name="SocketPrivate" cname="GSocketPrivate" opaque="true" hidden="true"/>
    <struct name="SocketServicePrivate" cname="GSocketServicePrivate" opaque="true" hidden="true"/>
    <boxed name="SrvTarget" cname="GSrvTarget" opaque="false" hidden="false">
      <method name="GetType" cname="g_srv_target_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="g_srv_target_new">
        <parameters>
          <parameter name="hostname" type="const-gchar*"/>
          <parameter name="port" type="guint16"/>
          <parameter name="priority" type="guint16"/>
          <parameter name="weight" type="guint16"/>
        </parameters>
      </constructor>
      <method name="Copy" cname="g_srv_target_copy">
        <return-type type="GSrvTarget*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Free" cname="g_srv_target_free">
        <return-type type="void"/>
      </method>
      <method name="GetHostname" cname="g_srv_target_get_hostname">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetPort" cname="g_srv_target_get_port">
        <return-type type="guint16"/>
      </method>
      <method name="GetPriority" cname="g_srv_target_get_priority">
        <return-type type="guint16"/>
      </method>
      <method name="GetWeight" cname="g_srv_target_get_weight">
        <return-type type="guint16"/>
      </method>
    </boxed>
    <struct name="StaticResource" cname="GStaticResource" opaque="false" hidden="false">
      <field cname="data" access="public" writeable="true" readable="true" name="Data" type="guint8"/>
      <field cname="data_len" access="public" writeable="true" readable="true" name="DataLen" type="gsize"/>
      <field cname="resource" access="public" writeable="true" readable="true" name="Resource" type="GResource*">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="next" access="public" writeable="true" readable="true" name="Next" type="GStaticResource*">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="padding" access="public" writeable="true" readable="true" name="Padding" type="gpointer"/>
      <method name="Fini" cname="g_static_resource_fini">
        <return-type type="void"/>
      </method>
      <method name="GetResource" cname="g_static_resource_get_resource">
        <return-type type="GResource*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="Init" cname="g_static_resource_init">
        <return-type type="void"/>
      </method>
    </struct>
    <struct name="TcpConnectionPrivate" cname="GTcpConnectionPrivate" opaque="true" hidden="true"/>
    <struct name="TcpWrapperConnectionPrivate" cname="GTcpWrapperConnectionPrivate" opaque="true" hidden="true"/>
    <struct name="ThreadedSocketServicePrivate" cname="GThreadedSocketServicePrivate" opaque="true" hidden="true"/>
    <struct name="TlsCertificatePrivate" cname="GTlsCertificatePrivate" opaque="true" hidden="true"/>
    <struct name="TlsConnectionPrivate" cname="GTlsConnectionPrivate" opaque="true" hidden="true"/>
    <struct name="TlsDatabasePrivate" cname="GTlsDatabasePrivate" opaque="true" hidden="true"/>
    <struct name="TlsInteractionPrivate" cname="GTlsInteractionPrivate" opaque="true" hidden="true"/>
    <struct name="TlsPasswordPrivate" cname="GTlsPasswordPrivate" opaque="true" hidden="true"/>
    <struct name="UnixConnectionPrivate" cname="GUnixConnectionPrivate" opaque="true" hidden="true"/>
    <struct name="UnixCredentialsMessagePrivate" cname="GUnixCredentialsMessagePrivate" opaque="true" hidden="true"/>
    <struct name="UnixFDListPrivate" cname="GUnixFDListPrivate" opaque="true" hidden="true"/>
    <struct name="UnixFDMessagePrivate" cname="GUnixFDMessagePrivate" opaque="true" hidden="true"/>
    <struct name="UnixInputStreamPrivate" cname="GUnixInputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="UnixMountEntry" cname="GUnixMountEntry" opaque="true" hidden="false"/>
    <struct name="UnixMountPoint" cname="GUnixMountPoint" opaque="true" hidden="false">
      <method name="Compare" cname="g_unix_mount_point_compare">
        <return-type type="gint"/>
        <parameters>
          <parameter name="mount2" type="GUnixMountPoint*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="Free" cname="g_unix_mount_point_free">
        <return-type type="void"/>
      </method>
      <method name="GetDevicePath" cname="g_unix_mount_point_get_device_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetFsType" cname="g_unix_mount_point_get_fs_type">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetMountPath" cname="g_unix_mount_point_get_mount_path">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GetOptions" cname="g_unix_mount_point_get_options">
        <return-type type="const-gchar*"/>
      </method>
      <method name="GuessCanEject" cname="g_unix_mount_point_guess_can_eject">
        <return-type type="gboolean"/>
      </method>
      <method name="GuessIcon" cname="g_unix_mount_point_guess_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="GuessName" cname="g_unix_mount_point_guess_name">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="GuessSymbolicIcon" cname="g_unix_mount_point_guess_symbolic_icon">
        <return-type type="GIcon*" owned="true"/>
      </method>
      <method name="IsLoopback" cname="g_unix_mount_point_is_loopback">
        <return-type type="gboolean"/>
      </method>
      <method name="IsReadonly" cname="g_unix_mount_point_is_readonly">
        <return-type type="gboolean"/>
      </method>
      <method name="IsUserMountable" cname="g_unix_mount_point_is_user_mountable">
        <return-type type="gboolean"/>
      </method>
    </struct>
    <struct name="UnixOutputStreamPrivate" cname="GUnixOutputStreamPrivate" opaque="true" hidden="true"/>
    <struct name="UnixSocketAddressPrivate" cname="GUnixSocketAddressPrivate" opaque="true" hidden="true"/>
    <object name="Global" cname="GioGlobal" opaque="true">
      <method name="AppInfoCreateFromCommandline" cname="g_app_info_create_from_commandline" shared="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters throws="1">
          <parameter name="commandline" type="const-gchar*"/>
          <parameter allow-none="1" name="application_name" type="const-gchar*"/>
          <parameter name="flags" type="GAppInfoCreateFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AppInfoGetAll" cname="g_app_info_get_all" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
      </method>
      <method name="AppInfoGetAllForType" cname="g_app_info_get_all_for_type" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AppInfoGetDefaultForType" cname="g_app_info_get_default_for_type" shared="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
          <parameter name="must_support_uris" type="gboolean"/>
        </parameters>
      </method>
      <method name="AppInfoGetDefaultForUriScheme" cname="g_app_info_get_default_for_uri_scheme" shared="true">
        <return-type type="GAppInfo*" owned="true"/>
        <parameters>
          <parameter name="uri_scheme" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AppInfoGetFallbackForType" cname="g_app_info_get_fallback_for_type" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AppInfoGetRecommendedForType" cname="g_app_info_get_recommended_for_type" shared="true">
        <return-type type="GList*" element_type="GAppInfo*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AppInfoLaunchDefaultForUri" cname="g_app_info_launch_default_for_uri" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="uri" type="const-gchar*"/>
          <parameter allow-none="1" name="launch_context" type="GAppLaunchContext*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="AppInfoResetTypeAssociations" cname="g_app_info_reset_type_associations" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="content_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AsyncInitableNewvAsync" cname="g_async_initable_newv_async" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="object_type" type="GType"/>
          <parameter name="n_parameters" type="guint"/>
          <parameter name="parameters" type="GParameter*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="6" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="BusGet" cname="g_bus_get" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="BusGetFinish" cname="g_bus_get_finish" shared="true">
        <return-type type="GDBusConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="BusGetSync" cname="g_bus_get_sync" shared="true">
        <return-type type="GDBusConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="bus_type" type="GBusType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="BusOwnName" cname="g_bus_own_name" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameOwnerFlags"/>
          <parameter allow-none="1" name="bus_acquired_handler" type="GBusAcquiredCallback"/>
          <parameter allow-none="1" name="name_acquired_handler" type="GBusNameAcquiredCallback"/>
          <parameter closure="6" destroy="7" scope="notified" allow-none="1" name="name_lost_handler" type="GBusNameLostCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="user_data_free_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="BusOwnNameOnConnection" cname="g_bus_own_name_on_connection" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameOwnerFlags"/>
          <parameter allow-none="1" name="name_acquired_handler" type="GBusNameAcquiredCallback"/>
          <parameter closure="5" destroy="6" scope="notified" allow-none="1" name="name_lost_handler" type="GBusNameLostCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="user_data_free_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="BusOwnNameOnConnectionWithClosures" cname="g_bus_own_name_on_connection_with_closures" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameOwnerFlags"/>
          <parameter allow-none="1" name="name_acquired_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="name_lost_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="BusOwnNameWithClosures" cname="g_bus_own_name_with_closures" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameOwnerFlags"/>
          <parameter allow-none="1" name="bus_acquired_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="name_acquired_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="name_lost_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="BusUnownName" cname="g_bus_unown_name" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="owner_id" type="guint"/>
        </parameters>
      </method>
      <method name="BusUnwatchName" cname="g_bus_unwatch_name" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="watcher_id" type="guint"/>
        </parameters>
      </method>
      <method name="BusWatchName" cname="g_bus_watch_name" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameWatcherFlags"/>
          <parameter allow-none="1" name="name_appeared_handler" type="GBusNameAppearedCallback"/>
          <parameter closure="5" destroy="6" scope="notified" allow-none="1" name="name_vanished_handler" type="GBusNameVanishedCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="user_data_free_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="BusWatchNameOnConnection" cname="g_bus_watch_name_on_connection" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameWatcherFlags"/>
          <parameter allow-none="1" name="name_appeared_handler" type="GBusNameAppearedCallback"/>
          <parameter closure="5" destroy="6" scope="notified" allow-none="1" name="name_vanished_handler" type="GBusNameVanishedCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="user_data_free_func" type="GDestroyNotify"/>
        </parameters>
      </method>
      <method name="BusWatchNameOnConnectionWithClosures" cname="g_bus_watch_name_on_connection_with_closures" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="connection" type="GDBusConnection*"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameWatcherFlags"/>
          <parameter allow-none="1" name="name_appeared_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="name_vanished_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="BusWatchNameWithClosures" cname="g_bus_watch_name_with_closures" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="bus_type" type="GBusType"/>
          <parameter name="name" type="const-gchar*"/>
          <parameter name="flags" type="GBusNameWatcherFlags"/>
          <parameter allow-none="1" name="name_appeared_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="name_vanished_closure" type="GClosure*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ContentTypeCanBeExecutable" cname="g_content_type_can_be_executable" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeEquals" cname="g_content_type_equals" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="type1" type="const-gchar*"/>
          <parameter name="type2" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeFromMimeType" cname="g_content_type_from_mime_type" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="mime_type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeGetDescription" cname="g_content_type_get_description" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeGetGenericIconName" cname="g_content_type_get_generic_icon_name" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeGetIcon" cname="g_content_type_get_icon" shared="true">
        <return-type type="GIcon*" owned="true"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeGetMimeType" cname="g_content_type_get_mime_type" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeGetSymbolicIcon" cname="g_content_type_get_symbolic_icon" shared="true">
        <return-type type="GIcon*" owned="true"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeGuess" cname="g_content_type_guess" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter allow-none="1" name="filename" type="const-gchar*"/>
          <parameter allow-none="1" name="data" type="guchar*" array="true" array_length_param_index="2"/>
          <parameter name="data_size" type="gsize"/>
          <parameter allow-none="1" name="result_uncertain" type="gboolean*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="ContentTypeGuessForTree" cname="g_content_type_guess_for_tree" shared="true">
        <return-type type="gchar***" owned="true" array="true" null_term_array="true"/>
        <parameters>
          <parameter name="root" type="GFile*"/>
        </parameters>
      </method>
      <method name="ContentTypeIsA" cname="g_content_type_is_a" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
          <parameter name="supertype" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypeIsUnknown" cname="g_content_type_is_unknown" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="type" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ContentTypesGetRegistered" cname="g_content_types_get_registered" shared="true">
        <return-type type="GList*" element_type="gchar*" elements_owned="true" owned="true"/>
      </method>
      <method name="DbusAddressGetForBusSync" cname="g_dbus_address_get_for_bus_sync" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters throws="1">
          <parameter name="bus_type" type="GBusType"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="DbusAddressGetStream" cname="g_dbus_address_get_stream" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="address" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter closure="3" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="DbusAddressGetStreamFinish" cname="g_dbus_address_get_stream_finish" shared="true">
        <return-type type="GIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="res" type="GAsyncResult*"/>
          <parameter name="out_guid" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="DbusAddressGetStreamSync" cname="g_dbus_address_get_stream_sync" shared="true">
        <return-type type="GIOStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="address" type="const-gchar*"/>
          <parameter name="out_guid" type="const-gchar*"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="DbusAnnotationInfoLookup" cname="g_dbus_annotation_info_lookup" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter allow-none="1" name="annotations" type="GDBusAnnotationInfo**" array="true" null_term_array="true"/>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusErrorEncodeGerror" cname="g_dbus_error_encode_gerror" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="DbusErrorGetRemoteError" cname="g_dbus_error_get_remote_error" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="DbusErrorIsRemoteError" cname="g_dbus_error_is_remote_error" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="DbusErrorNewForDbusError" cname="g_dbus_error_new_for_dbus_error" shared="true">
        <return-type type="GError*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="dbus_error_name" type="const-gchar*"/>
          <parameter name="dbus_error_message" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusErrorQuark" cname="g_dbus_error_quark" shared="true">
        <return-type type="guint32"/>
      </method>
      <method name="DbusErrorRegisterError" cname="g_dbus_error_register_error" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="error_domain" type="guint32"/>
          <parameter name="error_code" type="gint"/>
          <parameter name="dbus_error_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusErrorRegisterErrorDomain" cname="g_dbus_error_register_error_domain" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="error_domain_quark_name" type="const-gchar*"/>
          <parameter name="quark_volatile" type="gsize"/>
          <parameter name="entries" type="GDBusErrorEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="num_entries" type="guint"/>
        </parameters>
      </method>
      <method name="DbusErrorStripRemoteError" cname="g_dbus_error_strip_remote_error" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="DbusErrorUnregisterError" cname="g_dbus_error_unregister_error" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="error_domain" type="guint32"/>
          <parameter name="error_code" type="gint"/>
          <parameter name="dbus_error_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusGenerateGuid" cname="g_dbus_generate_guid" shared="true">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="DbusGvalueToGvariant" cname="g_dbus_gvalue_to_gvariant" shared="true">
        <return-type type="GVariant*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="gvalue" type="GValue*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="type" type="GVariantType*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="DbusGvariantToGvalue" cname="g_dbus_gvariant_to_gvalue" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="GVariant*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="out_gvalue" type="GValue*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="DbusIsAddress" cname="g_dbus_is_address" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusIsGuid" cname="g_dbus_is_guid" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusIsInterfaceName" cname="g_dbus_is_interface_name" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusIsMemberName" cname="g_dbus_is_member_name" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusIsName" cname="g_dbus_is_name" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="DbusIsSupportedAddress" cname="g_dbus_is_supported_address" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="string" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="DbusIsUniqueName" cname="g_dbus_is_unique_name" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="FileNewForCommandlineArg" cname="g_file_new_for_commandline_arg" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="arg" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="FileNewForPath" cname="g_file_new_for_path" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="FileNewForUri" cname="g_file_new_for_uri" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="uri" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="FileNewTmp" cname="g_file_new_tmp" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters throws="1">
          <parameter allow-none="1" name="tmpl" type="const-gfilename*"/>
          <parameter name="iostream" type="GFileIOStream*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="FileParseName" cname="g_file_parse_name" shared="true">
        <return-type type="GFile*" owned="true"/>
        <parameters>
          <parameter name="parse_name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="IconHash" cname="g_icon_hash" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="icon" type="gpointer"/>
        </parameters>
      </method>
      <method name="IconNewForString" cname="g_icon_new_for_string" shared="true">
        <return-type type="GIcon*" owned="true"/>
        <parameters throws="1">
          <parameter name="str" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="InitableNewv" cname="g_initable_newv" shared="true">
        <return-type type="gpointer*" owned="true"/>
        <parameters throws="1">
          <parameter name="object_type" type="GType"/>
          <parameter name="n_parameters" type="guint"/>
          <parameter name="parameters" type="GParameter*" array="true" array_length_param_index="1"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="IoErrorFromErrno" cname="g_io_error_from_errno" shared="true">
        <return-type type="GIOErrorEnum"/>
        <parameters>
          <parameter name="err_no" type="gint"/>
        </parameters>
      </method>
      <method name="IoErrorQuark" cname="g_io_error_quark" shared="true">
        <return-type type="guint32"/>
      </method>
      <method name="IoExtensionPointImplement" cname="g_io_extension_point_implement" shared="true">
        <return-type type="GIOExtension*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="extension_point_name" type="const-gchar*"/>
          <parameter name="type" type="GType"/>
          <parameter name="extension_name" type="const-gchar*"/>
          <parameter name="priority" type="gint"/>
        </parameters>
      </method>
      <method name="IoExtensionPointLookup" cname="g_io_extension_point_lookup" shared="true">
        <return-type type="GIOExtensionPoint*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="IoExtensionPointRegister" cname="g_io_extension_point_register" shared="true">
        <return-type type="GIOExtensionPoint*">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="IoModulesLoadAllInDirectory" cname="g_io_modules_load_all_in_directory" shared="true">
        <return-type type="GList*" element_type="GIOModule*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="dirname" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="IoModulesLoadAllInDirectoryWithScope" cname="g_io_modules_load_all_in_directory_with_scope" shared="true">
        <return-type type="GList*" element_type="GIOModule*" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="dirname" type="const-gchar*"/>
          <parameter name="scope" type="GIOModuleScope*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="IoModulesScanAllInDirectory" cname="g_io_modules_scan_all_in_directory" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="dirname" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="IoModulesScanAllInDirectoryWithScope" cname="g_io_modules_scan_all_in_directory_with_scope" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="dirname" type="const-gchar*"/>
          <parameter name="scope" type="GIOModuleScope*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="IoSchedulerCancelAllJobs" cname="g_io_scheduler_cancel_all_jobs" shared="true">
        <return-type type="void"/>
      </method>
      <method name="IoSchedulerPushJob" cname="g_io_scheduler_push_job" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="job_func" type="GIOSchedulerJobFunc"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter scope="async" allow-none="1" name="notify" type="GDestroyNotify"/>
          <parameter name="io_priority" type="gint"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="NetworkMonitorGetDefault" cname="g_network_monitor_get_default" shared="true">
        <return-type type="GNetworkMonitor*"/>
      </method>
      <method name="PollableSourceNew" cname="g_pollable_source_new" shared="true">
        <return-type type="GSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="pollable_stream" type="GObject*"/>
        </parameters>
      </method>
      <method name="PollableSourceNewFull" cname="g_pollable_source_new_full" shared="true">
        <return-type type="GSource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="pollable_stream" type="GObject*"/>
          <parameter allow-none="1" name="child_source" type="GSource*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
        </parameters>
      </method>
      <method name="PollableStreamRead" cname="g_pollable_stream_read" shared="true">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="stream" type="GInputStream*"/>
          <parameter name="buffer" type="gpointer"/>
          <parameter name="count" type="gsize"/>
          <parameter name="blocking" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PollableStreamWrite" cname="g_pollable_stream_write" shared="true">
        <return-type type="gssize"/>
        <parameters throws="1">
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*" array="true" array_length_param_index="2"/>
          <parameter name="count" type="gsize"/>
          <parameter name="blocking" type="gboolean"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="PollableStreamWriteAll" cname="g_pollable_stream_write_all" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="stream" type="GOutputStream*"/>
          <parameter name="buffer" type="void*" array="true" array_length_param_index="2"/>
          <parameter name="count" type="gsize"/>
          <parameter name="blocking" type="gboolean"/>
          <parameter name="bytes_written" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="cancellable" type="GCancellable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ProxyGetDefaultForProtocol" cname="g_proxy_get_default_for_protocol" shared="true">
        <return-type type="GProxy*" owned="true"/>
        <parameters>
          <parameter name="protocol" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="ProxyResolverGetDefault" cname="g_proxy_resolver_get_default" shared="true">
        <return-type type="GProxyResolver*"/>
      </method>
      <method name="ResolverErrorQuark" cname="g_resolver_error_quark" shared="true">
        <return-type type="guint32"/>
      </method>
      <method name="ResourceErrorQuark" cname="g_resource_error_quark" shared="true">
        <return-type type="guint32"/>
      </method>
      <method name="ResourceLoad" cname="g_resource_load" shared="true">
        <return-type type="GResource*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="filename" type="const-gfilename*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ResourcesEnumerateChildren" cname="g_resources_enumerate_children" shared="true">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ResourcesGetInfo" cname="g_resources_get_info" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter allow-none="1" name="size" type="gsize*" owned="true" pass_as="out"/>
          <parameter allow-none="1" name="flags" type="guint32*" owned="true" pass_as="out"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ResourcesLookupData" cname="g_resources_lookup_data" shared="true">
        <return-type type="GBytes*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="ResourcesOpenStream" cname="g_resources_open_stream" shared="true">
        <return-type type="GInputStream*" owned="true"/>
        <parameters throws="1">
          <parameter name="path" type="const-gchar*"/>
          <parameter name="lookup_flags" type="GResourceLookupFlags"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SettingsSchemaSourceGetDefault" cname="g_settings_schema_source_get_default" shared="true">
        <return-type type="GSettingsSchemaSource*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="SimpleAsyncReportErrorInIdle" cname="g_simple_async_report_error_in_idle" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="_object" type="GObject*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="domain" type="guint32"/>
          <parameter name="code" type="gint"/>
          <parameter name="format" type="const-gchar*"/>
          <parameter name="var_args" type="va_list"/>
        </parameters>
      </method>
      <method name="SimpleAsyncReportGerrorInIdle" cname="g_simple_async_report_gerror_in_idle" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="_object" type="GObject*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SimpleAsyncReportTakeGerrorInIdle" cname="g_simple_async_report_take_gerror_in_idle" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="_object" type="GObject*"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="GAsyncReadyCallback"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="error" type="GError*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="SrvTargetListSort" cname="g_srv_target_list_sort" shared="true">
        <return-type type="GList*" element_type="gpointer" elements_owned="true" owned="true"/>
        <parameters>
          <parameter name="targets" type="GList*" element_type="gpointer"/>
        </parameters>
      </method>
      <method name="TlsBackendGetDefault" cname="g_tls_backend_get_default" shared="true">
        <return-type type="GTlsBackend*"/>
      </method>
      <method name="TlsClientConnectionNew" cname="g_tls_client_connection_new" shared="true">
        <return-type type="GTlsClientConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="base_io_stream" type="GIOStream*"/>
          <parameter allow-none="1" name="server_identity" type="GSocketConnectable*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="TlsErrorQuark" cname="g_tls_error_quark" shared="true">
        <return-type type="guint32"/>
      </method>
      <method name="TlsFileDatabaseNew" cname="g_tls_file_database_new" shared="true">
        <return-type type="GTlsFileDatabase*" owned="true"/>
        <parameters throws="1">
          <parameter name="anchors" type="const-gchar*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="TlsServerConnectionNew" cname="g_tls_server_connection_new" shared="true">
        <return-type type="GTlsServerConnection*" owned="true"/>
        <parameters throws="1">
          <parameter name="base_io_stream" type="GIOStream*"/>
          <parameter allow-none="1" name="certificate" type="GTlsCertificate*"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="UnixIsMountPathSystemInternal" cname="g_unix_is_mount_path_system_internal" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mount_path" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="UnixMountAt" cname="g_unix_mount_at" shared="true">
        <return-type type="GUnixMountEntry*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter name="mount_path" type="const-gchar*"/>
          <parameter allow-none="1" name="time_read" type="guint64*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="UnixMountCompare" cname="g_unix_mount_compare" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="mount1" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="mount2" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountFree" cname="g_unix_mount_free" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGetDevicePath" cname="g_unix_mount_get_device_path" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGetFsType" cname="g_unix_mount_get_fs_type" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGetMountPath" cname="g_unix_mount_get_mount_path" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGuessCanEject" cname="g_unix_mount_guess_can_eject" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGuessIcon" cname="g_unix_mount_guess_icon" shared="true">
        <return-type type="GIcon*" owned="true"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGuessName" cname="g_unix_mount_guess_name" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGuessShouldDisplay" cname="g_unix_mount_guess_should_display" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountGuessSymbolicIcon" cname="g_unix_mount_guess_symbolic_icon" shared="true">
        <return-type type="GIcon*" owned="true"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountIsReadonly" cname="g_unix_mount_is_readonly" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountIsSystemInternal" cname="g_unix_mount_is_system_internal" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="mount_entry" type="GUnixMountEntry*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="UnixMountPointsChangedSince" cname="g_unix_mount_points_changed_since" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="time" type="guint64"/>
        </parameters>
      </method>
      <method name="UnixMountPointsGet" cname="g_unix_mount_points_get" shared="true">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter allow-none="1" name="time_read" type="guint64*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="UnixMountsChangedSince" cname="g_unix_mounts_changed_since" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="time" type="guint64"/>
        </parameters>
      </method>
      <method name="UnixMountsGet" cname="g_unix_mounts_get" shared="true">
        <return-type type="GList*" element_type="GList*" elements_owned="true" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters>
          <parameter allow-none="1" name="time_read" type="guint64*" owned="true" pass_as="out"/>
        </parameters>
      </method>
    </object>
    <object name="Constants" cname="GioConstants" opaque="true">
      <constant value="gio-desktop-app-info-lookup" ctype="gchar*" gtype="gchar*" name="DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME"/>
      <constant value="access::can-delete" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ACCESS_CAN_DELETE"/>
      <constant value="access::can-execute" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE"/>
      <constant value="access::can-read" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ACCESS_CAN_READ"/>
      <constant value="access::can-rename" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ACCESS_CAN_RENAME"/>
      <constant value="access::can-trash" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ACCESS_CAN_TRASH"/>
      <constant value="access::can-write" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ACCESS_CAN_WRITE"/>
      <constant value="dos::is-archive" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_DOS_IS_ARCHIVE"/>
      <constant value="dos::is-system" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_DOS_IS_SYSTEM"/>
      <constant value="etag::value" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ETAG_VALUE"/>
      <constant value="filesystem::free" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_FILESYSTEM_FREE"/>
      <constant value="filesystem::readonly" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_FILESYSTEM_READONLY"/>
      <constant value="filesystem::size" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_FILESYSTEM_SIZE"/>
      <constant value="filesystem::type" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_FILESYSTEM_TYPE"/>
      <constant value="filesystem::used" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_FILESYSTEM_USED"/>
      <constant value="filesystem::use-preview" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW"/>
      <constant value="gvfs::backend" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_GVFS_BACKEND"/>
      <constant value="id::file" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ID_FILE"/>
      <constant value="id::filesystem" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_ID_FILESYSTEM"/>
      <constant value="mountable::can-eject" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT"/>
      <constant value="mountable::can-mount" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT"/>
      <constant value="mountable::can-poll" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL"/>
      <constant value="mountable::can-start" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_START"/>
      <constant value="mountable::can-start-degraded" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED"/>
      <constant value="mountable::can-stop" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP"/>
      <constant value="mountable::can-unmount" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT"/>
      <constant value="mountable::hal-udi" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI"/>
      <constant value="mountable::is-media-check-automatic" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC"/>
      <constant value="mountable::start-stop-type" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE"/>
      <constant value="mountable::unix-device" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE"/>
      <constant value="mountable::unix-device-file" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE"/>
      <constant value="owner::group" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_OWNER_GROUP"/>
      <constant value="owner::user" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_OWNER_USER"/>
      <constant value="owner::user-real" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_OWNER_USER_REAL"/>
      <constant value="preview::icon" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_PREVIEW_ICON"/>
      <constant value="selinux::context" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_SELINUX_CONTEXT"/>
      <constant value="standard::allocated-size" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE"/>
      <constant value="standard::content-type" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE"/>
      <constant value="standard::copy-name" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_COPY_NAME"/>
      <constant value="standard::description" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_DESCRIPTION"/>
      <constant value="standard::display-name" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME"/>
      <constant value="standard::edit-name" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_EDIT_NAME"/>
      <constant value="standard::fast-content-type" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE"/>
      <constant value="standard::icon" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_ICON"/>
      <constant value="standard::is-backup" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_IS_BACKUP"/>
      <constant value="standard::is-hidden" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_IS_HIDDEN"/>
      <constant value="standard::is-symlink" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_IS_SYMLINK"/>
      <constant value="standard::is-virtual" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL"/>
      <constant value="standard::name" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_NAME"/>
      <constant value="standard::size" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_SIZE"/>
      <constant value="standard::sort-order" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_SORT_ORDER"/>
      <constant value="standard::symbolic-icon" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON"/>
      <constant value="standard::symlink-target" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET"/>
      <constant value="standard::target-uri" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_TARGET_URI"/>
      <constant value="standard::type" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_STANDARD_TYPE"/>
      <constant value="thumbnail::failed" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_THUMBNAILING_FAILED"/>
      <constant value="thumbnail::path" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_THUMBNAIL_PATH"/>
      <constant value="time::access" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_ACCESS"/>
      <constant value="time::access-usec" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_ACCESS_USEC"/>
      <constant value="time::changed" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_CHANGED"/>
      <constant value="time::changed-usec" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_CHANGED_USEC"/>
      <constant value="time::created" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_CREATED"/>
      <constant value="time::created-usec" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_CREATED_USEC"/>
      <constant value="time::modified" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_MODIFIED"/>
      <constant value="time::modified-usec" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TIME_MODIFIED_USEC"/>
      <constant value="trash::deletion-date" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TRASH_DELETION_DATE"/>
      <constant value="trash::item-count" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TRASH_ITEM_COUNT"/>
      <constant value="trash::orig-path" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_TRASH_ORIG_PATH"/>
      <constant value="unix::blocks" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_BLOCKS"/>
      <constant value="unix::block-size" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_BLOCK_SIZE"/>
      <constant value="unix::device" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_DEVICE"/>
      <constant value="unix::gid" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_GID"/>
      <constant value="unix::inode" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_INODE"/>
      <constant value="unix::is-mountpoint" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT"/>
      <constant value="unix::mode" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_MODE"/>
      <constant value="unix::nlink" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_NLINK"/>
      <constant value="unix::rdev" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_RDEV"/>
      <constant value="unix::uid" ctype="gchar*" gtype="gchar*" name="FILE_ATTRIBUTE_UNIX_UID"/>
      <constant value="action" ctype="gchar*" gtype="gchar*" name="MENU_ATTRIBUTE_ACTION"/>
      <constant value="label" ctype="gchar*" gtype="gchar*" name="MENU_ATTRIBUTE_LABEL"/>
      <constant value="target" ctype="gchar*" gtype="gchar*" name="MENU_ATTRIBUTE_TARGET"/>
      <constant value="section" ctype="gchar*" gtype="gchar*" name="MENU_LINK_SECTION"/>
      <constant value="submenu" ctype="gchar*" gtype="gchar*" name="MENU_LINK_SUBMENU"/>
      <constant value="gio-native-volume-monitor" ctype="gchar*" gtype="gchar*" name="NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME"/>
      <constant value="gio-network-monitor" ctype="gchar*" gtype="gchar*" name="NETWORK_MONITOR_EXTENSION_POINT_NAME"/>
      <constant value="gio-proxy" ctype="gchar*" gtype="gchar*" name="PROXY_EXTENSION_POINT_NAME"/>
      <constant value="gio-proxy-resolver" ctype="gchar*" gtype="gchar*" name="PROXY_RESOLVER_EXTENSION_POINT_NAME"/>
      <constant value="gio-tls-backend" ctype="gchar*" gtype="gchar*" name="TLS_BACKEND_EXTENSION_POINT_NAME"/>
      <constant value="1.3.6.1.5.5.7.3.2" ctype="gchar*" gtype="gchar*" name="TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT"/>
      <constant value="1.3.6.1.5.5.7.3.1" ctype="gchar*" gtype="gchar*" name="TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER"/>
      <constant value="gio-vfs" ctype="gchar*" gtype="gchar*" name="VFS_EXTENSION_POINT_NAME"/>
      <constant value="class" ctype="gchar*" gtype="gchar*" name="VOLUME_IDENTIFIER_KIND_CLASS"/>
      <constant value="hal-udi" ctype="gchar*" gtype="gchar*" name="VOLUME_IDENTIFIER_KIND_HAL_UDI"/>
      <constant value="label" ctype="gchar*" gtype="gchar*" name="VOLUME_IDENTIFIER_KIND_LABEL"/>
      <constant value="nfs-mount" ctype="gchar*" gtype="gchar*" name="VOLUME_IDENTIFIER_KIND_NFS_MOUNT"/>
      <constant value="unix-device" ctype="gchar*" gtype="gchar*" name="VOLUME_IDENTIFIER_KIND_UNIX_DEVICE"/>
      <constant value="uuid" ctype="gchar*" gtype="gchar*" name="VOLUME_IDENTIFIER_KIND_UUID"/>
      <constant value="gio-volume-monitor" ctype="gchar*" gtype="gchar*" name="VOLUME_MONITOR_EXTENSION_POINT_NAME"/>
    </object>
  </namespace>
</api>
